<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GBCMD" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" id="0340468f-59e9-4a5d-9ddc-5ac6d40258ac" xmlns:con="http://eviware.com/soapui/config">
	<con:settings/>
	<con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ESPI Resources" type="rest" id="67592114-eb87-42a5-87f1-4c996a14c5da" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		<con:definitionCache type="TEXT" rootPart=""/><con:resource name="resource" path="/${#Project#resourceUri}" id="58456799-b780-49f8-bfec-ecb0dcda8a7d">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>Authorization</con:name>
					<con:value>Bearer ${#Project#data_custodian_access_token}</con:value>
					<con:style>HEADER</con:style>
					<con:default>Bearer ${#Project#data_custodian_access_token}</con:default>
				</con:parameter>
				<con:parameter>
					<con:name>Content-Type</con:name>
					<con:value>Application/atom+xml</con:value>
					<con:style>HEADER</con:style>
					<con:default>Application/atom+xml</con:default>
				</con:parameter>
			</con:parameters>
			<con:resource name="IntervalBlock" path="IntervalBlock" id="be0213b2-9ac2-43e2-b28c-aafea338b051">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{intervalBlockId}" path="{intervalBlockId}" id="acefa865-1a9e-4c58-bca5-bef8addc24e7">
					<con:settings/>
					<con:method name="Get root IntervalBlock" method="GET" id="20588ce2-a0fc-4a5e-a7c5-0d5fdf090e96">
						<con:settings/>
						<con:parameters/>
						<con:request name="Get root IntervalBlock" mediaType="application/json" id="df109c2a-8686-44f2-a9a1-024b74d4febe">
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://testgb.mooo.com/DataCustodian/espi/1_1/resource/IntervalBlock/1</con:originalUri><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>intervalBlockId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:credentials>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
				</con:request>
				<con:representation type="RESPONSE">
					<con:mediaType>application/atom+xml</con:mediaType>
					<con:status>200</con:status>
					<con:params/>
					<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
				</con:representation>
				<con:representation type="REQUEST">
					<con:mediaType>Application/atom+xml</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
					<con:status>500</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
			<con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/></con:representation></con:method>
			<con:parameters>
				<con:parameter>
					<con:name>intervalBlockId</con:name>
					<con:value>${#Project#intervalBlockId}</con:value>
					<con:style>TEMPLATE</con:style>
					<con:default>${#Project#intervalBlockId}</con:default>
				</con:parameter>
			</con:parameters>
		</con:resource>
		<con:method name="Get root IntervalBlock feed" method="GET" id="beccd8b0-5458-45ed-b749-05deeb0aff07">
			<con:settings/>
			<con:parameters/>
			<con:request name="Get root IntervalBlock feed" mediaType="application/json" id="a18df4c5-7ab8-48df-a1cd-c93a24d883a6">
				<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
				<con:request/>
				<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/IntervalBlock</con:originalUri>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
				<con:jmsPropertyConfig/>
				<con:parameters/>
				<con:parameterOrder>
					<con:entry>Authorization</con:entry>
					<con:entry>Content-Type</con:entry>
				</con:parameterOrder>
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
	</con:request>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
</con:method>
</con:resource>
<con:resource name="UsagePoint" path="UsagePoint" id="6aed094e-2f99-4838-8d1f-1ea2d81b1587">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{usagePointId}" path="{usagePointId}" id="e7a05c43-0a9e-4c54-9e7b-7a6e4a343604">
		<con:settings/>
		<con:method name="Get UsagePoint by Id" method="GET" id="6baab186-e083-4fe1-821d-6df676e2fdd4">
			<con:settings/>
			<con:parameters/>
			<con:request name="Get root UsagePoint" mediaType="application/json" id="93c02402-db4a-45c8-aff5-5d593b30e2f2">
				<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
				<con:request/>
				<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/UsagePoint/1</con:originalUri>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
				<con:jmsPropertyConfig/>
				<con:parameters/>
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:parameterOrder>
			<con:entry>usagePointId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:request>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
</con:method>
<con:parameters>
	<con:parameter>
		<con:name>usagePointId</con:name>
		<con:value>${#Project#usagePointId}</con:value>
		<con:style>TEMPLATE</con:style>
		<con:default>${#Project#usagePointId}</con:default>
	</con:parameter>
</con:parameters>
<con:method name="Delete" method="DELETE" id="b1251595-7747-4bcd-849b-d9997849d5fb">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="5b353840-3ab4-4be9-a707-3e3354ed6e83">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>usagePointId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Put" method="PUT" id="196e11c2-1a4e-44c2-a484-eca82c673b3f">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="72c2311a-edbf-424f-bc1d-26bd202f5e1e">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>usagePointId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="Get root UsagePoint feed" method="GET" id="13cfddb7-fbee-4ce4-8fcb-128edc822c9c">
	<con:settings/>
	<con:parameters/>
	<con:request name="Get root UsagePoint feed" mediaType="application/json" id="088d8604-6450-4180-a903-a25c66d6997b">
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/UsagePoint</con:originalUri>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
</con:request>
<con:representation type="RESPONSE">
	<con:mediaType>application/atom+xml</con:mediaType>
	<con:status>200</con:status>
	<con:params/>
	<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>application/atom+xml</con:mediaType>
	<con:status>400</con:status>
	<con:params/>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
	<con:status>500</con:status>
	<con:params/>
	<con:element>html</con:element>
</con:representation>
<con:representation type="REQUEST">
	<con:mediaType>Application/atom+xml</con:mediaType>
	<con:params/>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>text/html;charset=utf-8</con:mediaType>
	<con:status>400</con:status>
	<con:params/>
	<con:element>html</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>application/json;charset=UTF-8</con:mediaType>
	<con:status>401</con:status>
	<con:params/>
	<con:element xmlns:usag="http://localhost/DataCustodian/espi/1_1/resource/UsagePoint">usag:Fault</con:element>
</con:representation>
<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation></con:method>
<con:method name="Post" method="POST" id="60a953d3-6053-46db-8bad-167f7c1b347f">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>415</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/xml+atom</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="569780c9-018b-4b87-87ef-72cd4ca64360">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/UsagePoint</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="MeterReading" path="MeterReading" id="2f8b8dea-c961-492c-b98b-f242e2305d30">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{meterReadingId}" path="{meterReadingId}" id="e7fcf200-7bfd-4b08-a5cc-c269e14cd241">
		<con:settings/>
		<con:method name="Get MeterReading by Id" method="GET" id="1fd04195-59f0-4a18-8de3-c064091bef1b">
			<con:settings/>
			<con:parameters/>
			<con:request name="Get root MeterReading" mediaType="application/json" id="235b1bd9-4a58-461d-b8ab-ebd7f40e2023">
				<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
				<con:request/>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
				<con:jmsPropertyConfig/>
				<con:parameters/>
				<con:parameterOrder>
					<con:entry>meterReadingId</con:entry>
					<con:entry>Authorization</con:entry>
					<con:entry>Content-Type</con:entry>
				</con:parameterOrder>
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
	</con:request>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
</con:method>
<con:parameters>
	<con:parameter>
		<con:name>meterReadingId</con:name>
		<con:value>${#Project#meterReadingId}</con:value>
		<con:style>TEMPLATE</con:style>
		<con:default>${#Project#meterReadingId}</con:default>
	</con:parameter>
</con:parameters>
<con:method name="Delete" method="DELETE" id="69ae7f76-298c-44d5-b8df-c75a8f84a32d">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="f75247ab-e031-47ec-ae2f-a4437565180e">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>meterReadingId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Put" method="PUT" id="62b76eb8-0014-49c2-b9db-c3eff28bf2aa">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="55e82d1c-05af-4085-8d6c-69f7fc61bf67">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>meterReadingId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="Get root MeterReading feed" method="GET" id="61872680-b0d4-4b37-9817-76470967a869">
	<con:settings/>
	<con:parameters/>
	<con:request name="Get root MeterReading feed" mediaType="application/json" id="ae1bf169-87ef-4ce7-961d-8c8da11dc074">
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
</con:request>
<con:representation type="RESPONSE">
	<con:mediaType>application/atom+xml</con:mediaType>
	<con:status>200</con:status>
	<con:params/>
	<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
</con:representation>
<con:representation type="REQUEST">
	<con:mediaType>Application/atom+xml</con:mediaType>
	<con:params/>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>application/json;charset=UTF-8</con:mediaType>
	<con:status>401 403</con:status>
	<con:params/>
	<con:element xmlns:met="https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading">met:Fault</con:element>
</con:representation>
</con:method>
<con:method name="Post" method="POST" id="1e0294a1-297d-4e84-81d4-15a177af4692">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>415</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="b84cdeca-c422-41a3-b378-7d4ddbe41b32">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="ReadingType" path="ReadingType" id="c20eb6ba-74ff-4a8b-9028-1db6dc6b19b6">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{readingTypeId}" path="{readingTypeId}" id="57593c76-6a0a-4cec-89e6-4948389dc91b">
		<con:settings/>
		<con:method name="Get ReadingType by Id" method="GET" id="0f119777-c966-4137-afa6-848b3c2baadb">
			<con:settings/>
			<con:parameters/>
			<con:request name="Get root ReadingType" mediaType="application/json" id="8a301fd3-0ea4-46bb-b3bd-6d934d52b57c">
				<con:encoding/>
				<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
				<con:request/>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
				<con:jmsPropertyConfig/>
				<con:parameters/>
				<con:parameterOrder>
					<con:entry>readingTypeId</con:entry>
					<con:entry>Authorization</con:entry>
					<con:entry>Content-Type</con:entry>
				</con:parameterOrder>
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
	</con:request>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
</con:method>
<con:parameters>
	<con:parameter>
		<con:name>readingTypeId</con:name>
		<con:value>${#Project#readingTypeId}</con:value>
		<con:style>TEMPLATE</con:style>
		<con:default>${#Project#readingTypeId}</con:default>
	</con:parameter>
</con:parameters>
<con:method name="Delete" method="DELETE" id="f808e9c9-5421-4464-8809-932515e84fa2">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="cb17ddcb-e0e4-4dc7-a381-e77eb9baa504">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>readingTypeId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Put" method="PUT" id="fb925c4e-30f9-4d61-938d-0957bd92b8d1">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="77ee6813-3498-4b87-841b-894784c2311c">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>readingTypeId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="Get root ReadingType feed" method="GET" id="d8cbd073-7374-4e64-a980-f25201aff2b1">
	<con:settings/>
	<con:parameters/>
	<con:request name="Get root ReadingType feed" mediaType="application/json" id="b16590e5-f966-4442-be59-1354fbfc5c43">
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadingType</con:originalUri>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
</con:request>
<con:representation type="RESPONSE">
	<con:mediaType>application/atom+xml</con:mediaType>
	<con:status>200</con:status>
	<con:params/>
	<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
</con:representation>
<con:representation type="REQUEST">
	<con:mediaType>Application/atom+xml</con:mediaType>
	<con:params/>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>application/json;charset=UTF-8</con:mediaType>
	<con:status>403</con:status>
	<con:params/>
	<con:element xmlns:read="http://localhost/DataCustodian/espi/1_1/resource/ReadingType">read:Fault</con:element>
</con:representation>
</con:method>
<con:method name="Post" method="POST" id="fc093f99-064c-41c6-a379-759eba362575">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="457daa70-5be1-461a-b9d6-0ad64e3e0c5c">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="Batch" path="Batch" id="162ebb8e-556a-4b56-9060-704ec7b36fe1">
	<con:settings/>
	<con:parameters/>
	<con:resource name="Subscription" path="Subscription" id="659b7777-8fcd-4643-8033-d4c7f0c32a5e">
		<con:settings/>
		<con:parameters/>
		<con:resource name="{subscriptionID}" path="{subscriptionID}" id="03092ec7-0ac7-4e84-aa3b-6a47b7f344cd">
			<con:settings/>
			<con:resource name="UsagePoint" path="UsagePoint" id="92ef6e6f-33d8-476d-b93e-378467827e60">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{usagePointId}" path="{usagePointId}" id="0e3ad8de-92fd-4891-a85b-e691a627fe76">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>usagePointId</con:name>
							<con:value>${#Project#usagePointId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#usagePointId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="Method 1" method="GET" id="de454589-5b62-44ae-8652-0a346e985cff">
						<con:settings/>
						<con:parameters/>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=utf-8</con:mediaType>
							<con:status>404</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="GET {usagePointId}" mediaType="application/json" id="0d627641-1b53-4ded-9b93-2e8cd6aa01fd">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5/UsagePoint/usagePointId</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<entry key="usagePointId" value="${#Project#usagePointId}" xmlns="http://eviware.com/soapui/config"/>
					</con:parameters>
				</con:request>
			</con:method>
		</con:resource>
	</con:resource>
	<con:method name="Method 1" method="GET" id="3ba52762-575b-4840-967b-4970130b71b9">
		<con:settings/>
		<con:parameters/>
		<con:request name="GET {subscriptionId}" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<entry key="subscriptionID" value="${#Project#subscriptionID}" xmlns="http://eviware.com/soapui/config"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:request>
<con:representation type="RESPONSE">
	<con:mediaType>application/atom+xml</con:mediaType>
	<con:status>200</con:status>
	<con:params/>
	<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
	<con:status>404 500</con:status>
	<con:params/>
	<con:element>html</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>application/atom+xml</con:mediaType>
	<con:status>400</con:status>
	<con:params/>
</con:representation>
<con:representation type="REQUEST">
	<con:mediaType>Application/atom+xml</con:mediaType>
	<con:params/>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>application/json;charset=UTF-8</con:mediaType>
	<con:status>403 401</con:status>
	<con:params/>
	<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/1">ns:Fault</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>text/html;charset=utf-8</con:mediaType>
	<con:status>400</con:status>
	<con:params/>
	<con:element>html</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType xsi:nil="true"/>
	<con:status>400</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType xsi:nil="true"/>
	<con:status>400</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>0</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType xsi:nil="true"/>
	<con:status>400</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
	<con:mediaType xsi:nil="true"/>
	<con:status>200</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType xsi:nil="true"/>
	<con:status>400</con:status>
	<con:params/>
	<con:element>data</con:element>
</con:representation>
<con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/></con:representation></con:method>
<con:parameters>
	<con:parameter>
		<con:name>subscriptionID</con:name>
		<con:value>${#Project#subscriptionID}</con:value>
		<con:style>TEMPLATE</con:style>
		<con:default>${#Project#subscriptionID}</con:default>
	</con:parameter>
</con:parameters>
</con:resource>
</con:resource>
<con:resource name="RetailCustomer" path="RetailCustomer" id="5a5ac7c0-a2eb-4371-9d78-9915a6c939c9">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{retailCustomerId}" path="${#Project#retailCustomerId}" id="1168de76-a66e-4990-b267-83e812dde0b5">
		<con:settings/>
		<con:resource name="UsagePoint" path="UsagePoint" id="d4b77832-dcfb-466b-9353-696e7df8089c">
			<con:settings/>
			<con:parameters/>
			<con:resource name="${#Project#usagePointId}" path="${#Project#usagePointId}" id="2cecb2c5-1e7f-4567-8dbd-009e653372ec">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>#Project#usagePointId</con:name>
						<con:value>#Project#usagePointId</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>#Project#usagePointId</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="Method 1" method="GET" id="4018c599-7bf6-4f7c-be2e-65a3729b8661">
					<con:settings/>
					<con:parameters/>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/json" id="5a9ca99c-b901-4eda-b95d-1a1802ba90e3">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
				</con:settings>
				<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
				<con:request/>
				<con:credentials>
					<con:authType>Global HTTP Settings</con:authType>
				</con:credentials>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
				<con:jmsPropertyConfig/>
				<con:parameters/>
				<con:parameterOrder>
					<con:entry>retailCustomerId</con:entry>
					<con:entry>#Project#usagePointId</con:entry>
					<con:entry>Authorization</con:entry>
					<con:entry>Content-Type</con:entry>
				</con:parameterOrder>
			</con:request>
		</con:method>
	</con:resource>
	<con:method name="Method 1" method="GET" id="3e50511a-2c69-402e-81ef-a4ca1a589ae3">
		<con:settings/>
		<con:parameters/>
		<con:representation type="FAULT">
			<con:mediaType>text/html;charset=utf-8</con:mediaType>
			<con:status>405</con:status>
			<con:params/>
			<con:element>html</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType>application/atom+xml</con:mediaType>
			<con:status>200</con:status>
			<con:params/>
			<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
		</con:representation>
		<con:request name="Request 1" mediaType="application/json" id="5735dc0d-94e2-4ee8-acac-4853edea5d80">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:credentials>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
	<con:parameterOrder>
		<con:entry>retailCustomerId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Post" method="POST" id="f6b3aefd-4ea1-4ef9-a090-57ce94b7e793">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>405 415</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0c9b6e50-3d7a-4940-b50d-7f20290474b1">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/RetailCustomer/1/UsagePoint</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:attachment>
	<con:name>test_usage_data.xml</con:name>
	<con:contentType>application/xml</con:contentType>
	<con:contentId>test_usage_data.xml</con:contentId>
	<con:url>../data/test_usage_data.xml</con:url>
	<con:id>a08d6407-242b-4a21-a369-cadf59fd95a7</con:id>
</con:attachment>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>retailCustomerId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="Method 1" method="GET" id="c8f85188-48fc-4799-a79e-1efaf9aeb1b1">
	<con:settings/>
	<con:parameters/>
	<con:request name="Request 1" mediaType="application/json" id="b627cfa3-bf2c-42c7-8bdc-db241427aff7">
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:parameterOrder>
	<con:entry>retailCustomerId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
<con:representation type="FAULT">
	<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
	<con:status>404</con:status>
	<con:params/>
	<con:element>html</con:element>
</con:representation>
<con:representation type="FAULT">
	<con:mediaType>text/html;charset=utf-8</con:mediaType>
	<con:status>405</con:status>
	<con:params/>
	<con:element>html</con:element>
</con:representation>
</con:method>
<con:parameters>
	<con:parameter>
		<con:name>retailCustomerId</con:name>
		<con:value>retailCustomerId</con:value>
		<con:style>TEMPLATE</con:style>
		<con:default>retailCustomerId</con:default>
	</con:parameter>
</con:parameters>
</con:resource>
<con:method name="Method 1" method="GET" id="167d5196-d13b-4c46-b04d-04dc7e4b1749">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>404</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="4a9566c8-8d45-4747-8de7-458b7d31261d">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="Bulk" path="Bulk" id="a8b21b8e-acf3-4472-a829-ae4b3be6c41a">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{bulkId}" path="{bulkId}" id="4501c6c5-44f4-4704-a44e-8877d0ff3411">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>bulkId</con:name>
				<con:value>Project#bulkId</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>Project#bulkId</con:default>
			</con:parameter>
		</con:parameters>
		<con:method name="Method 1" method="GET" id="efe60fe6-f6c7-479d-b979-161e4ae7e770">
			<con:settings/>
			<con:parameters/>
			<con:representation type="FAULT">
				<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
				<con:status>404</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="REQUEST"><con:mediaType>Application/atom+xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404 400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="28e01adf-7b37-4356-a821-bb3d4874919b">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Bulk/</con:originalUri><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#client_access_token}"/>
  <con:entry key="bulkId" value="${#Project#bulkId}"/>
</con:parameters>
		<con:parameterOrder><con:entry>bulkId</con:entry><con:entry>Authorization</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder>
	</con:request>
</con:method>
</con:resource>
<con:method name="Method 1" method="GET" id="c001b3fd-29a8-45b2-8bed-29491e3cb3f1">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>404</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>Application/atom+xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/json" id="941f874c-7138-441a-8a47-c3ce4ba1f2f7">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Bulk</con:originalUri><con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
</con:resource>
<con:resource name="Subscription" path="Subscription" id="42474886-37a4-43ca-a5d3-8db235c318cd">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{subscriptionId}" path="{subscriptionId}" id="dc584e5a-b904-47c8-a689-bef518d0da06">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>subscriptionId</con:name>
				<con:value>${#Project#subscriptionId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#subscriptionId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:resource name="UsagePoint" path="UsagePoint" id="fd205047-d5f4-4c30-9f84-4e1216374b8b">
			<con:settings/>
			<con:parameters/>
			<con:resource name="{usagePointId}" path="{usagePointId}" id="37aa9d50-35ca-4fbe-a6c4-b84d1942e6e0">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>usagePointId</con:name>
						<con:value>${#Project#usagePointId}</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>${#Project#usagePointId}</con:default>
					</con:parameter>
				</con:parameters>
				<con:resource name="MeterReading" path="MeterReading" id="af934b27-1654-47df-9855-d3d51436b8ec">
					<con:settings/>
					<con:parameters/>
					<con:resource name="{meterReadingId}" path="{meterReadingId}" id="c1800681-eedb-4d2a-82ec-65a67768d499">
						<con:settings/>
						<con:parameters>
							<con:parameter>
								<con:name>meterReadingId</con:name>
								<con:value>${#Project#meterReadingId}</con:value>
								<con:style>TEMPLATE</con:style>
								<con:default>${#Project#meterReadingId}</con:default>
								<con:description xsi:nil="true"/>
							</con:parameter>
						</con:parameters>
						<con:resource name="IntervalBlock" path="IntervalBlock" id="e23f80cd-05f5-4f06-adce-7d62aea058e3">
							<con:settings/>
							<con:parameters/>
							<con:resource name="{intervalBlockId}" path="{intervalBlockId}" id="7d5b42ea-3490-40b0-8a12-9281e2fc19d8">
								<con:settings/>
								<con:parameters>
									<con:parameter>
										<con:name>intervalBlockId</con:name>
										<con:value>${#Project#intervalBlockId}</con:value>
										<con:style>TEMPLATE</con:style>
										<con:default>${#Project#intervalBlockId}</con:default>
									</con:parameter>
								</con:parameters>
								<con:method name="GET IntervalBlock by Id" method="GET" id="8037a212-a1a4-4b16-a8ed-f0ec85277bf9">
									<con:settings/>
									<con:parameters/>
									<con:representation type="FAULT">
										<con:mediaType>application/json;charset=UTF-8</con:mediaType>
										<con:status>403</con:status>
										<con:params/>
										<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/MeterReading/1/IntervalBlock/1">ns:Fault</con:element>
									</con:representation>
									<con:representation type="REQUEST">
										<con:mediaType>Application/atom+xml</con:mediaType>
										<con:params/>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>text/html;charset=utf-8</con:mediaType>
										<con:status>400</con:status>
										<con:params/>
										<con:element>html</con:element>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>400</con:status>
										<con:params/>
									</con:representation>
									<con:representation type="RESPONSE">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>200</con:status>
										<con:params/>
										<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
									</con:representation>
									<con:request name="Request 1" mediaType="application/json" id="51ea6c55-6593-4533-9050-f183143318a9">
										<con:settings>
											<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:credentials>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters/>
							</con:request>
						</con:method>
					</con:resource>
					<con:method name="GET IntervalBlock feed" method="GET" id="812b2424-6098-4d4e-b259-134efea53899">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="48fdca51-17f6-4ef2-b5ca-a9fbe4da5834">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:credentials>
						<con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters/>
				</con:request>
			</con:method>
		</con:resource>
		<con:method name="GET MeterReading by Id" method="GET" id="72a21efb-0665-4994-a4b2-7e0fd6281f70">
			<con:settings/>
			<con:parameters/>
			<con:representation type="RESPONSE">
				<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
				<con:status>200</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="REQUEST">
				<con:mediaType>Application/atom+xml</con:mediaType>
				<con:params/>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/json;charset=UTF-8</con:mediaType>
				<con:status>403</con:status>
				<con:params/>
				<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/MeterReading/1">ns:Fault</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>400</con:status>
				<con:params/>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:request name="Request 1" mediaType="application/json" id="1e1d6af0-7ac2-4a41-956e-43b46f430b08">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1</con:originalUri>
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
			<con:entry>subscriptionId</con:entry>
			<con:entry>usagePointId</con:entry>
			<con:entry>meterReadingId</con:entry>
		</con:parameterOrder>
	</con:request>
</con:method>
</con:resource>
<con:method name="GET MeterReading Feed" method="GET" id="09c3213a-f116-40d6-8b99-87e1ad73c1f5">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>403</con:status>
		<con:params/>
		<con:element xmlns:met="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/MeterReading">met:Fault</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="f5aa923b-979f-4e19-8939-779f508ba6b3">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
<con:method name="POST MeterReadingFeed" method="POST" id="abdf94a7-17e5-47cd-959c-ecec1f1e6de8">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>415</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="Application/atom+xml" postQueryString="false" id="572d774c-6506-4ab8-84c4-f9f2ce4829ad">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	<con:setting id="RecordRequestRepresentations">false</con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
	<ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1" rel="self"/>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading" rel="up"/>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
	<ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
	<ns3:content>
		<espi:MeterReading/>
	</ns3:content>
	<ns3:published>2012-10-24T00:00:00Z</ns3:published>
	<ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
</con:resource>
<con:resource name="ElectricPowerUsageSummary" path="ElectricPowerUsageSummary" id="2600485b-c2a9-4077-a282-fd75ea534482">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{electricPowerUsageSummaryId}" path="{electricPowerUsageSummaryId}" id="421cd098-6c05-44b3-a98e-f3866baed728">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>electricPowerUsageSummaryId</con:name>
				<con:value>${#Project#electricPowerUsageSummaryId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#electricPowerUsageSummaryId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:method name="GET ElectricPowerUsageSummary by Id" method="GET" id="123990b2-aef3-4567-a2a5-8622bf3aa64a">
			<con:settings/>
			<con:parameters/>
			<con:representation type="REQUEST">
				<con:mediaType>Application/atom+xml</con:mediaType>
				<con:params/>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/json;charset=UTF-8</con:mediaType>
				<con:status>403</con:status>
				<con:params/>
				<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/ElectricPowerUsageSummary/1">ns:Fault</con:element>
			</con:representation>
			<con:request name="Request 1" mediaType="application/json" id="ff0f412e-7292-4186-b75d-a392bd583973">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
	</con:request>
</con:method>
</con:resource>
<con:method name="GET ElectricPowerUsageSummary Feed" method="GET" id="746058b5-3484-4a81-9469-7a5f97ffaeb1">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="cb83a25f-f2e1-416a-93a1-53a02d79be1f">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/ElectricPowerUsageSummary</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
</con:resource>
<con:resource name="ElectricPowerQualitySummary" path="ElectricPowerQualitySummary" id="eb7e70a7-3a97-455c-a61c-bc1f61d8f222">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{electricPowerQualitySummaryId}" path="{electricPowerQualitySummaryId}" id="2c6ad5c1-0f65-42c8-9f2e-e408cd1dc187">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>electricPowerQualitySummaryId</con:name>
				<con:value>${#Project#electricPowerQualitySummaryId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#electricPowerQualitySummaryId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:method name="GET ElectricPowerQualitySummary by Id" method="GET" id="637d4d01-17dd-4dcb-8e63-7c466760124b">
			<con:settings/>
			<con:parameters/>
			<con:representation type="REQUEST">
				<con:mediaType>Application/atom+xml</con:mediaType>
				<con:params/>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/json;charset=UTF-8</con:mediaType>
				<con:status>403</con:status>
				<con:params/>
				<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/ElectricPowerQualitySummary/1">ns:Fault</con:element>
			</con:representation>
			<con:request name="Request 1" mediaType="application/json" id="f16fba15-47fd-414c-8488-f8b1ab2c30be">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
	</con:request>
</con:method>
</con:resource>
<con:method name="GET ElectricPowerQualitySummary Feed" method="GET" id="6842b418-6851-4ccc-9184-90bae5edcb49">
	<con:settings/>
	<con:parameters/>
	<con:request name="Request 1" mediaType="application/json" id="1b22da35-acb2-4030-b95d-bc648b2ec666">
		<con:settings/>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
	</con:request>
</con:method>
</con:resource>
<con:method name="GET UsagePoint by Id" method="GET" id="e8e3fcc5-1cc9-41ec-b5e9-e82db7e53066">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>403</con:status>
		<con:params/>
		<con:element xmlns:usag="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/usagePointId">usag:Fault</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="60f67287-8953-45c9-872d-a7fc6eeb63af">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
	<con:entry>subscriptionId</con:entry>
	<con:entry>usagePointId</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="GET UsagePoint Feed" method="GET" id="c2f59b43-ed41-4b25-b16f-1aa588104d9b">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>403</con:status>
		<con:params/>
		<con:element xmlns:usag="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint">usag:Fault</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>404</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="19aaf2a0-c8b0-45c3-b56b-3f17a2439839">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
</con:resource>
<con:method name="Get" method="GET" id="15dbf30c-3387-4f52-8fcd-b3908b791fd9">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>400 404</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>403</con:status>
		<con:params/>
		<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1">ns:Fault</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="871e2981-c765-4a0d-9d3b-8084e7e5825c">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>subscriptionId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Delete" method="DELETE" id="965fe936-fe36-4ff8-8583-94770f043ef5">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="7e6b840c-c2e5-421e-8a57-920847ff73e6">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>subscriptionId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="Get" method="GET" id="a1758db0-a234-4ff7-ae63-0e7ff5741876">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>401</con:status>
		<con:params/>
		<con:element xmlns:sub="http://localhost/DataCustodian/espi/1_1/resource/Subscription">sub:Fault</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="27d6c598-8abd-47b4-afe3-cd96766323c9">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription</con:originalUri><con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="ApplicationInformation" path="ApplicationInformation" id="2683f586-bfe2-47c7-a235-5206072b31fc">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{applicationInformationId}" path="{applicationInformationId}" id="c820a2d4-7187-49cd-b008-8911cb32caed">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>applicationInformationId</con:name>
				<con:value>${#Project#applicationInformationId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#applicationInformationId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:method name="GET ApplicationInformation by Id" method="GET" id="cf176767-b657-4345-b8a6-c41203f67982">
			<con:settings/>
			<con:parameters/>
			<con:representation type="RESPONSE">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
				<con:status>500</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="REQUEST">
				<con:mediaType>Application/atom+xml</con:mediaType>
				<con:params/>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>text/html;charset=utf-8</con:mediaType>
				<con:status>400 404</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/json;charset=UTF-8</con:mediaType>
				<con:status>403 401</con:status>
				<con:params/>
				<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1">ns:Fault</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>400</con:status>
				<con:params/>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
				<con:status>200</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml;charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 500 404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>applicationInformationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:request>
</con:method>
<con:method name="Delete" method="DELETE" id="240c6f45-9544-4822-89b9-491016bd335e">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1">ns:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>Application/atom+xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="9ef70ba4-9a57-4ff5-a02e-b693213d9dc0">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>applicationInformationId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Put" method="PUT" id="f3a28c9f-a3e0-4f39-b82e-137bdcc415a4">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>403 401</con:status><con:params/><con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<?xml-stylesheet type="text/xsl" href="/GreenButtonDataStyleSheet.xslt"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:40f037af-96cd-4ce6-96f2-38bc1851a454</id>
   <title>Green Button Usage Feed</title>
   <updated>2014-02-27T19:19:08Z</updated>
   <link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="self"/>
   <ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
      <ns3:id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</ns3:id>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/1" rel="self"/>
      <ns3:title>GreenButtonData.org  DataCustodian Application</ns3:title>
      <ns3:content>
         <espi:ApplicationInformation>
            <espi:dataCustodianApplicationStatus/>
            <espi:thirdPartyNotifyUri>http://localhost:8080/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
            <espi:dataCustodianBulkRequestURI/>
            <espi:dataCustodianResourceEndpoint>http://localhost:8080/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
            <espi:thirdPartyScopeSelectionScreenURI>http://localhost:8080/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
            <espi:client_secret>secret</espi:client_secret>
            <espi:redirect_uri>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
            <espi:client_id>third_party</espi:client_id>
            <espi:scope>FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:scope>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
            <espi:thirdPartyApplicationName>Third Party (localhost)</espi:thirdPartyApplicationName>
         </espi:ApplicationInformation>
      </ns3:content>
      <ns3:published>2014-01-02T10:00:00Z</ns3:published>
      <ns3:updated>2014-01-02T10:00:00Z</ns3:updated>
   </ns3:entry>
</feed>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>applicationInformationId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="GET ApplicationInformation Feed" method="GET" id="39650856-2761-4c8d-93d1-e3f7a78ed83b">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>403 401</con:status>
		<con:params/>
		<con:element xmlns:app="http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation">app:Fault</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="02f6b5c6-3af1-4614-8b5a-ee45d6da5666">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Post" method="POST" id="103f5695-c0f1-4a9e-898c-9f77be3bc3ab">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="7681492e-ee1c-4175-bd71-ad8c87891263">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
      <ns3:id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</ns3:id>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/1" rel="self"/>
      <ns3:title>GreenButtonData.org  DataCustodian Application</ns3:title>
      <ns3:content>
         <espi:ApplicationInformation>
            <espi:dataCustodianApplicationStatus/>
            <espi:thirdPartyNotifyUri>http://localhost:8080/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
            <espi:dataCustodianBulkRequestURI/>
            <espi:dataCustodianResourceEndpoint>http://localhost:8080/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
            <espi:thirdPartyScopeSelectionScreenURI>http://localhost:8080/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
            <espi:client_secret>secret</espi:client_secret>
            <espi:redirect_uri>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
            <espi:client_id>third_party</espi:client_id>
            <espi:scope>FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:scope>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
            <espi:thirdPartyApplicationName>Third Party (localhost)</espi:thirdPartyApplicationName>
         </espi:ApplicationInformation>
      </ns3:content>
      <ns3:published>2014-01-02T10:00:00Z</ns3:published>
      <ns3:updated>2014-01-02T10:00:00Z</ns3:updated>
   </ns3:entry>]]></con:request>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="Authorization" path="Authorization" id="e18c37bc-c81a-47a1-ba06-8bbfe20f9fca">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{authorizationId}" path="{authorizationId}" id="afd7ea03-b51e-4a68-83f4-b597e59f045a">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>authorizationId</con:name>
				<con:value>${#Project#authorizationId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#authorizationId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:method name="GET Authorization by Id" method="GET" id="89b81ae0-2a13-4aab-8a92-0714d7686bae">
			<con:settings/>
			<con:parameters/>
			<con:representation type="FAULT">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>400</con:status>
				<con:params/>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
				<con:status>500</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="REQUEST">
				<con:mediaType>Application/atom+xml</con:mediaType>
				<con:params/>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/json;charset=UTF-8</con:mediaType>
				<con:status>401 403</con:status>
				<con:params/>
				<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Authorization/1">ns:Fault</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>text/html;charset=utf-8</con:mediaType>
				<con:status>400</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>0</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>authorizationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:request>
</con:method>
<con:method name="Delete" method="DELETE" id="8c62f14e-7d02-4445-9def-71c7ea915971">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Authorization/1">ns:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="91a52e47-6bd1-4f6d-86f6-444e1583b6ce">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>authorizationId</con:entry>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="PUT" method="PUT" id="4b529598-41fb-44bf-9321-a3769cd43a56"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false" id="6bda1dcd-48b2-4098-a9f5-d5d7cb0600a4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:558ebd17-fd1d-435d-8f8d-1d9a129ee1a6</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/1" rel="self"/>
   <ns3:content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:accessToken>688b026c-665f-4994-9139-6b21b13fbeee</espi:accessToken>
         <espi:status>1</espi:status>
         <espi:expires_in>31536000</espi:expires_in>
         <espi:scope>DataCustodian_Admin_Access</espi:scope>
         <espi:token_type>bearer</espi:token_type>
         <espi:resourceURI>http://localhost:8080/DataCustodian/espi/1_1/resource/</espi:resourceURI>
         <espi:authorizationURI>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/1</espi:authorizationURI>
         <espi:thirdParty>data_custodian_admin</espi:thirdParty>
      </espi:Authorization>
   </ns3:content>
   <ns3:published>2014-05-12T13:02:03Z</ns3:published>
   <ns3:updated>2014-05-12T13:02:03Z</ns3:updated>
</ns3:entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource>
<con:method name="GET Authorization Feed" method="GET" id="4044e8f5-4f26-4b1f-87ee-2f9e6737cd3f">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/json;charset=UTF-8</con:mediaType>
		<con:status>403 401</con:status>
		<con:params/>
		<con:element xmlns:aut="http://localhost/DataCustodian/espi/1_1/resource/Authorization">aut:Fault</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>500</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE"><con:mediaType>application/atom+xml;charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Authorization</con:entry>
	<con:entry>Content-Type</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="ReadServiceStatus" path="ReadServiceStatus" id="aef66a1b-7eb4-48e5-8e0c-a53530843ccb">
	<con:settings/>
	<con:parameters/>
	<con:method name="GET ServiceStatus" method="GET" id="ddb8df63-2747-439f-9d50-9faa935fc258">
		<con:settings/>
		<con:parameters/>
		<con:representation type="FAULT">
			<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
			<con:status>404 500</con:status>
			<con:params/>
			<con:element>html</con:element>
		</con:representation>
		<con:representation type="REQUEST">
			<con:mediaType>Application/atom+xml</con:mediaType>
			<con:params/>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType>application/atom+xml</con:mediaType>
			<con:status>200</con:status>
			<con:params/>
			<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="FAULT">
			<con:mediaType>application/json;charset=UTF-8</con:mediaType>
			<con:status>403 401</con:status>
			<con:params/>
			<con:element xmlns:read="http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus">read:Fault</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:espi="http://naesb.org/espi">espi:ServiceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 401</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
	<con:parameterOrder>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="LocalTimeParameters" path="LocalTimeParameters" id="88c8d501-0bbb-4412-a24a-d0bda6788c83">
	<con:settings/>
	<con:parameters>

	</con:parameters>
	<con:resource name="{localTimeParametersId}" path="{localTimeParametersId}" id="9b4bd4cc-1b04-4070-83f4-edd8a87aab84">
		<con:settings/>
		<con:parameters>
			<con:parameter required="false">
				<con:name>localTimeParametersId</con:name>
				<con:value>${#Project#localTimeParametersId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#localTimeParametersId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:method name="GET LocalTimeParameters by Id" method="GET" id="289c1e03-bd80-4fc0-ae06-72fa51b32693">
			<con:settings/>
			<con:parameters/>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType xsi:nil="true"/>
				<con:status>400</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType xsi:nil="true"/>
				<con:status>400</con:status>
				<con:params/>
				<con:element>data</con:element>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType xsi:nil="true"/>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="REQUEST">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:params/>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>400</con:status>
				<con:params/>
			</con:representation>
			<con:representation type="RESPONSE">
				<con:mediaType>application/atom+xml</con:mediaType>
				<con:status>200</con:status>
				<con:params/>
				<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
			</con:representation>
			<con:representation type="FAULT">
				<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
				<con:status>500</con:status>
				<con:params/>
				<con:element>html</con:element>
			</con:representation>
			<con:request name="Request 1" mediaType="application/json" id="992b9d02-a55d-4839-bbe9-fad896b41aeb">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters>
			<entry key="Content-Type" value="application/atom+xml" xmlns="http://eviware.com/soapui/config"/>
		</con:parameters>
		<con:parameterOrder>
			<con:entry>localTimeParametersId</con:entry>
			<con:entry>Content-Type</con:entry>
			<con:entry>Authorization</con:entry>
		</con:parameterOrder>
	</con:request>
</con:method>
<con:method name="Put" method="PUT" id="bc773f1b-a40b-447a-999b-5ad916dadf23">
	<con:settings/>
	<con:parameters/>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>403</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="a6c5e92e-37f7-4baf-935e-4eef88d6d894">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Content-Type</con:entry>
	<con:entry>localTimeParametersId</con:entry>
	<con:entry>Authorization</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Delete" method="DELETE" id="3a185e53-ab89-4aec-88d2-2bb753f10e2e">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType xsi:nil="true"/>
		<con:status>400</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="ce3467de-f1e5-412f-a074-91081ffcfa7f">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Content-Type</con:entry>
	<con:entry>localTimeParametersId</con:entry>
	<con:entry>Authorization</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:method name="GET LocalTimeParameters Feed" method="GET" id="12c4715b-00dd-4a98-a2fe-6b5d586c4f3c">
	<con:settings/>
	<con:parameters/>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="03bcb211-9b20-4f13-a3d5-ba0897166d66">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/LocalTimeParameters</con:originalUri>
<con:credentials>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Content-Type</con:entry>
	<con:entry>Authorization</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
<con:method name="Post" method="POST" id="b4edfcb5-5f83-406f-86a9-f5c101e5f0fc">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>application/json</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
		<con:status>404</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>text/html;charset=utf-8</con:mediaType>
		<con:status>415 400</con:status>
		<con:params/>
		<con:element>html</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="REQUEST">
		<con:mediaType>application/xml</con:mediaType>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>0</con:status>
		<con:params/>
		<con:element>data</con:element>
	</con:representation>
	<con:representation type="FAULT">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>400</con:status>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType xsi:nil="true"/>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="a135f049-b3ed-4eb4-9285-005f63e361d7">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
<con:credentials>
	<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
<con:parameterOrder>
	<con:entry>Content-Type</con:entry>
	<con:entry>Authorization</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="RetailCustomer" path="RetailCustomer" id="810d66a8-531f-4820-9dcf-4503d52d4f7a">
	<con:settings/>
	<con:parameters/>
	<con:resource name="{retailCustomerId}" path="{retailCustomerId}" id="1646b2d9-75b0-4fbf-b4c4-5daa3793bdfe">
		<con:settings/>
		<con:parameters>
			<con:parameter>
				<con:name>retailCustomerId</con:name>
				<con:value>${#Project#retailCustomerId}</con:value>
				<con:style>TEMPLATE</con:style>
				<con:default>${#Project#retailCustomerId}</con:default>
			</con:parameter>
		</con:parameters>
		<con:resource name="UsagePoint" path="UsagePoint" id="d97dbd23-3084-458d-815a-e9294819ffd6">
			<con:settings/>
			<con:parameters/>
			<con:method name="Method 1" method="GET" id="9ba53938-704d-49f5-9d29-3ab74965e363">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>text/html;charset=utf-8</con:mediaType>
					<con:status>404</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="REQUEST">
					<con:mediaType>Application/atom+xml</con:mediaType>
					<con:params/>
				</con:representation>
				<con:request name="Request 1" mediaType="application/json" id="e5b25e9f-f1d5-47f2-98f3-2b3b2963d21a">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint</con:originalUri>
			<con:credentials>
				<con:authType>No Authorization</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters/>
		</con:request>
	</con:method>
	<con:method name="POST UsagePoint" method="POST" id="0c334c71-62b8-4b59-a3eb-78a7adfeab82">
		<con:settings/>
		<con:parameters/>
		<con:representation type="REQUEST">
			<con:mediaType>application/json</con:mediaType>
			<con:params/>
		</con:representation>
		<con:representation type="FAULT">
			<con:mediaType>text/html;charset=utf-8</con:mediaType>
			<con:status>404</con:status>
			<con:params/>
			<con:element>html</con:element>
		</con:representation>
		<con:request name="Request 1" mediaType="application/json" postQueryString="false" id="d484229e-10ed-47e1-b4d3-3e52ade32e93">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<ns3:entry><ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1" rel="self"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint" rel="up"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1/MeterReading" rel="related"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/><ns3:title>Front Electric Meter</ns3:title><ns3:content><espi:UsagePoint><espi:ServiceCategory><espi:kind>0</espi:kind></espi:ServiceCategory></espi:UsagePoint></ns3:content><ns3:published>2012-10-24T00:00:00Z</ns3:published><ns3:updated>2012-10-24T00:00:00Z</ns3:updated></ns3:entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint</con:originalUri>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
</con:request>
</con:method>
</con:resource>
<con:method name="Method 1" method="GET" id="abeef4db-b74f-4e9c-a5cd-419fd763f4a1">
	<con:settings/>
	<con:parameters/>
	<con:representation type="REQUEST">
		<con:mediaType>Application/atom+xml</con:mediaType>
		<con:params/>
	</con:representation>
	<con:representation type="RESPONSE">
		<con:mediaType>application/atom+xml</con:mediaType>
		<con:status>200</con:status>
		<con:params/>
		<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
	</con:representation>
	<con:request name="Request 1" mediaType="application/json" id="f6b324a6-8e3c-4d52-bf25-9ecad264eeed">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/RetailCustomer/1</con:originalUri>
<con:credentials>
	<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
</con:resource>
<con:method name="Method 1" method="GET" id="6481e274-ca61-4af8-af18-c86deb3c3c2e">
	<con:settings/>
	<con:parameters/>
	<con:request name="Request 1" mediaType="application/json" id="2e776260-3860-4db3-bf75-b848275e0c30">
		<con:settings/>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:credentials>
			<con:authType>No Authorization</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
	</con:request>
</con:method>
</con:resource>
<con:resource name="ElectricPowerUsageSummary" path="ElectricPowerUsageSummary" id="530ea0c2-1fc7-44d3-a8ab-697856a17f5b">
	<con:settings/>
	<con:parameters/>
	<con:method name="GET root ElectricPowerUsageSummary feed" method="GET" id="8409becd-9089-4a76-8102-f2316ad4d7d7">
		<con:settings/>
		<con:parameters/>
		<con:representation type="REQUEST">
			<con:mediaType>Application/atom+xml</con:mediaType>
			<con:params/>
		</con:representation>
		<con:representation type="FAULT">
			<con:mediaType>application/atom+xml</con:mediaType>
			<con:status>400</con:status>
			<con:params/>
		</con:representation>
		<con:request name="GET root ElectricPowerUsageSummary feed" mediaType="application/json" id="af6162ba-715e-45f3-b293-ede3d35941c3">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ElectricPowerUsageSummary</con:originalUri>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
</con:request>
</con:method>
</con:resource>
</con:resource>
<con:endpoints>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:endpoint>192.168.1.3:8080</con:endpoint>
	<con:endpoint>http://localhost:8080</con:endpoint>
<con:endpoint>http://ubuntu:8080/</con:endpoint></con:endpoints>
<con:resource name="token" path="" id="173e6cc8-6837-482b-b5af-a21dabf615ea">
	<con:settings/>
	<con:parameters>
		
		<con:parameter required="true">
			<con:name>grant_type</con:name>
			<con:value>refresh_token</con:value>
			<con:style>QUERY</con:style>
			<con:default/>
			<con:description xsi:nil="true"/>
		</con:parameter>
		<con:parameter required="true">
			<con:name>scope</con:name>
			<con:value>FB</con:value>
			<con:style>QUERY</con:style>
			<con:default>FB</con:default>
			<con:description xsi:nil="true"/>
		</con:parameter>
		
	</con:parameters>
	<con:method name="Client Credentials" method="POST" id="e3df8f56-fde3-4955-b286-fde4034ec188">
		<con:settings/>
		<con:parameters/>
		<con:representation type="FAULT">
			<con:mediaType>application/json;charset=UTF-8</con:mediaType>
			<con:status>400 401 403</con:status>
			<con:params/>
			<con:element xmlns:tok="http://localhost/DataCustodian/oauth/token">tok:Fault</con:element>
		</con:representation>
		<con:representation type="REQUEST">
			<con:mediaType>application/json</con:mediaType>
			<con:params/>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType>application/json;charset=UTF-8</con:mediaType>
			<con:status>200</con:status>
			<con:params/>
			<con:element xmlns:tok="http://localhost/DataCustodian/oauth/token">tok:Response</con:element>
		</con:representation>
		<con:representation type="FAULT">
			<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
			<con:status>500</con:status>
			<con:params/>
			<con:element>html</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>500 404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="POST ThirdParty Request" mediaType="application/json" postQueryString="false" id="9ba40594-5ba1-490b-b4b8-0547108733e3">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#AuthorizationEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
	<con:credentials>
		<con:username>${#Project#client_access_token_client_id}</con:username>
		<con:password>${#Project#client_access_token_secret}</con:password>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
  <con:entry key="scope" value="FB=34_35"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
	<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:request>
<con:request name="POST Upload Request" mediaType="application/json" postQueryString="false" id="e2fc290d-3c07-461e-84a1-d9a6265f0ae0">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#authorizationServerTokenEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
<con:credentials>
	<con:username>upload</con:username>
	<con:password>secret</con:password>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters>
  <con:entry key="scope" value="FB=45"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:request>
<con:request name="POST ThirdPartyRegistration Request" mediaType="application/json" postQueryString="false" id="c2d8f4db-dd26-4546-a99e-770d3221f363">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#authorizationServerTokenEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
<con:credentials>
	<con:username>${#Project#registration_access_token_client_id}</con:username>
	<con:password>${#Project#registration_access_token_secret}</con:password>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters>
  <con:entry key="scope" value="FB=36_40"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:request>

<con:request name="POST DataCustodian Client Credentials Request" mediaType="application/json" postQueryString="false" id="448b4c28-e1dc-4451-b625-001cbe1530e6">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#authorizationServerTokenEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
<con:credentials>
	<con:username>data_custodian</con:username>
	<con:password>secret</con:password>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters>
  <con:entry key="scope" value="FB=3_19_32_33_34_35_36_37_38_41_44_45"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:request>
</con:method>
<con:method name="Refresh Token" method="POST" id="45646350-ae2a-4030-862c-2234cc78521b"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:tok="http://localhost/DataCustodian/oauth/token">tok:Fault</con:element></con:representation><con:request name="POST RefreshToken Request" mediaType="application/json" postQueryString="false" id="e94a5330-fafe-41eb-bcc4-bc7a1306f770"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri><con:credentials><con:username>third_party_admin</con:username><con:password>secret</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="scope" value="${#Project#Scope}"/>
  <con:entry key="grant_type" value="refresh_token"/>
</con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder></con:request></con:method></con:resource>
<con:resource name="manage" path="/management" id="e118d447-5b7f-4c3c-b7af-f8b4237bcba6">
	<con:settings/>
	<con:parameters>
		<con:parameter>
			<con:name>Authorization</con:name>
			<con:value>Bearer ${#Project#data_custodian_access_token}</con:value>
			<con:style>HEADER</con:style>
			<con:default>Bearer ${#Project#data_custodian_access_token}</con:default>
		</con:parameter>
		<con:parameter>
			<con:name>command</con:name>
			<con:value/>
			<con:style>QUERY</con:style>
			<con:default/>
		</con:parameter>
	</con:parameters>
	<con:method name="Database Resets" method="GET" id="a524f878-8932-40c2-af8e-78211d88b443">
		<con:settings/>
		<con:parameters/>
		<con:representation type="FAULT">
			<con:mediaType>text/html;charset=utf-8</con:mediaType>
			<con:status>405</con:status>
			<con:params/>
			<con:element>html</con:element>
		</con:representation>
		<con:representation type="REQUEST">
			<con:mediaType>application/xml</con:mediaType>
			<con:params/>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
			<con:status>200</con:status>
			<con:params/>
			<con:element>html</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>0</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE">
			<con:mediaType xsi:nil="true"/>
			<con:status>200</con:status>
			<con:params/>
			<con:element>data</con:element>
		</con:representation>
		<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="resetDataCustodianDB" mediaType="application/xml" postQueryString="false" id="6511b5ba-23eb-4bfe-9f6a-58577bfdfd37">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/manage</con:originalUri>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="command" value="resetDataCustodianDB" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry/>
		<con:entry>Authorization</con:entry>
	</con:parameterOrder>
</con:request>
<con:request name="initializeDataCustodianDB" mediaType="application/xml" postQueryString="false" id="a8d9f598-e5ea-4e02-86ea-92a34d4c8332">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/manage</con:originalUri>
<con:credentials>
	<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters>
	<entry key="command" value="initializeDataCustodianDB" xmlns="http://eviware.com/soapui/config"/>
</con:parameters>
<con:parameterOrder>
	<con:entry/>
	<con:entry>Authorization</con:entry>
</con:parameterOrder>
</con:request>
</con:method>
</con:resource>
<con:resource name="Notification" path="/${#Project#notificationUri}" id="dfa96174-babd-4335-8a1e-e4385957e571"><con:settings/><con:parameters/><con:method name="Method 1" method="GET" id="616d1f56-583e-4f1f-abce-65c1665ff146"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" id="d4a226cc-3f5e-48a4-9144-d504d9aaca29"><con:settings/><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST" method="POST" id="25fe65e9-ec90-4ac2-b2f2-1af16ac738f2"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9fd739be-76cf-45b5-ab37-f1156140e1ef"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8081/ThirdParty</con:endpoint><con:request>&lt;BatchList>
&lt;resources>http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation&lt;/resources>
&lt;/BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="" path="" id="c70ca9c6-1293-4d93-afbb-56e6a1aa4eff"><con:settings/><con:parameters/><con:method name="Method 1" id="a11c5cc1-e8f3-4fe6-82db-0327e825ed9d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="63372e8a-d839-4dcc-880b-d9e878fa3f34" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8085/</con:endpoint><con:request/><con:originalUri>http://localhost/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:inferredSchema>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;xml-fragment/></con:inferredSchema></con:interface>
<con:testSuite name="Library" id="0275335f-7515-4da0-a729-cce9f7858991">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GeneralScripts" searchProperties="true" id="c4c4fa40-6628-4c8a-bbbb-2b34185b90b2">
		<con:settings/>
		<con:testStep type="groovy" name="LoadConfig" id="bd695d4c-f5b4-416c-84b1-346616c98830">
			<con:settings/>
			<con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL())

log.info("[Library] LoadConfig Script -- Starting");

// urls
project.setPropertyValue("BaseURL",config.BaseURL);
project.setPropertyValue("ServiceEndpoint",config.ServiceEndpoint);
project.setPropertyValue("resourceURI",config.resourceURI);
project.setPropertyValue("DataCustodianContext",config.DataCustodianContext);
project.setPropertyValue("ThirdPartyContext",config.ThirdPartyContext);
project.setPropertyValue("linkPrefixForReplace",config.linkPrefixForReplace);

// test accounts
project.setPropertyValue("TestManager",config.TestManager);
project.setPropertyValue("TestManagerPW",config.TestManagerPW);
project.setPropertyValue("TestRetailCustomer",config.TestRetailCustomer);
project.setPropertyValue("TestRetailCustomerPW",config.TestRetailCustomerPW);

// resourceIds
project.setPropertyValue("retailCustomerId",config.retailCustomerId);
project.setPropertyValue("usagePointId",config.usagePointId);
project.setPropertyValue("resourceId",config.resourceId);
project.setPropertyValue("meterReadingId",config.meterReadingId);
project.setPropertyValue("readingTypeId",config.readingTypeId);
project.setPropertyValue("intervalBlockId",config.intervalBlockId);
project.setPropertyValue("electricPowerQualitySummaryId",config.electricPowerQualitySummaryId);
project.setPropertyValue("electricPowerUsageSummaryId",config.electricPowerUsageSummaryId);
project.setPropertyValue("subscriptionId",config.subscriptionId);
project.setPropertyValue("applicationInformationId",config.applicationInformationId);
project.setPropertyValue("authorizationId",config.authorizationId);
project.setPropertyValue("bulkId",config.bulkId);
project.setPropertyValue("localTimeParametersId",config.localTimeParametersId);
//project.setPropertyValue("HomePageURLEndpoint",config.HomePageURLEndpoint);

// test files
project.setPropertyValue("TestFile",config.TestFile);
project.setPropertyValue("usagePointUUID1",config.usagePointUUID1);
project.setPropertyValue("usagePointDescription1",config.usagePointDescription1);
project.setPropertyValue("TestFile2",config.TestFile2);
project.setPropertyValue("usagePointUUID2",config.usagePointUUID2);
project.setPropertyValue("usagePointDescription2",config.usagePointDescription2);

// access tokens
project.setPropertyValue("data_custodian_access_token",config.data_custodian_access_token);
project.setPropertyValue("third_party_access_token",config.third_party_access_token);
project.setPropertyValue("upload_access_token",config.upload_access_token);
project.setPropertyValue("registration_third_party_access_token",config.registration_third_party_access_token);

project.setPropertyValue("registration_access_token_client_id",config.registration_access_token_client_id);
project.setPropertyValue("registration_access_token_secret",config.registration_access_token_secret);
project.setPropertyValue("client_access_token_client_id", config.client_access_token_client_id);
project.setPropertyValue("client_access_token_secret",config.client_access_token_secret);

project.setPropertyValue("client_id", config.client_id);
project.setPropertyValue("client_secret",config.client_secret);


// external program system commands
project.setPropertyValue("mysqlCmdDC",config.mysqlCmdDC);
project.setPropertyValue("mysqlCmdTP",config.mysqlCmdTP);
project.setPropertyValue("opensslCmd",config.opensslCmd);
project.setPropertyValue("timeoutCmd",config.timeoutCmd);

// oauth authorize endpoint testing
//project.setPropertyValue("client_id",config.client_id);
//project.setPropertyValue("redirect_uri",config.redirect_uri);
//project.setPropertyValue("scope",config.scope);
//project.setPropertyValue("state",config.state);

log.info("[Library] LoadConfig Script -- Finished");</script></con:config>
		</con:testStep>
		<con:testStep type="groovy" name="curlUpload" id="f40394d5-2eb7-42e2-b2a9-87b07a812c44">
			<con:settings/>
			<con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def DataCustodianAccessToken = project.getPropertyValue("data_custodian_access_token")
tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"]
def UploadFile=projectPath + "/../data/" + tc.getPropertyValue("uploadFile")
def retailCustomerId = tc.getPropertyValue("retailCustomerId")

def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def tf= new File(UploadFile);
tf = tf.getAbsolutePath();

def td = projectPath + "/../data/" ;
def url= ServiceEndpointDataCustodian+"/espi/1_1/resource/Batch/RetailCustomer/"+retailCustomerId+"/UsagePoint";


public boolean RunCommand(String path,String cmd)
{
def doCmd;

log.info("path: " + path);
log.info("exec: " + cmd);
log.info("os  : " + System.properties['os.name']);

if (System.properties['os.name'].toLowerCase().contains('windows')) {
doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
} else {
doCmd = ["bash", "-c",cmd].execute(null, new File(path));
}

doCmd.waitFor()

if(doCmd.exitValue()!=0)
{
log.error "return code: ${ doCmd.exitValue()}"
log.error "stderr: ${doCmd.err.text}"
log.error "stdout: ${doCmd.in.text}"

return false;
}

return true;
}

// define the command
cmdPost = 'curl --header "Authorization: Bearer ' + DataCustodianAccessToken+ '" --header "Content-Type:application/xml" -X POST -d "@' + tf + '" "' + url+ '"';
log.info("exec: " + cmdPost);

// do the curl
if(RunCommand(td,cmdPost) == true) {
assert true;
}
else
{
testRunner.fail("could not curl up file");
}</script></con:config>
		</con:testStep>
		<con:testStep type="groovy" name="resetDB" id="64e17259-bac9-493e-8827-b5e5dc5993e8">
			<con:settings/>
			<con:config>
				<script>	// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBTP']);



					assert true;</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="resetDBDC" id="e8223182-2c20-4d85-b6cf-bb29f5ed3a30">
			<con:settings/>
			<con:config>
				<script>
					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath

					def mysqlCmdDC=project.getPropertyValue("mysqlCmdDC")

					public boolean RunCommand(String path,String cmd)
					{
					def doCmd;

					if (System.properties['os.name'].toLowerCase().contains('windows')) {
					doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
					} else {
					doCmd = ["bash", "-c",cmd].execute(null, new File(path));
					}

					doCmd.waitFor()

					if(doCmd.exitValue()!=0)
					{
					log.error "return code: ${ doCmd.exitValue()}"
					log.error "stderr: ${doCmd.err.text}"
					log.error "stdout: ${doCmd.in.text}"
					}
					else
					{
					log.info "return code: ${ doCmd.exitValue()}"+"  cmd:  "+ cmd;
					}
					}

					log.info "Reset Data Custodian DB "
					log.info mysqlCmdDC ;
					def etcpath = projectPath + "/etc";


					RunCommand(etcpath,mysqlCmdDC + "  &lt; cleantables_dc.sql");
					RunCommand(etcpath,mysqlCmdDC + "  &lt; prepopulatesql_dc.sql");


					assert true;</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="resetDBTP" id="87ab1b49-e716-4e23-acf5-f48af526c18a">
			<con:settings/>
			<con:config>
				<script>
					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath

					def mysqlCmdTP=project.getPropertyValue("mysqlCmdTP")

					public boolean RunCommand(String path,String cmd)
					{
					def doCmd;

					if (System.properties['os.name'].toLowerCase().contains('windows')) {
					doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
					} else {
					doCmd = ["bash", "-c",cmd].execute(null, new File(path));
					}

					doCmd.waitFor()

					if(doCmd.exitValue()!=0)
					{
					log.error "return code: ${ doCmd.exitValue()}"
					log.error "stderr: ${doCmd.err.text}"
					log.error "stdout: ${doCmd.in.text}"
					}
					else
					{
					log.info "return code: ${ doCmd.exitValue()}"+"  cmd:  "+ cmd;
					}
					}

					log.info "Reset Third Party DB "
					log.info mysqlCmdTP ;
					def etcpath = projectPath + "/etc";


					RunCommand(etcpath,mysqlCmdTP + "  &lt; cleantables_tp.sql");
					RunCommand(etcpath,mysqlCmdTP + "  &lt; prepopulatesql_tp.sql");


					assert true;</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="LoadConfigCert" id="c3e267f6-62ec-47f2-9cfa-de89458e05bf">
			<con:settings/>
			<con:config><script>log.info("********** START Execution ********** -- [Library] LoadConfigCert Script");

import java.net.*;
import java.io.*;


// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("[Library] LoadConfigCert Script -- unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "[Library] LoadConfigCert -- Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "[Library] LoadConfigCert -- Converted = " + urlproxy;
	}

	return urlproxy;
}

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def target = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert_target.conf").toURL())
def uri;

log.info("[Library] LoadConfigCert Script -- Starting");

//propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid token - registration_access_token");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");


// external program system commands
project.setPropertyValue("opensslCmd",config.opensslCmd);
project.setPropertyValue("timeoutCmd",config.timeoutCmd);
project.setPropertyValue("stunnelConfigDirectory",config.stunnelConfigDirectory);
project.setPropertyValue("stunnelStatusCmd",config.stunnelStatusCmd);
project.setPropertyValue("stunnelStartCmd",config.stunnelStartCmd);
project.setPropertyValue("stunnelStopCmd",config.stunnelStopCmd);
//project.setPropertyValue("stunnelReceiveAddress",config.stunnelReceiveAddress);
project.setPropertyValue("CApathDirectory",config.CApathDirectory);

	
// urls
project.setPropertyValue("BaseURL","");
project.setPropertyValue("ServiceEndpoint","");
project.setPropertyValue("DataCustodianContext","");
project.setPropertyValue("ThirdPartyContext","");
project.setPropertyValue("thirdPartyNotificationEndpoint","");

// SoapUI Platform SSL Certificate and Private Key
project.setPropertyValue("soapUIPlatformSSLCertificate",config.soapUIPlatformSSLCertificate);
project.setPropertyValue("soapUIPlatformSSLPrivateKey",config.soapUIPlatformSSLPrivateKey);

// [FB_01] Common
project.setPropertyValue("NAESBPurchasedStandardsURI",config.NAESBPurchasedStandardsURI);

project.setPropertyValue("productionAuthorizationServerDomain",target.productionAuthorizationServerDomain);
project.setPropertyValue("productionResourceServerDomain",target.productionResourceServerDomain);
project.setPropertyValue("productionSFTPServerDomain", target.productionSFTPServerDomain);

project.setPropertyValue("GBACertId",target.GBACertId);
project.setPropertyValue("applicantName",target.applicantName);
project.setPropertyValue("dataCustodianResourceEndpoint",target.dataCustodianResourceEndpoint);
project.setPropertyValue("authorizationServerTokenEndpoint",target.authorizationServerTokenEndpoint);

project.setPropertyValue("applicationInformationId",target.applicationInformationId);

// Test for blank authorizationId
if(target.authorizationId == "") {

	project.setPropertyValue("authorizationId","");
	project.setPropertyValue("authorizationURI","");
	
} else {

	project.setPropertyValue("authorizationId",target.authorizationId);
	project.setPropertyValue("authorizationURI",target.dataCustodianResourceEndpoint + "/Authorization/" + target.authorizationId)
}

project.setPropertyValue("registration_access_token",target.registration_access_token);
project.setPropertyValue("scope",target.client_access_token_scope);
project.setPropertyValue("certScopes",target.certDataScopeFBs);

project.setPropertyValue("registration_access_token_client_id",target.registration_access_token_client_id);
project.setPropertyValue("registration_access_token_secret",target.registration_access_token_secret);

//NOTE if client_access_token_client_id and secret are not present then populate them with client_id and client_secret
project.setPropertyValue("client_access_token_client_id", target.client_access_token_client_id);
project.setPropertyValue("client_access_token_secret",target.client_access_token_secret);

log.info "[Library] LoadConfigCert -- Script client_id= " + target.client_id;

URI uriAuthorizationServerTokenEndpoint = new URI(project.getPropertyValue("authorizationServerTokenEndpoint"));
hostAuthorizationServerTokenEndpoint = uriAuthorizationServerTokenEndpoint?.getHost();
URI uriDataCustodianResourceEndpoint = new URI(project.getPropertyValue("dataCustodianResourceEndpoint"));
hostDataCustodianResourceEndpoint = uriDataCustodianResourceEndpoint?.getHost();

if(target.client_access_token != "") {
	project.setPropertyValue("client_access_token",target.client_access_token);
}
else{
	project.setPropertyValue("client_access_token","");
}

if(target.client_id != "") {
	project.setPropertyValue("client_id",target.client_id);
}
else{
	project.setPropertyValue("client_id","");
}
if(target.target.client_secret != "") {
	project.setPropertyValue("client_secret",target.client_secret);
}
else{
	project.setPropertyValue("client_secret","");
}


service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
service.setPropertyValue("mockPort",config.genericGetServiceMockPort);
service.setPropertyValue("stunnelProxyPort",config.proxyOutPort);
service.setPropertyValue("notificationRxTimeoutSecs",config.notificationRxTimeoutSecs);

genericGetServiceMockPort = service.getPropertyValue("mockPort");

// parse out ServiceEndpoint and resourceURI -- must have "espi/1_1/resource"
uri = project.getPropertyValue("dataCustodianResourceEndpoint");
log.info "[Library] LoadConfigCert -- DC Resource Endpoint URI: " + uri;
uritemp = uri;
i = uritemp.indexOf("espi/1_1/resource");
if(i>0) {
	// lets shorten it by stripping off up to resource
	uritemp = uritemp.substring(0,i-1);
	log.info "[Library] LoadConfigCert -- DC ServiceEndpoint " + uritemp;

	//uritemp = GetProxiedUrl(uritemp, proxyOutPort);
	//uritemp = GetProxiedUrl(uritemp, genericGetServiceMockPort);
	
	project.setPropertyValue("ServiceEndpoint","http://" + hostDataCustodianResourceEndpoint + ":" + genericGetServiceMockPort);
	
	//uritemp = uri;
	//uritemp = uritemp.substring(uritemp.indexOf("espi/1_1/resource"), uritemp.length());
	//log.info "[Library] LoadConfigCert -- DC resourceUri: " + uritemp;
	log.info "[Library] LoadConfigCert -- DC resourceUri: " + uriDataCustodianResourceEndpoint?.getPath();
	project.setPropertyValue("resourceUri",uriDataCustodianResourceEndpoint?.getPath().substring(1));
	
}  else {
	// cant be a resource
	log.info ("[Library] LoadConfigCert -- DC Resource Endpoint Uri not well formed: " + uri);
	testRunner.fail("[Library] LoadConfigCert Script -- DC Resource Endpoint Uri not well formed: "+ uri);	
}


// parse out AuthorizationEndpoint
//uri = project.getPropertyValue("authorizationServerTokenEndpoint");
//log.info "[Library] LoadConfigCert -- DC authorizationServerTokenEndpoint URI: " + uri;
//uritemp = uri;
//uritemp = GetProxiedUrl(uritemp, proxyOutPort1);
//URL aURL = new URL(project.getPropertyValue("authorizationServerTokenEndpoint"));
//def host = aURL?.getHost();

//def authorizationServer = project.getPropertyValue( "authorizationServer" );
//def resourceServer = project.getPropertyValue( "resourceServer" );



def proxyOutPort;
def proxyOutPort1;

if(hostAuthorizationServerTokenEndpoint==hostDataCustodianResourceEndpoint){
	proxyOutPort = config.proxyOutPort;
	proxyOutPort1 = config.proxyOutPort;
} else {
	proxyOutPort = config.proxyOutPort;
	proxyOutPort1 = config.proxyOutPort1;
}

project.setPropertyValue("AuthorizationEndpoint","http://" + hostAuthorizationServerTokenEndpoint + ":" + proxyOutPort1 + uriAuthorizationServerTokenEndpoint.getPath());

// proxy ports
project.setPropertyValue("mockPort",config.mockPort);
project.setPropertyValue("proxyOutPort",proxyOutPort);
project.setPropertyValue("proxyOutPort1",proxyOutPort1);

// set proxy ports in mock servers
def service;
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
service.setPropertyValue("mockPort",config.mockPort);
service.setPropertyValue("proxyOutPort",proxyOutPort);
service.setPropertyValue("proxyOutPort1",proxyOutPort1);

service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service");
service.setPropertyValue("mockPort",config.mockPort);
service.setPropertyValue("proxyOutPort",proxyOutPort);
service.setPropertyValue("proxyOutPort1",proxyOutPort1);

service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG A tests Authorization Mock Service");
service.setPropertyValue("mockPort",config.mockPort);
service.setPropertyValue("proxyOutPort",proxyOutPort);
service.setPropertyValue("proxyOutPort1",proxyOutPort1);

service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG B tests Authorization Mock Service");
service.setPropertyValue("mockPort",config.mockPort);
service.setPropertyValue("proxyOutPort",proxyOutPort);
service.setPropertyValue("proxyOutPort1",proxyOutPort1);

// TODO: Standardize port initialization for "GenericGetService" and "BatchListNotification" Mock services
//service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");

//service = testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification");



// capture servers

if (uriDataCustodianResourceEndpoint.getPort() == -1) {
	resourceServer= uriDataCustodianResourceEndpoint.getHost() + ":443";
	project.setPropertyValue("resourceServerPort","443");
}
else
{
	resourceServer= uriDataCustodianResourceEndpoint.getHost() + ":" + uriDataCustodianResourceEndpoint.getPort();
	project.setPropertyValue("resourceServerPort",uriDataCustodianResourceEndpoint.getPort().toString());
}
project.setPropertyValue("resourceServer", resourceServer);

if (uriAuthorizationServerTokenEndpoint.getPort() == -1) {
	authorizationServer = uriAuthorizationServerTokenEndpoint.getHost() + ":443";
	project.setPropertyValue("authorizationServerPort","443");
}
else
{
	authorizationServer = uriAuthorizationServerTokenEndpoint.getHost() + ":" + uriAuthorizationServerTokenEndpoint.getPort();
	project.setPropertyValue("authorizationServerPort",uriAuthorizationServerTokenEndpoint.getPort().toString());
}
project.setPropertyValue("authorizationServer", authorizationServer);



// oauth authorize endpoint testing
project.setPropertyValue("redirect_uri","");
project.setPropertyValue("state","");

log.info("**********  END   Execution ********** -- [Library] LoadConfigCert Script");
</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="SaveScriptLog" id="6d596211-d837-4092-bacb-15bac8c4d1b2"><con:settings/><con:config><script><![CDATA[import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.stream.StreamResult;

public class testInfo{
	String name;
	Boolean bPass = false;
	Boolean bFail = false;
	Boolean bEnd = false;
	def childTests = [:];
}

// Get addressability to global properties
def project = testRunner.testCase.testSuite.project;

//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 

String firstLine;
String lastLine;

// Get current date and Applicant Name for log file names
def date = new Date();
def applicantName = project.getPropertyValue("applicantName");

def logFile = new File(projectPath + "/" + applicantName + "_SoapUI-Results-ScriptLog (" + date + ").txt")
PrintWriter pw = new PrintWriter(logFile);
pw.close();

//This is the first line in the soapUI log file.
logFile.write("soapUI Logs In a file.\r\n")

def tests = [:];

if( logArea !=null )
{
	
 def model = logArea.model;

 def currSuiteInfo = new testInfo(); 
 def currTestInfo = new testInfo();

 
 if( model.size > 0 ) {

	firstLine = model.getElementAt(0);
	lastLine = model.getElementAt(model.size-1);
 	
    for( c in 0..(model.size-1) ){         
    		String strResultCheck = "";
    		String line = model.getElementAt( c );
          logFile.append(line);
		logFile.append("\n");


		strResultCheck = "===== Start TestSuite =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());
			currSuiteInfo.name = name;			
		}

		strResultCheck = "===== Start TestCase  =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());
			currTestInfo.name = name;
		}

		strResultCheck = "===== FINISHED TestCase  =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());	
			if(currTestInfo.name == name) {
				currTestInfo.bEnd = true;
				currTestInfo.bPass = true;
				currSuiteInfo.childTests.put(name,currTestInfo);
				currTestInfo = new testInfo();
				
			} else {
				//ERROR
			}					
		}

		strResultCheck = "===== FAILED TestCase  =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());	
			if(currTestInfo.name == name) {
				currTestInfo.bEnd = true;
				currTestInfo.bFail = true;
				currSuiteInfo.childTests.put(name,currTestInfo);
				currTestInfo = new testInfo();
				
			} else {
				//ERROR
			}					
		}

/*		strResultCheck = "===== SUMMARY   TestSuite =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());
			if(currSuiteInfo.name == name) {
				currSuiteInfo.bPass = true;
			} else {
				//ERROR
			}
		}*/

		strResultCheck = "===== FAILED End   TestSuite =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());
			if(currSuiteInfo.name == name) {
				currSuiteInfo.bFail = true;
				currSuiteInfo.bEnd = true;
				tests.put(name,currSuiteInfo);
				currSuiteInfo = new testInfo(); 
			} else {
				//ERROR
			}
		}

		strResultCheck = "===== FINISHED End   TestSuite =====> ";
		if(line.contains(strResultCheck)) {
			String name = line.substring(line.indexOf(strResultCheck) + strResultCheck.length());
			if(currSuiteInfo.name == name) {
				currSuiteInfo.bPass = true;
				currSuiteInfo.bEnd = true;
				tests.put(name,currSuiteInfo);
				currSuiteInfo = new testInfo(); 
			} else {
				//ERROR
			}
		}

    }
 }
}

if(firstLine == null) {
	log.info("[Library] SaveScriptLog Script -- No Script to Save");
} else {

	String startDate = firstLine[0..27];
	String endDate = lastLine[0..27];	

	def target = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert_target.conf").toURL())
	Map flattened = target.flatten();

	def logSummaryFile = new File(projectPath + "/" + applicantName + "_SoapUI-Results-Summary (" + date + ").xml")
	pw = new PrintWriter(logSummaryFile);
	pw.close();

	logSummaryFile.append("");

	logSummaryFile.append('<?xml version="1.0" encoding="UTF-8"?>\n');
	logSummaryFile.append('<?xml-stylesheet type="text/xsl" href="GBCmdResultsSummary.xslt"?>\n');
	logSummaryFile.append("<testSummary>\n");
	logSummaryFile.append('	<testDate startTime="' + startDate + '" endTime="' + endDate + '"/>\n');
	logSummaryFile.append("	<testConfiguration>\n");
	logSummaryFile.append("		<testConfigurationFile>" + groovyUtils.projectPath + "/etc/gbcmdcert_target.conf" + "</testConfigurationFile>\n");
	logSummaryFile.append("		<parameters>\n");

	flattened.each {targetEntry ->
		log.info("[$targetEntry.key]=$targetEntry.value");
		logSummaryFile.append('			<parameter name="' + targetEntry.key + '">' + targetEntry.value + '</parameter>\n');
	}

	logSummaryFile.append("		</parameters>\n");
	logSummaryFile.append("	</testConfiguration>\n");
	logSummaryFile.append("	<testResults>\n");

	tests.each { entrySuite ->
		if(entrySuite.value.bPass) {
			log.info("TestSuite PASS:$entrySuite.key");
			logSummaryFile.append('		<testSuite name="' + entrySuite.key + '" result="PASS">\n');
		}
		if(entrySuite.value.bFail) {
			log.info("TestSuite FAIL:$entrySuite.key");
			logSummaryFile.append('		<testSuite name="' + entrySuite.key + '" result="FAIL">\n');
		}

		entrySuite.value.childTests.each { entryCase -> 
			if(entryCase.value.bPass) {
				log.info("TestCase PASS: $entryCase.key");
				logSummaryFile.append('			<testCase name="' + entryCase.key + '" result="PASS"/>\n');
			}
			if(entryCase.value.bFail) {
				log.info("TestCase FAIL: $entryCase.key");
				logSummaryFile.append('			<testCase name="' + entryCase.key + '" result="FAIL"/>\n');
			}
		}

		logSummaryFile.append('		</testSuite>\n');
	}

	logSummaryFile.append("	</testResults>\n");
	logSummaryFile.append("</testSummary>\n");

	logSummaryFile = null;

	def xslt= new File(projectPath + "/GBCmdResultsSummary.xslt").getText()

	def transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(new StringReader(xslt)))

	// Load xml
	def xml= new File(projectPath + "/" + applicantName + "_SoapUI-Results-Summary (" + date + ").xml").getText()

	// Set output file
	def html = new FileOutputStream(projectPath + "/" + applicantName + "_SoapUI-Results-Summary (" + date + ").html");
	// Perform transformation
	transformer.transform(new StreamSource(new StringReader(xml)), new StreamResult(html))

	//com.eviware.soapui.SoapUI.logMonitor.getLogArea("script log").clear()
}

return;]]></script></con:config></con:testStep><con:testStep type="groovy" name="Setup OpenESPI for CMD test" id="50a960e6-4df5-4cfc-899e-25e7ee497e03"><con:settings/><con:config><script>// Load gbcmd.conf configuration file
log.info("Loading gbcmd.conf configuration file!");
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfig']);

// Reset Database
log.info("Resetting Data Custodian and Third Party database files!");
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);

// Load customer files
log.info("Loading sample customer files!");
testRunner.testCase.testSuite.project.testSuites['Library'].testCases['UploadTestFile GUI'].run(new com.eviware.soapui.support.types.StringToObjectMap(), false);

// Load gbcmdcert.conf configuration file
log.info("Loading gbcmdcert.conf configuration file!");
result = testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);

// Start genericGetMockServer
log.info("Starting genericGetMockServer!");
def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").start();

// Load Initial Test Configuration
log.info("Loading Initial Test Configuration!");
FND001Result = testRunner.testCase.testSuite.project.testSuites['[FB_03] Core Green Button Connect My Data'].testCases['FND001 [POS] Initial Test Configuration'].run(new com.eviware.soapui.support.types.StringToObjectMap(), false);

// Stop genericGetMockServer
log.info("Stopping genericGetMockServer!");
testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getMockRunner().stop();

log.info("FND001 [POS] Initial Test Configuration result: " + FND001Result.status.toString());
// Verify FND001 [POS] Initial Test Configuration completed successfully
if(FND001Result.status.toString() == "FAILED"){

	log.error("Setup openespi for CMD test failed");
	
} else {

	assert true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Setup OpenESPI for Regression test" id="5d98a302-739b-4fdf-9d28-1ad5c21d4aa4"><con:settings/><con:config><script>// Load gbcmd.conf configuration file
log.info("Loading gbcmd.conf configuration file!");
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfig']);

// Reset Database
log.info("Resetting Data Custodian and Third Party database files!");
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);

// Load customer files
log.info("Loading sample customer files!");
testRunner.testCase.testSuite.project.testSuites['Library'].testCases['UploadTestFile GUI'].run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="GenerateStunnelConf" id="5aa18e02-b2ad-401b-a012-830ea94c4436"><con:settings/><con:config><script>//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
//def ui = com.eviware.soapui.support.UISupport;

def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue("authorizationServerPort");
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue("resourceServerPort");
def mockPort = project.getPropertyValue("mockPort");
def proxyOutPort = project.getPropertyValue("proxyOutPort");
def proxyOutPort1 = project.getPropertyValue("proxyOutPort1");


log.info "[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Directory: " + project.getPropertyValue("stunnelConfigDirectory");
log.info "[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Status Cmd: " + project.getPropertyValue("stunnelStatusCmd");
log.info "[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Start Cmd: " + project.getPropertyValue("stunnelStartCmd");
log.info "[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Stop Cmd: " + project.getPropertyValue("stunnelStopCmd");


if (System.properties['os.name'].toLowerCase().contains('windows')) {
	crlf = crlf;
} else {
	crlf = "\n";
}


/*
tc.setPropertyValue("path",project.getPropertyValue("stunnelConfigDirectory"));
tc.setPropertyValue("timeout","0");
tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStopCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");
log.info strResult;
*/

def confFile = new File(project.getPropertyValue("stunnelConfigDirectory") + "/stunnel.conf");
log.info("[Library] GeneralScripts (GenerateStunnelConf) -- stunnelConfigDirectory: " + confFile);
confFile.write("");

//This is the first line in the soapUI log file.
confFile.append "; **************************************************************************" + crlf;
confFile.append "; * Service defaults may also be specified in individual service sections  *" + crlf;
confFile.append "; **************************************************************************" + crlf;
confFile.append "CApath = " + new File(project.getPropertyValue("CApathDirectory")) + crlf;
confFile.append "" + crlf;

confFile.append "; **************************************************************************" + crlf;
confFile.append "; * Logging                                                                *" + crlf;
confFile.append "; **************************************************************************" + crlf;
confFile.append "" + crlf;
confFile.append "debug = 7" + crlf;
confFile.append "output = " + new File(projectPath,"stunnel.log") + crlf;
confFile.append "" + crlf;
confFile.append "" + crlf;

confFile.append "; **************************************************************************" + crlf;
confFile.append "; * Service definitions (at least one service has to be defined)           *" + crlf;
confFile.append "; **************************************************************************" + crlf;
confFile.append "" + crlf;
confFile.append "" + crlf;

// Implement resource server
confFile.append "; **************************************************************************" + crlf;
confFile.append "; * Resource Server                                                        *" + crlf;
confFile.append "; **************************************************************************" + crlf;
confFile.append "[resourceServer]" + crlf;
confFile.append "accept=localhost:"+proxyOutPort + crlf;
confFile.append "connect=" + resourceServer + crlf;

if(project.getPropertyValue("SSLInterfaceType") == "SNI") {
	URI aURI = new URI(project.getPropertyValue("productionAuthorizationServerDomain"));
	strAuthServerDomain = aURI.getHost();
	confFile.append "sni = " + strAuthServerDomain + crlf;	
}

confFile.append "ciphers=AES128-SHA" + crlf;
confFile.append "client = yes" + crlf;
confFile.append "cert=" + project.getPropertyValue("stunnelConfigDirectory") + "/stunnel.pem" + crlf;
confFile.append "verify=0" + crlf;
confFile.append "" + crlf;

if(authorizationServer!=resourceServer)
{
	// Implement authorization server
	confFile.append "; **************************************************************************" + crlf;
	confFile.append "; * Authorization Server                                                   *" + crlf;
	confFile.append "; **************************************************************************" + crlf;
	confFile.append "[authorizationServer]" + crlf;
	confFile.append "accept=localhost:"+proxyOutPort1 + crlf;
	
	confFile.append "connect=" + authorizationServer + crlf;
	
	confFile.append "ciphers=AES128-SHA" + crlf;
	confFile.append "client = yes" + crlf;
	confFile.append "cert=" + project.getPropertyValue("stunnelConfigDirectory") + "/stunnel.pem" + crlf;
	confFile.append "verify=0" + crlf;
	confFile.append "" + crlf;
}


// Implement server
confFile.append "[tpserver]" + crlf;

// identify target
localhost = InetAddress.getLocalHost();
confFile.append "accept="+ localhost.getHostAddress() + ":443" + crlf;
confFile.append "connect=localhost:" + mockPort + crlf;
confFile.append "cert=" + project.getPropertyValue("stunnelConfigDirectory") + "/stunnel.pem" + crlf;
confFile.append "verify=0" + crlf;
confFile.append "client=no" + crlf;
confFile.append "ciphers=AES128-SHA" + crlf;

//confFile.close();

// Ask testee to verify (manual procedure)
//result = ui.getDialogs().showInfoMessage("Stop and restart Stunnel or otherwise reload \n Stunnel configuration and then click OK ", "\n");
//log.info (result);

// Stop and restart Stunnel
tc.setPropertyValue("cmd",project.getPropertyValue("StunnelStatusCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000

tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStopCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000;

if(tc.getPropertyValue("returncode").toInteger() > 1) {
	log.error("[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Stop cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
	log.error("[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Stop cmd Error: " + tc.getPropertyValue("stderr"));
	testRunner.fail("[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Stop cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
	return;
}
tc.setPropertyValue("cmd",project.getPropertyValue("StunnelStatusCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000

tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStartCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000;

if(tc.getPropertyValue("returncode").toInteger() > 1) {
	log.error("[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Start cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
	log.error("[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Start cmd Error: " + tc.getPropertyValue("stderr"));
	testRunner.fail("[Library] GeneralScripts (GenerateStunnelConf) -- Stunnel Start cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
	return;
}
tc.setPropertyValue("cmd",project.getPropertyValue("StunnelStatusCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000

/*
// reload new configuration
tc.setPropertyValue("path",project.getPropertyValue("stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStartCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");
log.info strResult;
*/</script></con:config></con:testStep><con:testStep type="groovy" name="StopStunnel" id="1c4c51a8-5b69-47b7-a97c-cbf825dcd0a2"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

// Stop and restart Stunnel
tc.setPropertyValue("cmd",project.getPropertyValue("StunnelStatusCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000

tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStopCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000;</script></con:config></con:testStep><con:properties>
		<con:property>
			<con:name>uploadFile</con:name>
			<con:value>test_usage_data.xml</con:value>
		</con:property>
		<con:property>
			<con:name>retailCustomerId</con:name>
			<con:value>1</con:value>
		</con:property>
	</con:properties>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reuse Groovy Selenium Steps" searchProperties="true" id="a24652db-d303-4275-818c-f0c7c5378493">
	<con:description>Copy these steps to construct a sequence using selenium session across test steps

		Always use sequence:
		StartDriver
		... your steps
		StopDriver

		This can only be run as a test case and not as individual steps</con:description>
	<con:settings/>
	<con:testStep type="groovy" name="StartDriver" id="bef235ef-555c-424e-8763-1b16699c8cf0">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				import org.greenbutton.cmd.utils.DriverHelper;

				/////////////////////////////////////////////////////////
				// get variables from the project Custom Properties
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
				driver._bLogActions = true;

				if( context["driver"] == null )
				context["driver"] = driver

				return
				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LoginManager" id="835106b3-eb81-4064-bf8b-ffda3919247f">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				log.info( TestManager + "  " + TestManagerPW)
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)


				/////////////////////////////////////////////////////////
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="UploadFileViaGui" id="71e77312-72cd-4a23-9bac-7b65701e138c">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
				def TestFile = tf.getAbsolutePath();
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{

				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////


				/////////////////////////////////////////////////////////
				// Now to the upload
				/////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Upload")).click();
				driver.findElement(By.name("file")).sendKeys(TestFile);
				driver.findElement(By.name("upload")).click();
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();
				driver.findElement(By.partialLinkText("Add Usage")).click();
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
				driver.findElement(By.name("create")).click();

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LogoutManager" id="cc86656c-aa44-4aa7-8ff1-72d7e4672e81">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// Logout Manager
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)
				driver.findElement(By.id("logout")).click();
				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StopDriver" id="2509d69d-c4e9-4dc0-a49a-960d836993e2">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;



				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				//Close the browser
				driver.quit()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="AuthorizeStartDataCustodian" id="5aa4d5a1-cf31-4dff-97b4-101a954192dd">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				//	WebDriverTestStepTemplate
				//
				// This template allows for interactions with a web browser
				// based on the previous initialization of a webdriver 
				// stored in the context of the test.
				//
				// Previous to this step, include a copy of the StartDriver
				// script. You can then use the driver in this test step or
				// others like it.

				// Also note that steps created this way can only be run as 
				// part of the complete test and not as inidividual steps
				// run in isolation
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=project.getPropertyValue("TestFile")
				log.info("We are talking to: " + ServiceEndpoint) 
				log.info("Test File Path: "+ TestFile)

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// run test step details
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)

				///////////////////////////////////////////////////////// 
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()
				driver.findElement(By.linkText("OAuth Token Management")).click();
				driver.findElement(By.linkText("Delete All OAuth Tokens")).click();
				driver.findElement(By.id("logout")).click();
				///////////////////////////////////////////////////////// 
				// Log in as Alan and do the OAuth thing
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.linkText("Third Parties")).click();
				driver.findElement(By.name("Third_party")).click();
				driver.findElement(By.cssSelector("label")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.name("scope")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click(); sleep(1000)
				driver.findElement(By.linkText("Usage Points")).click();
				driver.findElement(By.linkText("Front Electric Meter")).click();
				sleep(5000)	

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="WebDriverTestStepTemplate" id="d5c71853-2d73-4fad-aca4-e246570d9fbc">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				//	WebDriverTestStepTemplate
				//
				// This template allows for interactions with a web browser
				// based on the previous initialization of a webdriver 
				// stored in the context of the test.
				//
				// Previous to this step, include a copy of the StartDriver
				// script. You can then use the driver in this test step or
				// others like it.

				// Also note that steps created this way can only be run as 
				// part of the complete test and not as inidividual steps
				// run in isolation
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath


				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// run test step details
				/////////////////////////////////////////////////////////


				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Set Access Tokens" id="c0d77564-a5e7-44cd-b22d-533eb8c5ce8d">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;
				import com.eviware.soapui.support.types.StringToStringMap;


				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"];

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL");
				def ServiceEndpoint=BaseURL+"/ThirdParty/home";
				List&lt;WebElement> rows;
			def teststep;

			log.info("Service Endpoint: " + ServiceEndpoint);

			try {
			/////////////////////////////////////////////////////////
			// run test step details
			/////////////////////////////////////////////////////////
			// open Data Custodian
			driver.get(ServiceEndpoint)

			driver.findElement(By.id("login")).click();
			driver.findElement(By.name("j_username")).clear();
			driver.findElement(By.name("j_username")).sendKeys("alan");
			driver.findElement(By.name("j_password")).clear();
			driver.findElement(By.name("j_password")).sendKeys("koala");
			driver.findElement(By.name("submit")).click();
			driver.findElement(By.linkText("Authorizations")).click();
			rows = driver.FindElementsByXpath("//td[@class='access_token']");
			String accessToken1 = rows.get(rows.size() - 1).getText();
			log.info("accessToken1:" +  accessToken1);
			project.setPropertyValue("userAccessToken1",accessToken1);
			driver.findElement(By.id("logout")).click();

			// set message parameters
			teststep = testRunner.testCase.getTestStepByName("GET Subscription 1");
			teststep.setPropertyValue("Authorization","Bearer "+ accessToken1);
			teststep.setPropertyValue("subscriptionId","1");


			driver.findElement(By.id("login")).click();
			driver.findElement(By.name("j_username")).clear();
			driver.findElement(By.name("j_username")).sendKeys("charles");
			driver.findElement(By.name("j_password")).clear();
			driver.findElement(By.name("j_password")).sendKeys("koala");
			driver.findElement(By.name("submit")).click();
			driver.findElement(By.linkText("Authorizations")).click();
			rows = driver.FindElementsByXpath("//td[@class='access_token']");
			String accessToken2 = rows.get(rows.size() - 1).getText();
			log.info("accessToken2:" +  accessToken2);
			project.setPropertyValue("userAccessToken2",accessToken2);
			driver.findElement(By.id("logout")).click();

			// set message parameters
			teststep = testRunner.testCase.getTestStepByName("GET Subscription 2");
			teststep.setPropertyValue("Authorization","Bearer "+ accessToken2);
			teststep.setPropertyValue("subscriptionId","2");


			} catch(Exception e) {
			testRunner.fail(driver.getErrorString())
			driver.quit();
			}
		</script>
	</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UploadTestFile GUI" searchProperties="true" id="8fb96c20-d08c-40ea-8ab1-3e14f41d3f50">
	<con:description>Uploads test usage file</con:description>
	<con:settings/>
	<con:testStep type="groovy" name="StartDriver" id="56eef8b8-6131-45af-ae06-8bc2b68d8cec">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				import org.greenbutton.cmd.utils.DriverHelper;

				/////////////////////////////////////////////////////////
				// get variables from the project Custom Properties
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
				driver._bLogActions = true;

				if( context["driver"] == null )
				context["driver"] = driver

				return
				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LoginManager" id="e7da1200-5c19-4da2-8d6b-2bed7b871c6e">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				log.info( TestManager + "  " + TestManagerPW)
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)


				/////////////////////////////////////////////////////////
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="UploadFileViaGui" id="6bdde26b-d0bd-4335-9eb7-d792c3e338b4">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
				def TestFile = tf.getAbsolutePath();
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				log.info "Test File: " + TestFile;
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{

					/////////////////////////////////////////////////////////
					// Open the DataCustodian Page
					/////////////////////////////////////////////////////////


					/////////////////////////////////////////////////////////
					// Now to the upload
					/////////////////////////////////////////////////////////
					driver.findElement(By.linkText("Upload")).click();
					driver.findElement(By.name("file")).sendKeys(TestFile);
					driver.findElement(By.name("upload")).click();
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();
					driver.findElement(By.partialLinkText("Add Usage")).click();
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
					driver.findElement(By.name("create")).click();

				} catch(Exception e) {
					
					log.info("UploadFileViaGUI Exception: " + driver.getErrorString());
					testRunner.fail(driver.getErrorString())
					driver.quit();
				}</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LogoutManager" id="ab68be2b-b63d-4b94-86df-4dc02ce67ee8">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// Logout Manager
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)
				driver.findElement(By.id("logout")).click();
				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StopDriver" id="9b73f45e-1b45-4e8f-ac1c-5fa8afcf1389">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;



				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				//Close the browser
				driver.quit()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UploadTestFileAndAuthorize" searchProperties="true" id="ee58b28d-b2b2-4c95-89aa-91bbae71bdac">
	<con:description>Uploads test usage file and authorizes it</con:description>
	<con:settings/>
	<con:testStep type="groovy" name="resetDB" id="5eb74848-759c-4a82-a14e-6fb12f2ad02d">
		<con:settings/>
		<con:config>
			<script>	// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

				assert true;</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StartDriver" id="81cf2761-f96b-4684-bad1-25fb42d74eb2">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				import org.greenbutton.cmd.utils.DriverHelper;

				/////////////////////////////////////////////////////////
				// get variables from the project Custom Properties
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
				driver._bLogActions = true;

				if( context["driver"] == null )
				context["driver"] = driver
				//driver._iSleepBetweenStepsMs = 500;

				return
				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LoginManager" id="59981e5f-1521-4338-b8e5-43b2a0e31cdc">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				log.info( TestManager + "  " + TestManagerPW)
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)


				/////////////////////////////////////////////////////////
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="UploadFileViaGui" id="f1134872-7973-466c-a169-ecf761f0515b">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
				def TestFile = tf.getAbsolutePath();
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{

				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////


				/////////////////////////////////////////////////////////
				// Now to the upload
				/////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Upload")).click();
				driver.findElement(By.name("file")).sendKeys(TestFile);
				driver.findElement(By.name("upload")).click();
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();
				driver.findElement(By.partialLinkText("Add Usage")).click();
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
				driver.findElement(By.name("create")).click();

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LogoutManager" id="e4d62b39-aeb3-4486-b61b-289b545e3b6d">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// Logout Manager
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)
				driver.findElement(By.id("logout")).click();
				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="AuthorizeStartDataCustodian" id="7e4a27b1-f835-4fb0-8bf9-bba781741dd8">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				//	WebDriverTestStepTemplate
				//
				// This template allows for interactions with a web browser
				// based on the previous initialization of a webdriver 
				// stored in the context of the test.
				//
				// Previous to this step, include a copy of the StartDriver
				// script. You can then use the driver in this test step or
				// others like it.

				// Also note that steps created this way can only be run as 
				// part of the complete test and not as inidividual steps
				// run in isolation
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=project.getPropertyValue("TestFile")
				log.info("We are talking to: " + ServiceEndpoint) 
				log.info("Test File Path: "+ TestFile)

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// run test step details
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)

				///////////////////////////////////////////////////////// 
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()
				driver.findElement(By.linkText("OAuth Token Management")).click();
				driver.findElement(By.linkText("Delete All OAuth Tokens")).click();
				driver.findElement(By.id("logout")).click();
				///////////////////////////////////////////////////////// 
				// Log in as Alan and do the OAuth thing
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.linkText("Third Parties")).click();
				driver.findElement(By.name("Third_party")).click();
				driver.findElement(By.cssSelector("label")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.name("scope")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click(); sleep(1000)
				driver.findElement(By.linkText("Usage Points")).click();
				driver.findElement(By.linkText("Front Electric Meter")).click();
				sleep(2000)	
				driver.findElement(By.id("logout")).click();

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StopDriver" id="2a30cbce-dd35-4846-996f-761daf430e84">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;



				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				//Close the browser
				driver.quit()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="EstablishTwoSubscriptions" searchProperties="true" id="842a41c8-96fb-4b15-bab5-c26d1f3f0dba">
	<con:settings/>
	<con:testStep type="groovy" name="resetDB" id="55d33794-80f3-4a40-bb8e-721b359f1a99">
		<con:settings/>
		<con:config>
			<script>	// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

				assert true;</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StartDriver" id="4e0e2ad8-b914-4cd1-b773-40914166a5ad">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver
				import org.greenbutton.cmd.utils.DriverHelper;

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// get variables from the project Custom Properties
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
				driver._bLogActions = true;

				if( context["driver"] == null )
				context["driver"] = driver

				return
				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LoginManager" id="1ee801b5-fa00-405a-b3fc-f1e89b27d7f5">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				log.info( TestManager + "  " + TestManagerPW)
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)


				/////////////////////////////////////////////////////////
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="UploadTwoFilesViaGui" id="ab389e66-3ccd-4954-8222-bf8d1282f77f">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
				def TestFile = tf.getAbsolutePath();
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]
				try {
				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////


				/////////////////////////////////////////////////////////
				// Now to the upload
				/////////////////////////////////////////////////////////
				// Alan id=1
				driver.findElement(By.linkText("Upload")).click();
				driver.findElement(By.name("file")).sendKeys(TestFile);
				driver.findElement(By.name("upload")).click();
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();
				driver.findElement(By.partialLinkText("Add Usage")).click();
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
				driver.findElement(By.name("create")).click();

				// Charles id=5
				def tf1= new File(projectPath + "/../data/" + "Gas.xml");
				TestFile = tf1.getAbsolutePath();

				driver.findElement(By.linkText("Upload")).click();
				driver.findElement(By.name("file")).sendKeys(TestFile);
				driver.findElement(By.name("upload")).click();
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText("charles")).click();
				driver.findElement(By.partialLinkText("Add Usage")).click();
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys("0642EABA-8E42-4D1A-A375-AF54993C007B");
				driver.findElement(By.name("create")).click();

				driver.findElement(By.id("logout")).click();

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="AuthorizeTwoCustomer" id="add5f47c-d759-4b62-aedf-ea53295a4989">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				//	WebDriverTestStepTemplate
				//
				// This template allows for interactions with a web browser
				// based on the previous initialization of a webdriver 
				// stored in the context of the test.
				//
				// Previous to this step, include a copy of the StartDriver
				// script. You can then use the driver in this test step or
				// others like it.

				// Also note that steps created this way can only be run as 
				// part of the complete test and not as inidividual steps
				// run in isolation
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;
				import com.eviware.soapui.support.types.StringToStringMap;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian/home"

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				/////////////////////////////////////////////////////////
				// run test step details
				/////////////////////////////////////////////////////////
				// open Data Custodian
				driver.get(ServiceEndpoint)


				///////////////////////////////////////////////////////// 
				// Log in as Alan and do the OAuth thing
				/////////////////////////////////////////////////////////

				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys("alan");
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys("koala");
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.linkText("Third Parties")).click();
				driver.findElement(By.name("Third_party")).click();
				driver.findElement(By.cssSelector("label")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys("alan");
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys("koala");
				driver.findElement(By.name("submit")).click();
				//driver.findElement(By.name("scope")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click(); 
				sleep(1000);
				List&lt;WebElement> rows = driver.FindElementsByXpath("//td[@class='access_token']");
			String accessToken1 = rows.get(rows.size() - 1).getText();
			log.info("accessToken1:" +  accessToken1);

			def headers = new StringToStringMap();
			headers.put("Authorization","Bearer " + accessToken1);

			//	testRunner.testCase.getTestStepByName("GET Subscription 1").testRequest.setRequestHeaders(headers);
			//	testRunner.testCase.getTestStepByName("GET Subscription 2").testRequest.setRequestHeaders(headers);

			project.setPropertyValue("subscriptionID","1");
			driver.findElement(By.id("logout")).click();
			ServiceEndpoint=BaseURL+"/DataCustodian/home"
			driver.get(ServiceEndpoint)
			driver.findElement(By.id("logout")).click();
			driver.findElement(By.id("login")).click();
			driver.findElement(By.name("j_username")).clear();
			driver.findElement(By.name("j_username")).sendKeys("charles");
			driver.findElement(By.name("j_password")).clear();
			driver.findElement(By.name("j_password")).sendKeys("koala");
			driver.findElement(By.name("submit")).click();
			driver.findElement(By.linkText("Third Parties")).click();
			driver.findElement(By.name("Third_party")).click();
			driver.findElement(By.cssSelector("label")).click();
			driver.findElement(By.name("next")).click();
			driver.findElement(By.name("j_username")).clear();
			driver.findElement(By.name("j_username")).sendKeys("charles");
			driver.findElement(By.name("j_password")).clear();
			driver.findElement(By.name("j_password")).sendKeys("koala");
			driver.findElement(By.name("submit")).click();
			//driver.findElement(By.name("scope")).click();
			driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
			driver.findElement(By.name("next")).click();
			driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
			driver.findElement(By.name("authorize")).click(); sleep(1000)
			driver.findElement(By.id("logout")).click();


			//ServiceEndpoint=BaseURL+"/DataCustodian/home"
			//driver.get(ServiceEndpoint)
			//driver.findElement(By.id("logout")).click();
			} catch(Exception e) {
			testRunner.fail(driver.getErrorString())
			driver.quit();
			}</script></con:config>
</con:testStep>
<con:testStep type="groovy" name="Set Access Tokens" id="67c786c8-0108-4665-b3e7-03b828d963fe">
	<con:settings/>
	<con:config>
		<script>/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////
			import org.openqa.selenium.By
			import org.openqa.selenium.Keys;
			import org.openqa.selenium.WebDriver
			import org.openqa.selenium.WebElement
			import org.openqa.selenium.firefox.FirefoxDriver

			import java.util.concurrent.TimeUnit;
			import java.util.regex.Pattern;
			import java.util.concurrent.TimeUnit;
			import org.junit.*;
			import static org.junit.Assert.*;
			import static org.hamcrest.CoreMatchers.*;
			import com.eviware.soapui.support.types.StringToStringMap;


			/////////////////////////////////////////////////////////
			// fetch driver from context
			/////////////////////////////////////////////////////////
			Object driver = context["driver"];

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def BaseURL = project.getPropertyValue("BaseURL");
			def ServiceEndpoint=BaseURL+"/ThirdParty/home";
			List&lt;WebElement> rows;
		def teststep;

		log.info("Service Endpoint: " + ServiceEndpoint);

		try {
		/////////////////////////////////////////////////////////
		// run test step details
		/////////////////////////////////////////////////////////
		// open Data Custodian
		driver.get(ServiceEndpoint)

		driver.findElement(By.id("login")).click();
		driver.findElement(By.name("j_username")).clear();
		driver.findElement(By.name("j_username")).sendKeys("alan");
		driver.findElement(By.name("j_password")).clear();
		driver.findElement(By.name("j_password")).sendKeys("koala");
		driver.findElement(By.name("submit")).click();
		driver.findElement(By.linkText("Authorizations")).click();
		rows = driver.FindElementsByXpath("//td[@class='access_token']");
		String accessToken1 = rows.get(rows.size() - 1).getText();
		log.info("accessToken1:" +  accessToken1);
		project.setPropertyValue("userAccessToken1",accessToken1);
		driver.findElement(By.id("logout")).click();

		driver.findElement(By.id("login")).click();
		driver.findElement(By.name("j_username")).clear();
		driver.findElement(By.name("j_username")).sendKeys("charles");
		driver.findElement(By.name("j_password")).clear();
		driver.findElement(By.name("j_password")).sendKeys("koala");
		driver.findElement(By.name("submit")).click();
		driver.findElement(By.linkText("Authorizations")).click();
		rows = driver.FindElementsByXpath("//td[@class='access_token']");
		String accessToken2 = rows.get(rows.size() - 1).getText();
		log.info("accessToken2:" +  accessToken2);
		project.setPropertyValue("userAccessToken2",accessToken2);
		driver.findElement(By.id("logout")).click();

		} catch(Exception e) {
		testRunner.fail(driver.getErrorString())
		driver.quit();
		}
	</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="LogoutManager" id="7f187f84-ae08-482b-a645-747bf5c11ee9">
	<con:settings/>
	<con:config>
		<script>/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////
			import org.openqa.selenium.By
			import org.openqa.selenium.Keys;
			import org.openqa.selenium.WebDriver
			import org.openqa.selenium.WebElement
			import org.openqa.selenium.firefox.FirefoxDriver

			import java.util.concurrent.TimeUnit;
			import java.util.regex.Pattern;
			import java.util.concurrent.TimeUnit;
			import org.junit.*;
			import static org.junit.Assert.*;
			import static org.hamcrest.CoreMatchers.*;

			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def BaseURL = project.getPropertyValue("BaseURL")
			def ServiceEndpoint=BaseURL+"/DataCustodian"
			def TestManager=project.getPropertyValue("TestManager")
			def TestManagerPW=project.getPropertyValue("TestManagerPW")

			/////////////////////////////////////////////////////////
			// fetch driver from context
			/////////////////////////////////////////////////////////
			Object driver = context["driver"]
			try {
			/////////////////////////////////////////////////////////
			// Logout Manager
			/////////////////////////////////////////////////////////
			driver.get(ServiceEndpoint)
			driver.findElement(By.id("logout")).click();

			} catch(Exception e) {
			testRunner.fail(driver.getErrorString())
			driver.quit();
			}</script>
	</con:config>
</con:testStep>
<con:testStep type="groovy" name="StopDriver" id="e938faaf-6f51-4831-bed8-257b1466f5a2">
	<con:settings/>
	<con:config>
		<script>/////////////////////////////////////////////////////////
			// Note: Generated by capture using Selenium in FF. 
			// Export to Java / JUnit 4 / WebDriver
			// Copy and paste into Groovy Script with minor tweaks
			/////////////////////////////////////////////////////////

			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////
			import org.openqa.selenium.By
			import org.openqa.selenium.Keys;
			import org.openqa.selenium.WebDriver
			import org.openqa.selenium.WebElement
			import org.openqa.selenium.firefox.FirefoxDriver

			import java.util.concurrent.TimeUnit;
			import java.util.regex.Pattern;
			import java.util.concurrent.TimeUnit;
			import org.junit.*;
			import static org.junit.Assert.*;
			import static org.hamcrest.CoreMatchers.*;



			/////////////////////////////////////////////////////////
			// Create a new instance of the Firefox driver
			/////////////////////////////////////////////////////////
			Object driver = context["driver"]

			//Close the browser
			driver.quit();

			//Then in later steps you can retrieve it as context["driverInstance"] 
		</script>
	</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AuthorizeSubcscription" searchProperties="true" id="4c20478c-a431-4761-bd93-3e878a74bbad">
	<con:description>Authorizes subscription for Alan</con:description>
	<con:settings/>
	<con:testStep type="groovy" name="StartDriver" id="dfb4e415-2520-401a-90ab-dd68991e5c22">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				import org.greenbutton.cmd.utils.DriverHelper;

				/////////////////////////////////////////////////////////
				// get variables from the project Custom Properties
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				driver._bLogActions = true;

				if( context["driver"] == null )
				context["driver"] = driver

				return
				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="AuthorizeStartDataCustodian" id="ab05ca0e-8b19-467e-9474-ac5daac4bcf6">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				//	WebDriverTestStepTemplate
				//
				// This template allows for interactions with a web browser
				// based on the previous initialization of a webdriver 
				// stored in the context of the test.
				//
				// Previous to this step, include a copy of the StartDriver
				// script. You can then use the driver in this test step or
				// others like it.

				// Also note that steps created this way can only be run as 
				// part of the complete test and not as inidividual steps
				// run in isolation
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=project.getPropertyValue("TestFile")
				def ScopeString = "FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13"
				
				log.info("We are talking to: " + ServiceEndpoint) 
				log.info("Test File Path: "+ TestFile)

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// run test step details
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)

				/* Dont clear tokens
				///////////////////////////////////////////////////////// 
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()
				driver.findElement(By.linkText("OAuth Token Management")).click();
				driver.findElement(By.linkText("Delete All OAuth Tokens")).click();
				driver.findElement(By.id("logout")).click();*/
				///////////////////////////////////////////////////////// 
				// Log in as Alan and do the OAuth thing
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.linkText("Third Parties")).click();
				driver.findElement(By.name("Third_party")).click();
				driver.findElement(By.cssSelector("label")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");				
				//driver.findElement(By.name("scope")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click(); 
				//sleep(1000)
				//driver.findElement(By.linkText("Usage Points")).click();
				driver.findElement(By.id("logout")).click();

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StopDriver" id="6847afaf-b9b9-4893-94be-3ecbf18725c6">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;



				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				//Close the browser
				driver.quit()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ResourceTestScripts" searchProperties="true" id="3790fa3a-d527-4967-914f-127f7bb087c5">
	<con:settings/>
	<con:testStep type="groovy" name="resourceTests" id="3fda0502-2b45-4ddd-b460-f0e597be40d6">
		<con:settings/>
		<con:config><script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT
import groovyx.net.http.Method;

import org.xml.sax.InputSource;

import java.io.File;
import java.io.FilenameFilter;

import org.apache.commons.io.FileUtils;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}


public class ResourceTester {

	Object log;
	public String _strError = "";
	Document _docResponse = null;
	String _strResponseBody = null;

	String default_access_token;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public setAccessToken(String token)
	{
		default_access_token = token;
	//*********************************************************
	log.info("Default Access Token Service = " + default_access_token);
	//*********************************************************
	
		
	}

	public String parseSelfLink(Document srcDoc)
	{
		XPath xpath = XPathFactory.newInstance().newXPath();
		
		// add namespaces
		HashMap<String, String> prefMap = new HashMap<String, String>() {{
		    put("espi", "http://naesb.org/espi");
		    put("ns3", "http://www.w3.org/2005/Atom");
		}};
		
		SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
		
		xpath.setNamespaceContext(namespaces);
		
		// find resource self link
		String strExpr = "/ns3:entry/ns3:link[@rel='self']/@href";
		XPathExpression expr = xpath.compile(strExpr);
		String href = expr.evaluate(srcDoc);
	
		return href; 
	}
	
	
	public String parseEntryName(Document srcDoc)
	{
		String strEntryName;
		
		//find tag name of espi content
		Element feed = srcDoc.getDocumentElement();
		NodeList nlContent = feed.getElementsByTagName("content");
//		NodeList nlContent = feed.getElementsByTagName("ns3:content");
		NodeList nlContentChildren = nlContent.item(0).getChildNodes();
	
		for(int j = 0 ; j < nlContentChildren.getLength();j++) {
			if(nlContentChildren.item(j).getNodeType()==Node.ELEMENT_NODE)
			{
				Element espi = (Element) nlContentChildren.item(j);
				strEntryName = espi.getNodeName();
			}
		}

		return strEntryName;
	}

	public Document parseDocument(String strInputFile)
	{
		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
		domFactory.setNamespaceAware(true); 
		DocumentBuilder builder = domFactory.newDocumentBuilder();
		
		// parse source document "Xpath form
		Document srcDoc = builder.parse(strInputFile);
	
		return srcDoc;
	}


	private Element getDirectChild(Element parent, String name) {
		
	    for(Node child = parent.getFirstChild(); child != null; child = child.getNextSibling())
	    {
	        if(child instanceof Element && name.equals(child.getNodeName())) return (Element) child;
	    }
	    
	    return null;
	}
	
	private String getNodeValue( Node node ) {
		
	    NodeList childNodes = node.getChildNodes();
	    
	    for (int x = 0; x < childNodes.getLength(); x++ ) {
	    	
	        Node data = childNodes.item(x);
	        if ( data.getNodeType() == Node.TEXT_NODE )
	            return data.getNodeValue().trim();
	    }
	    
	    return "";
	}
	
	private boolean CompareLinks(Node nodeSource,Node nodeResult,Object log) {
		
		String strHrefSrc = nodeSource.getAttribute("href");
		String strRelSrc = nodeSource.getAttribute("rel");
	
		//log.info("Compare link: href:" + strHrefSrc + " rel:" + strRelSrc); 
		
		NodeList nlRes = nodeResult.getChildNodes();
	
		for (int i = 0; i < nlRes.getLength(); i++) 
		{	
			if(nlRes.item(i).getNodeType()==Node.ELEMENT_NODE)
			{
				String strResNodeName = nlRes.item(i).getNodeName();
				if(strResNodeName.equals("ns3:link"))
				{
					String strHrefRes = nlRes.item(i).getAttribute("href");
					String strRelRes = nlRes.item(i).getAttribute("rel");		
	
					if((strHrefRes.equals(strHrefSrc)) && (strRelRes.equals(strRelSrc)))
					{
						return false;
					}
				}
			}
		}
	
		log.error("Did not find matching link for href:" + strHrefSrc + " rel:" + strRelSrc);

		_strError = _strError + "Did not find matching link for href:" + strHrefSrc + " rel:" + strRelSrc;
		
		return true;
	}
	
	private boolean CompareNodes(Node nodeSource,Node nodeResult,Object log) {
		
		boolean bFailure = false;
		
		if(nodeSource.getNodeType()==Node.ELEMENT_NODE) {
	
			String strSrcNodeName = nodeSource.getNodeName();	 
			String strResNodeName = nodeResult.getNodeName();	 
	
			//log.info("Comparing nodes: " + strSrcNodeName + " and " + strResNodeName);
	
			if(!strSrcNodeName.equals(strResNodeName)) {
				log.error("Node: " + strSrcNodeName + " names not equal");
				_strError = _strError + "Node: " + strSrcNodeName + " names not equal";
				bFailure = true;
			}
	
			String strSrcNodeValue = getNodeValue(nodeSource);	 
			String strResNodeValue = getNodeValue(nodeResult);
	
			if( (strSrcNodeName.equals("ns3:id")) || (strSrcNodeName.equals("id")))
			{
				strSrcNodeValue = strSrcNodeValue.toUpperCase();
				strResNodeValue = strResNodeValue.toUpperCase();
			}
	
			//log.info("Node: " + strSrcNodeName + "SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue);
	
			//if(!strSrcNodeName.equals("ns3:published") && !strSrcNodeName.equals("ns3:updated")) {	
				if(!strSrcNodeValue.equals(strResNodeValue))
				{
					log.error("Node: " + strSrcNodeName + " values not equal: SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue);	
					_strError = _strError + "Node: " + strSrcNodeName + " values not equal: SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue;
					bFailure = true;
				}
			//}
	
			NodeList nlSrc = nodeSource.getChildNodes();
			NodeList nlRes = nodeResult.getChildNodes();
	
			for (int i = 0; i < nlSrc.getLength(); i++) 
			{
				if(nlSrc.item(i).getNodeType()==Node.ELEMENT_NODE)
				{
					if(strSrcNodeName.equals("espi:IntervalBlock"))
					{
						//log.info("espi:IntervalBlock");
						bFailure = bFailure  | CompareNodes(nlSrc.item(i),nlRes.item(i),log);
					}
					else if(!nlSrc.item(i).getNodeName().equals("ns3:link"))
					{
	
						Element elResultChild = getDirectChild(nodeResult,nlSrc.item(i).getNodeName());
						if(elResultChild==null)
						{
							log.error("Node: " + strSrcNodeName + " Result does not contain Child: " + nlSrc.item(i).getNodeName());
							_strError = _strError + "Node: " + strSrcNodeName + " Result does not contain Child: " + nlSrc.item(i).getNodeName();
							bFailure = true;
							
						}
						else
						{
							bFailure = bFailure  | CompareNodes(nlSrc.item(i),elResultChild,log);
						}
					}
					else
					{
						// treat links specially
						//bFailure = bFailure  | CompareLinks(nlSrc.item(i),nodeResult,log);				
					}
				}
			}
		}
	
		return bFailure;
	}
	
	
	public String ReplaceLinks(String strEntryName,String strOriginal)
	{
		String strReturn;
		
		if(strEntryName.equals("espi:IntervalBlock")) {
		
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
			//strReturn = strOriginal.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
		}
		else if(strEntryName.equals("espi:UsagePoint")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
		}
		else if(strEntryName.equals("espi:MeterReading")) {
		
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
		}
		else if(strEntryName.equals("espi:ReadingType")) {
		
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
		}	
		else if(strEntryName.equals("espi:ElectricPowerUsageSummary")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
				
		}
		else if(strEntryName.equals("espi:ElectricPowerQualitySummary")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);					
		}
		else if(strEntryName.equals("espi:LocalTimeParameters")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersId);					
		}	
		else
		{
			log.info("strOriginal: " + strOriginal);
			//strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
			//strReturn = strOriginal.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
			//strReturn = strOriginal.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
			//strReturn = strOriginal.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
			//strReturn = strOriginal.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);							
		}				
	}
	

	public boolean doDELETE(boolean bShouldPass,String strBaseEndpoint,String href, String token) {
	
		boolean bFailure = false;
		String strResult = "";
			
		try {
			
			def http = new HTTPBuilder(strBaseEndpoint);
	
			def res = http.request(Method.DELETE) { req ->
			    uri.path = href	
			    headers.Authorization = 'Bearer ' + token
			    response.success = { resp, object ->			        
			        strResult = "DELETE succeeded: " + resp.status;
			    }		 
			    response.failure = { resp ->
			       
			        strResult = "DELETE Failed: " + resp.statusLine;
			        bFailure = true;
			    }	    
			}		      		
		} catch ( HttpResponseException ex ) {
		    
		    // default failure handler throws an exception:
		    strResult = "DELETE Unexpected response error: ${ex.statusCode}";
		    _strError = strResult;
		    bFailure = true;
		    return true;
		}			
	
	
		if(bShouldPass) {
			if(bFailure) {
				_strError = strResult;
				return true;
			} else {
				return false;
			}
		} else {
			if(!bFailure) {
				_strError = "DELETE did not fail as expected " + strResult ;
				return true;
			} else {
				return false;
			}		
		}
		
		return true;
	}
	
	public boolean doGET(boolean bShouldPass,String strBaseEndpoint,String strInputFile,Document docSrc,String href, String token) {
		
		boolean bFailure = false;
		String strResult = "";
		String strBody = "";
		
	  	def http = new HTTPBuilder();
	  
		try {
	
			http.request( strBaseEndpoint, GET, TEXT ) { req ->
				uri.path = href
			     headers.Authorization = 'Bearer ' + token
				headers.Accept = 'application/atom+xml'
				
				response.success = { resp, reader ->
					log.info "resourceTests (doGET) -- Response Status: ${resp.statusLine}"
					log.info "resourceTests (doGET) -- Content-Type: ${resp.headers.'Content-Type'}"
					log.info "resourceTests (doGET) -- Content-Encoding: ${resp.headers.'Content-Encoding'}"
					
					strBody = reader.getText();	
					_strResponseBody = strBody; 		
					log.info "resourceTests (doGET) -- strBody: " + strBody;
				}						
				response.failure = { resp ->
					log.info "resourceTests (doGET) -- Get Failed with Status: ${resp.statusLine}";
					log.info "resourceTests (doGET) -- bShouldPass: " + bShouldPass;
					strResult = "GET Failed: " + resp.statusLine;
					bFailure = true;
				}  
			}
		} catch ( HttpResponseException ex ) {
		    // default failure handler throws an exception:
		    log.info "resourceTests (doGET) -- GET HttpResponseException Error: ${ex.statusCode}"
		    strResult ="GET Unexpected response error: ${ex.statusCode}"
		    _strError = strResult;
		    bFailure = true;
		    return true;

		} catch (IOException io) {
		    if (strBody == "") {
		        log.info "resourceTests (doGET) -- GET IOException Error (strBody): " + strBody;
		        log.info "resourceTests (doGET) -- GET IOException Error: " + io;
		        strResult = "GET IOException error: " + io;
		        _strError = strResult;
		        bFailure = true;
		        return true;
		    }	    
		} catch (Exception e) {
		    log.info "resourceTests (doGET) -- GET Exception Error: " + e;
		    strResult ="GET Unexpected error"
		    _strError = strResult;
		    bFailure = true;
		    return true;			
		}
	
		if(bShouldPass) {
			if(!bFailure) {
				
				DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
				domFactory.setNamespaceAware(true); 
				DocumentBuilder builder = domFactory.newDocumentBuilder();
			
				def Document docResult = builder.parse(new InputSource(new StringReader(strBody)));

				if(strInputFile!=null) {
					
					Element feedSrc = docSrc.getDocumentElement();
					Element feedResult = docResult.getDocumentElement();
				
					bFailure = CompareNodes(feedSrc,feedResult,log);			
		
					if(bFailure) {
						_strError = "GET content verification failure" + _strError;
						return true;
					} else {
						_docResponse = docResult;
						return false;
					}
				}
				else
				{
					_docResponse = docResult;
					return false;					
				}
			} else {
				_strError = strResult;
				return true;
			}
		} else {
			if(bFailure) {
				return false;
			} else {
				_strError = "GET did not fail as expected: " + _strError + strResult;
				return true;
			}
		}
	
		return true;
	}
	
	
	
	public boolean doPOST(boolean bShouldPass,String strBaseEndpoint,String strInputFile,String href, String token) {
		
		// used for creating new record
	
		boolean bFailure = false;
		String strResult = "";
		
		try {
			
			String strContent = FileUtils.readFileToString(new File(strInputFile));
	
			try {
				
				def http = new HTTPBuilder(strBaseEndpoint);
		
				def res = http.request(Method.POST) { req ->
				    uri.path = href
				    headers.Authorization = 'Bearer ' + token
				    send("application/atom+xml", strContent)
				 
				    response.success = { resp, object ->
				    		strResult = "POST succeeded: " + resp.status;	   
				    }
				 
				    response.failure = { resp ->
					    strResult = "POST Failed: " + resp.statusLine;
				        	bFailure = true;
				    }			 
				}
			      		
  			} catch (HttpResponseException ex) {
			    
			    // default failure handler throws an exception:
                   log.info "resourceTests (doPOST) -- POST httpResponseException Error: ${ex.statusCode}";			    
  			    strResult = "POST Unexpected response error: ${ex.statusCode}";
  			    _strError = strResult;
  			    bFailure = true;
  			    return true;
  			}

		} catch (IOException ioe) {			
		    log.info("resourceTests (doPOST) -- POST IOException Error reading file: " + strInputFile);
		    _strError = "POST Error reading file: " + strInputFile;
		    bFailure = true;
		    return true;
		}
	
	
		if(bShouldPass) {
			if(bFailure) {
				_strError = strResult;
				return true;
			} else {
				return false;
			}
		} else {
			if(!bFailure) {
				_strError = "POST did not fail as expected " + strResult;
				return true;
			} else {
				return false;
			}		
		}
		
		return true;
	}
	
	
	public boolean doPUT(boolean bShouldPass,String strBaseEndpoint,String strInputFile,String href, String token) {
		
		boolean bFailure = false;
		String strResult = "";
			
		// used for putdating record
		try {
			
			String strContent = FileUtils.readFileToString(new File(strInputFile));
	
			try {
				
				def http = new HTTPBuilder(strBaseEndpoint);
		
				def res = http.request(Method.PUT) { req ->
				    uri.path = href
				    headers.Authorization = 'Bearer ' + token
				    send("application/atom+xml", strContent)
				 
				    response.success = { resp, object ->
				        strResult = "PUT succeeded: " + resp.status;		        
				    }			 
				    response.failure = { resp ->	       
				        strResult = "PUT Failed: " + resp.statusLine;				    
				        bFailure = true;
				    }
				}
			      		
			}catch ( HttpResponseException ex ) {
			    
			    // default failure handler throws an exception:
			    strResult = "PUT Unexpected response error: ${ex.statusCode}";
			    bFailure = true;
			}			
		} catch (IOException e) {
			
			//e.printStackTrace();
			strResult = "PUT Error reading file: " + strInputFile;
			_strError = strResult;
			return true;
		}
	
		if(bShouldPass)
		{
			if(bFailure)
			{
				_strError = strResult;
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			if(!bFailure)
			{
				_strError = "PUT did not fail as expected" + strResult;
				return true;
			}
			else
			{
				return false;
			}		
		}
		
		return true;
	}
	
	
	public boolean TestDeleteXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		// read back xpath style resource and validate response against source
		log.info("Delete XPATH " + strBaseEndpoint + href);	
		bFailure = doDELETE(bShouldPass,strBaseEndpoint,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Delete XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}

		return bFailure;
	}

	public boolean TestDeleteROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");

		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
			
		// read back xpath style resource and validate response against source
		log.info("Delete ROOT " + strBaseEndpoint + href);	
		bFailure = doDELETE(bShouldPass,strBaseEndpoint,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Delete ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}		
	
		return bFailure;
	}	
	
	public boolean TestPostXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile)
	{
		
		boolean bFailure = false;

		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
		
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		int idx = href.lastIndexOf("/");
		href = href.substring(0,idx);
	
		log.info("POST XPATH " + strBaseEndpoint + href);		
		bFailure = doPOST(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: POST XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
					
		return bFailure;
	}
	
	public boolean TestPutXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
		
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		log.info("PUT XPATH " + strBaseEndpoint + href);			
		bFailure = doPUT(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: PUT XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}
	
	public boolean TestPutROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
	
		log.info("PUT ROOT " + strBaseEndpoint + href);		
		bFailure = doPUT(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: PUT ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}
	
	public boolean TestPostROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
	
		int idx = href.lastIndexOf("/");
		href = href.substring(0,idx);
	
		log.info("POST ROOT " + strBaseEndpoint + href);		
		bFailure = doPOST(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: POST ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
					
		return bFailure;
	}
	
	
	public boolean TestGetXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		// read back xpath style resource and validate response against source
		log.info("Get XPATH " + strBaseEndpoint + href);		
		bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
							
		return bFailure;
	}

	public boolean TestGetROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
	
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);		
	
		// read back root style resource and validate response against source
		log.info("Get ROOT " + strBaseEndpoint + href);				
		bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}

	public boolean TestGetSaveResponse(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strResource,String strOutputFile) {
		
		boolean bFailure = false;
		
		// read back xpath style resource and validate response against source
		log.info("Get " + strBaseEndpoint + strResource + " save to file:" + strOutputFile);		
		bFailure = doGET(bShouldPass,strBaseEndpoint,null,null,strResource, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get " + strBaseEndpoint + strResource + " with error:" + _strError);	
			}
		}	

		if(!bFailure) {
			PrintStream out = null;
			try {
			    out = new PrintStream(new FileOutputStream(strOutputFile));
			    out.print(_strResponseBody);
			} finally {
			    if (out != null) out.close();
			}			
		}
							
		return bFailure;
	}	

	public boolean TestGetROOTAndLinks(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
			
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);		
	
		// read back root style resource and validate response against source
		log.info("Get ROOT And links " + strBaseEndpoint + href);				
		boolean bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href, default_access_token);

		if(bFailure)
		{
			if(bReportError) {
				if(bShouldPass && bFailure) {
					log.error("FAILED: Get ROOT And links " + strBaseEndpoint + href + " with error:" + _strError);	
				}
			}				
			return true;
		}

		
		XPath xpath = XPathFactory.newInstance().newXPath();
		
		// add namespaces
		HashMap<String, String> prefMap = new HashMap<String, String>() {{
		    put("espi", "http://naesb.org/espi");
		    put("ns3", "http://www.w3.org/2005/Atom");
		}};
		
		SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
		
		xpath.setNamespaceContext(namespaces);
		
		// find resource self link
		String strExpr = "/ns3:entry/ns3:link/@href";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlLinks = (NodeList) expr.evaluate(_docResponse,XPathConstants.NODESET);

		boolean bFailOccurred = false;
		
		for (int i = 0; i < nlLinks.getLength(); i++) {

			String strLinkhref = getNodeValue(nlLinks.item(i));
	
			log.info("*Get resource for link: " + strLinkhref);

			if(strLinkhref.contains("cert.greenbuttonalliance.org")) {
				bFailure = doGET(false,strBaseEndpoint,null,null,strLinkhref,default_access_token);
			}
			else {
				bFailure = doGET(bShouldPass,strBaseEndpoint,null,null,strLinkhref, default_access_token);
			}	
			
			if(bFailure) {
				log.error(_strError);	
				bFailOccurred = true;
			}
			else
			{
				if(strLinkhref.endsWith("UsagePoint")||
					strLinkhref.endsWith("LocalTimeParameters")||
					strLinkhref.endsWith("MeterReading")||
					strLinkhref.endsWith("ReadingType")||
					strLinkhref.endsWith("ElectricPowerUsageSummary")||
					strLinkhref.endsWith("ElectricPowerQualitySummary")||
					strLinkhref.endsWith("IntervalBlock")) {
				
					// we should get back a feed
					
					String strExpr2 = "ns3:feed";
					xpath.setNamespaceContext(namespaces);
					XPathExpression expr2 = xpath.compile(strExpr2);
					NodeList nlEntries = (NodeList) expr2.evaluate(_docResponse,XPathConstants.NODESET);
					
					if(nlEntries.getLength()!=1) {
						_strError = "Response did not contain 1 'ns3:feed'";
						log.error(_strError);

						log.info("Response body: " + _strResponseBody);
						bFailOccurred = true;	
					}		
					
				} else {
					
					// we should get back an entry
					
					String strExpr2 = "ns3:entry";
					xpath.setNamespaceContext(namespaces);
					XPathExpression expr2 = xpath.compile(strExpr2);
					NodeList nlEntries = (NodeList) expr2.evaluate(_docResponse,XPathConstants.NODESET);
					
					if(nlEntries.getLength()!=1) {
						_strError = "Response did not contain 1 'ns3:entry'";
						log.error(_strError);

						log.info("Response body: " + _strResponseBody);
						bFailOccurred = true;
					}				
				}	
			}
		}

		return bFailOccurred;
	}	
	
	public boolean TestType1XPATH(Object testRunner,Object context,String strInputFile) {
	
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;

		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;

		boolean bFailure = false;
	
		log.info("**********************************************");
		log.info("** Running test TestType1XPATH for ${strInputFile} ");
		log.info("**********************************************");
			
	//	bFailure = bFailure | TestPostXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestPutXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestDeleteXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //	(should fail)
		bFailure = bFailure | TestGetROOT(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //(should fail)
	
		if(bFailure) {
			_strError = "** FAILURE: test TestType1XPATH for ${strInputFile} ";		
		} else {
			log.info("**********************************************");
			log.info("** SUCCESS: TestType1XPATH for ${strInputFile} ");
			log.info("**********************************************");			
		}
		
		return bFailure;
	}

public boolean TestType1ROOT(Object testRunner,Object context,String strInputFile) {
	
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
		
	
		boolean bFailure = false;
	
		log.info("**********************************************");
		log.info("** Running test TestType1ROOT for ${strInputFile} ");
		log.info("**********************************************");
	
//		bFailure = bFailure | TestPostROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestPutROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestDeleteROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //	(should fail)
		bFailure = bFailure | TestGetROOT(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //(should fail)


		if(bFailure) {
			_strError = "** FAILURE: TestType1ROOT for ${strInputFile} ";		
		} else {
			log.info("**********************************************");
			log.info("** SUCCESS: TestType1ROOT for ${strInputFile} ");
			log.info("**********************************************");			
		}
		
		return bFailure;
	}	
	
	
	public boolean TestType2(Object testRunner,Object context,String strInputFile) {
		
	/*
	POST ROOT
	POST XPATH
	GET XPATH
	GET ROOT
	*/
		
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
	
		boolean bFailure = false;
	
		//log.info("**********************************************");
		//log.info("** Processing: " + strSourceDataFile);
		//log.info("**********************************************");
	
	
		bFailure = bFailure | TestPostROOT(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
	
		bFailure = bFailure | TestPostXPATH(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestGetXPATH(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile)
	
		bFailure = bFailure | TestGetROOT(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
		
		return bFailure;
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////
	def project = testRunner.testCase.testSuite.project
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath	
	
	def BaseURL = project.getPropertyValue("BaseURL")
	def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
	def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
	def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
	
	def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
	def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
	//*********************************************************
	log.info("StartTests");
	//*********************************************************

	
	String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
	String resourceTestFileName = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("resourceTestFileName");
	String resourceOutputFileName = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("resourceOutputFileName");
	String strResource = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("resource");
	String testShouldPass = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("testShouldPass");
	String testType = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("testType");
	String strSourceDataFile = projectPath + "/../data/testSets/" + resourceTestFileName;
	String strOutputDataFile = projectPath + "/../data/" + resourceOutputFileName;
	String default_access_token = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("default_access_token");


	boolean bShouldPass = true;

	testShouldPass = testShouldPass.toUpperCase();
	
	if(testShouldPass.equals("FALSE")) {
		bShouldPass = false;
	}

	boolean bFailure = false;

	ResourceTester resourceTester = new ResourceTester(log);

	try{	
		resourceTester.setAccessToken(default_access_token);

		if(testType.equals("TestType1ROOT")) {
			
			bFailure = resourceTester.TestType1ROOT(testRunner,context,resourceTestFileName);
			
		} else  if(testType.equals("TestType1XPATH")) {
			
			bFailure = resourceTester.TestType1XPATH(testRunner,context,resourceTestFileName);
			
		} else if(testType.equals("testType2")) {
			
			bFailure = resourceTester.TestType2(testRunner,context,resourceTestFileName);
			
		} else if(testType.equals("PostXPATH")) {
			
			bFailure = resourceTester.TestPostXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PostROOT")) {
			
			bFailure = resourceTester.TestPostROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PutROOT")) {
			
			bFailure = resourceTester.TestPutROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PutXPATH")) {
			
			bFailure = resourceTester.TestPutXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("GetXPATH")) {
			
			bFailure = resourceTester.TestGetXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile)
			
		} else if(testType.equals("GetROOT")) {
			
			bFailure = resourceTester.TestGetROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
				
		} else if(testType.equals("GetSaveResponse")) {
			
			bFailure = resourceTester.TestGetSaveResponse(bShouldPass,false,strBaseEndpoint,strResource,strOutputDataFile);
				
		} else if(testType.equals("DeleteXPATH")) {
			
			bFailure = resourceTester.TestDeleteXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
					
		} else if(testType.equals("DeleteROOT")) {
			
			bFailure = resourceTester.TestDeleteROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
			
		} else if(testType.equals("GetROOTAndLinks")) {
			
			bFailure = resourceTester.TestGetROOTAndLinks(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
				
		}
		
	} catch(java.io.FileNotFoundException e) {
		resourceTester._strError = "java.io.FileNotFoundException";
		bFailure = true;
	}

	if(bFailure) {
		log.error("**********************************************");		
		testRunner.fail("Failed test '${testType}' processing resource:" + resourceTestFileName + " With error: " + resourceTester._strError)
		log.error("**********************************************");		
		testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].setPropertyValue("testFailed", "TRUE")

	} else {
		
		testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].setPropertyValue("testFailed", "FALSE")
	}
	
	return;


	]]></script></con:config>
	</con:testStep>
	<con:properties>
		<con:property>
			<con:name>resourceTestFileName</con:name>
			<con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
		</con:property>
		<con:property>
			<con:name>testType</con:name>
			<con:value>GetSaveResponse</con:value>
		</con:property>
		<con:property>
			<con:name>default_access_token</con:name>
			<con:value>2a85f4bd-30db-4b7d-8f41-b046b0566cb3</con:value>
		</con:property>
		<con:property>
			<con:name>testShouldPass</con:name>
			<con:value>TRUE</con:value>
		</con:property>
		<con:property>
			<con:name>resourceOutputFileName</con:name>
			<con:value>test_subscription.xml</con:value>
		</con:property>
		<con:property>
			<con:name>resource</con:name>
			<con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value>
		</con:property>
		<con:property>
			<con:name>testFailed</con:name>
			<con:value>FALSE</con:value>
		</con:property>
		<con:property>
			<con:name>uploadFile</con:name>
			<con:value>test_usage_data.xml</con:value>
		</con:property>
		<con:property>
			<con:name>retailCustomerId</con:name>
			<con:value>1</con:value>
		</con:property>
	</con:properties>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Authorization and extract all information" searchProperties="true" id="00812f7a-b4ce-4782-bf13-f27a979f6d00"><con:description/><con:settings/><con:testStep type="groovy" name="Branch based on need to authorize" id="6b034b9d-6d63-4355-9920-b69e41fdb5bd"><con:settings/><con:config><script>import java.time.*

def ui = com.eviware.soapui.support.UISupport;

//	Create addressability to project global &amp; local variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def message = "";

// Determine if an authorization already exists
log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- project.PropertyValue(authorizationId): " + project.getPropertyValue("authorizationId"));
if(project.getPropertyValue("authorizationId") != "")
{
	// Determine if existing access token has expired
	Date currentTime = new Date();
     log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- currentTime: " + currentTime);

     // Convert current Time to milliseconds
     def currentTimeMillis = currentTime.getTime();
     log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- currentTimeMillis: " + currentTimeMillis);     
     log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- expires_atMillis: " + project.getPropertyValue("expires_atMillis"));
     
     if(currentTimeMillis.toString() &lt;= project.getPropertyValue("expires_atMillis")) {
	
          log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- Authorization Required: NO");
	     testRunner.gotoStepByName("Done");
     } else {
	
          log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- Authorization Required: YES (Processing Refresh_Token Request)");
	     testRunner.gotoStepByName("Prepare to Refresh Access Token");     	
     }
	
} else {

	log.info("[Library] Create Authorization and extract all information (Branch based on need to authorize) -- Authorization Required: YES (Creating Authorization) ");		
}</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="b5180cc9-a09b-47cf-b76f-42ed235424c3"><con:settings/><con:config><script>//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

log.info("Create Authorization and extract all information (Start Mock Service) Started");

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service");
context.mockService.setPropertyValue("error",""); 

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
log.info("authCase mockPort: " + authCase.getPropertyValue("mockPort"));
log.info("project mockPort: " + project.getPropertyValue("mockPort"));

if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

  	log.error("Create Authorization and extract all information (Start Mock Service) mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("Create Authorization and extract all information (Start Mock Service) proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify OAuth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("Create Authorization and extract all information (Start Mock Service) Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("Create Authorization and extract all information (Start Mock Service) Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

//	log.info("Create Authorization and extract all information (Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("Create Authorization and extract all information (Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("Create Authorization and extract all information (Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information (Start Mock Service) Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("tokenResponse",""); 
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("client_secret",authCase.getPropertyValue("client_secret"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start(); 
context.mockRunner = runner;

log.info("Create Authorization and extract all information (Start Mock Service) ********** DEBUG ********** context.mockRunner: " + context.mockRunner.toString());
  
return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="ActivateOriginalHosts" id="a1ad9c06-3be1-4f96-8f3f-9b18644bc780"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="1afd759c-0ac6-4184-99ad-d9656769face"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;
//import java.net.*;
//import java.io.*;

//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//String parseEndpointFromURI(String strURI) throws Exception {
String parseBaseUrlFromURI(String strURI) throws Exception {	
    URL aURL = new URL(strURI);

    if(aURL.getPort().equals(-1)) {
	    log.info("Create Authorization and extract all information Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("Create Authorization and extract all information Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost());
	    return aURL.getProtocol() + "://" +  aURL.getHost() ;
    } else {
	    log.info("Create Authorization and extract all information Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("Create Authorization and extract all information Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort());
	    return aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort();
    }
}


String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    log.info("Create Authorization and extract all information Script will bring up browser to DC Scope selection screen -- strResource: " + aURL.getPath());
    return aURL.getPath();
}

//def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

//String strEndpoint = parseEndpointFromURI(ScopeSelURI);
String strEndpoint = parseBaseUrlFromURI(strScopeSelURI);
String strResource = parseResource(strScopeSelURI);
//log.info "Configured Endpoint: " + strEndpoint;
//log.info "Configured Resource: " + strResource;

log.info "Create Authorization and extract all information Script will bring up browser to DC Scope selection screen -- Scope select URI: " + strScopeSelURI;

DriverHelper driver = new DriverHelper(strEndpoint,strResource,"",log);
context["driver"] = driver;

log.info("Create Autorization and extract all information Script will bring up browser to DC Scope selection screen ********** DEBUG ********** mockRunner: " + testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service").getMockRunner().toString());
//testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service").getMockRunner().getMockService().setPropertyValue("SeleniumWebDriver", driver);
//log.info("Create Autorization and extract all information Script will bring up browser to DC Scope selection screen ********** DEBUG ********** SeleniumWebDriver: " + 
//         testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service").getMockRunner().getMockService().getPropertyValue("SeleniumWebDriver"));

log.info("Create Authorization and extract all information Script will bring up browser to DC Scope selection screen: ********** Starting Selenium Session" + driver);
driver.get(strScopeSelURI);
</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="b113e147-1128-47b8-ad30-8e704a9a4446"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;

def project = testRunner.testCase.testSuite.project;

//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nPerform logon and authorization and hit OK when done";
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.";

//result = ui.getDialogs().showInfoMessage("Perform logon and authorization and hit OK when done", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");

context["driver"].quit();

log.info("Create Authorization and extract all information (Wait for Authorization to Complete and End Browser session): ********** Selenium Session Terminated");
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="ActivateStunnelHosts" id="3ee180ed-2ab7-4fd3-b04c-c2df88f78dab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="e3732230-df71-49cd-a5c2-f5d2e3837c82"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate and extract information from authorization" id="8adc4ae0-5c25-4c99-959e-5b1052ebb74c"><con:settings/><con:config><script>import java.time.*
import groovy.json.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;

//	Create addressability to project global &amp; local variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial access_token: " + authCase.getPropertyValue("access_token"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial token_type: " + authCase.getPropertyValue("token_type"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial refresh_token: " + authCase.getPropertyValue("refresh_token"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial expires_in: " + authCase.getPropertyValue("expires_in"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial scope: " + authCase.getPropertyValue("scope"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial resourceURI: " + authCase.getPropertyValue("resourceURI"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Initial authorizationURI: " + authCase.getPropertyValue("authorizationURI"));

authCase.setPropertyValue("error","");
authCase.setPropertyValue("access_token","");
authCase.setPropertyValue("token_type","");
authCase.setPropertyValue("refresh_token","");
authCase.setPropertyValue("expires_in","");
authCase.setPropertyValue("scope","");
authCase.setPropertyValue("resourceURI","");
authCase.setPropertyValue("authorizationURI","");
project.setPropertyValue("authorizationURI","");
	
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service");
String strError = service.getPropertyValue("error");

if(strError!="")
{
	authCase.setPropertyValue("error",strError);
	testRunner.fail(strError);

	return;	
}

String strTokenResponse = service.getPropertyValue("tokenResponse");

if((strTokenResponse==null)||(strTokenResponse=="")){
	log.error("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- No authorization received");
	testRunner.fail("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- No authorization received");
	return;
}

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(strTokenResponse);
def headers = new StringToStringMap()

Date currentTime = new Date();
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- currentTime: " + currentTime);

// Convert current time to milliseconds
def currentTimeMillis = currentTime.getTime();
Long expires_in = tokenResponse.expires_in;
def expires_inMillis = expires_in * 1000;

log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- currentTimeMillis: " + currentTimeMillis);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- expires_in: " + expires_in);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- expires_inMillis: " + expires_inMillis);

// Calculate time access token expires
Long token_expires_at = currentTimeMillis + expires_inMillis;
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- token_expires_at(millis): " + token_expires_at);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- token_expires_at(Date): " + new Date(token_expires_at));

log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received access_token: " + tokenResponse.access_token);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received token_type: " + tokenResponse.token_type);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received refresh_token: " + tokenResponse.refresh_token);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received expires_in: " + tokenResponse.expires_in);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received scope: " + tokenResponse.scope);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received resourceURI: " + tokenResponse.resourceURI);
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- Received authorizationURI: " + tokenResponse.authorizationURI);

authCase.setPropertyValue("access_token",tokenResponse.access_token);
authCase.setPropertyValue("token_type",tokenResponse.token_type);
authCase.setPropertyValue("refresh_token",tokenResponse.refresh_token);
authCase.setPropertyValue("expires_in",tokenResponse.expires_in.toString());

authCase.setPropertyValue("scope",tokenResponse.scope);

URI uriResource = new URI(tokenResponse.resourceURI);
URI uriAuthorization = new URI(tokenResponse.authorizationURI); 

def authorizationPath = uriAuthorization?.getPath();
log.info"[Library] Create Authorization and extract information (Validate and extract information from authorization) -- authorizationPath = " + authorizationPath;

def authorizationId = authorizationPath.substring(authorizationPath.lastIndexOf("/") + 1);;
log.info"[Library] Create Authorization and extract information (Validate and extract information from authorization) -- authorizationId = " + authorizationId;

authCase.setPropertyValue("resourceURI","http://" + uriResource?.getHost() + ":" + testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getPropertyValue("mockPort") + uriResource.path);
authCase.setPropertyValue("authorizationURI","http://" + uriAuthorization?.getHost() + ":" + testRunner.testCase.getPropertyValue("proxyOutPort") + uriAuthorization.path);
authCase.setPropertyValue("authorizationId",authorizationId);

// Save Global Project properties
project.setPropertyValue("authorizationId",authorizationId);
project.setPropertyValue("access_token",authCase.getPropertyValue("access_token"));
project.setPropertyValue("token_type",authCase.getPropertyValue("token_type"));
project.setPropertyValue("expires_in",authCase.getPropertyValue("expires_in"));
project.setPropertyValue("expires_atMillis",token_expires_at.toString());
project.setPropertyValue("refresh_token",authCase.getPropertyValue("refresh_token"));
project.setPropertyValue("scope",authCase.getPropertyValue("scope"));


log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('authorizationId'): " + project.getPropertyValue("authorizationId"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('access_token'): " + project.getPropertyValue("access_token"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('token_type'): " + project.getPropertyValue("token_type"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('expires_in'): " + project.getPropertyValue("expires_in"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('expires_atMillis'): " + project.getPropertyValue("expires_atMillis"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('refresh_token'): " + project.getPropertyValue("refresh_token"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from authorization) -- project('scope'): " + project.getPropertyValue("scope"));

testRunner.gotoStepByName("Done");</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare to Refresh Access Token" id="cf5db6a4-0a95-4be1-90f7-dfd66f4939db"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

// Create addressability to project global and local variables
def project  = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//String strAuthorizationServerTokenEndpoint = propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint");
//URI uriAuthorizationServer = new URI(propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint"));
URI uriAuthorizationServer = new URI(project.getPropertyValue("authorizationServerTokenEndpoint"));

//String strRefreshToken = propCreateAuthResults.getPropertyValue("refresh_token");
//String strScope = propCreateAuthResults.getPropertyValue("scope");
String strRefreshToken = project.getPropertyValue("refresh_token");
String strScope = project.getPropertyValue("scope");
String strQryParams = "?grant_type=refresh_token" + "&amp;refresh_token=" + strRefreshToken + "&amp;scope=" + strScope;

propTestStep = context.testCase.getTestStepByName("Issue Refresh Token Request");
def headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint","http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path + strQryParams);
propTestStep.setPropertyValue("Endpoint","http://" + uriAuthorizationServer.host + ":" + project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path + strQryParams);

//String strAuthentication = propCreateAuthResults.getPropertyValue("client_id") + ":" + propCreateAuthResults.getPropertyValue("client_secret");
String strAuthentication = project.getPropertyValue("client_id") + ":" + project.getPropertyValue("client_secret");


// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("Original Authentication: " + strAuthentication);
log.info("Base 64 Encoded Authentication: " + strToken);

headers.put("Authorization","Basic " + strToken);
headers.put("Accept","application/json, application/*+json");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="Issue Refresh Token Request" id="2517aa06-1e9e-4dd4-9816-ab4d094bb602"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Issue Refresh Token Request" id="ac1c3c99-f244-4c0b-80f1-9a625c9dc566" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic dGhpcmRfcGFydHk6R2lndDJDYW9EeXJwVng3"/>
  &lt;con:entry key="Accept" value="application/json, application/*+json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://greenbutton.londonhydro.com:8082/oauth/token?grant_type=refresh_token&amp;refresh_token=502d51fc-60ec-47df-a9fe-eb253fb1429c&amp;scope=FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe43d96e-8045-4ffa-b07c-0b6cf3bf04a2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="74425cd7-ff3f-4642-8f4d-c7905142c2a2"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.response.contentAsString;

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(response);

log.info("access_token = " + tokenResponse.access_token);
log.info("token_type = " + tokenResponse.token_type);
log.info("refresh_token = " + tokenResponse.refresh_token);
log.info("expires_in = " + tokenResponse.expires_in);
log.info("scope = " + tokenResponse.scope);
log.info("resourceURI = " + tokenResponse.resourceURI);
log.info("authorizationURI = " + tokenResponse.authorizationURI);

if(tokenResponse.access_token==null){
	assert false;
}

if(tokenResponse.token_type==null){
	assert false;
}

if(tokenResponse.refresh_token==null){
	assert false;
}

if(tokenResponse.expires_in==null){
	assert false;
}

if(tokenResponse.scope==null){
	assert false;
}

if(tokenResponse.resourceURI==null){
	assert false;
}

if(tokenResponse.authorizationURI==null){
	assert false;
}


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Validate and extract information from Refresh Token authorization" id="b022dbcd-9a6b-4a2a-9ca8-968d6cf44a70"><con:settings/><con:config><script>import java.time.*
import groovy.json.JsonSlurper;

// Create addressability to project global &amp; local variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

def ResponseMessage = testRunner.testCase.testSteps["Issue Refresh Token Request"].testRequest.response.contentAsString;

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(ResponseMessage);

Date currentTime = new Date();
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- currentTime: " + currentTime);

// Convert current time to milliseconds
def currentTimeMillis = currentTime.getTime();
Long expires_in = tokenResponse.expires_in;
def expires_inMillis = expires_in * 1000;

log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- currentTimeMillis: " + currentTimeMillis);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- expires_in: " + expires_in);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- expires_inMillis: " + expires_inMillis);

// Calculate time access token expires
Long token_expires_at = currentTimeMillis + expires_inMillis;
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- token_expires_at(millis): " + token_expires_at);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- token_expires_at(Date): " + new Date(token_expires_at));

log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- access_token: " + tokenResponse.access_token);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- token_type: " + tokenResponse.token_type);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- refresh_token: " + tokenResponse.refresh_token);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- expires_in: " + tokenResponse.expires_in);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- scope: " + tokenResponse.scope);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- resourceURI: " + tokenResponse.resourceURI);
log.info("[Library] Create Authorization and extract all information (Validate and extract information from Refresh Token authorization) -- authorizationURI: " + tokenResponse.authorizationURI);

authCase.setPropertyValue("access_token",tokenResponse.access_token);
authCase.setPropertyValue("token_type",tokenResponse.token_type);
authCase.setPropertyValue("refresh_token",tokenResponse.refresh_token);
authCase.setPropertyValue("expires_in",tokenResponse.expires_in.toString());
authCase.setPropertyValue("scope",tokenResponse.scope);

URI uriResource = new URI(tokenResponse.resourceURI);
URI uriAuthorization = new URI(tokenResponse.authorizationURI); 

def authorizationPath = uriAuthorization?.getPath();
log.info"[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- authorizationPath = " + authorizationPath;

def authorizationId = authorizationPath.substring(authorizationPath.lastIndexOf("/") + 1);;
log.info"[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- authorizationId = " + authorizationId;

authCase.setPropertyValue("resourceURI","http://" + uriResource?.getHost() + ":" + project.getRestMockServiceByName("GenericGetService").getPropertyValue("mockPort") + uriResource.path);
authCase.setPropertyValue("authorizationURI","http://" + uriAuthorization?.getHost() + ":" + testRunner.testCase.getPropertyValue("proxyOutPort") + uriAuthorization.path);
authCase.setPropertyValue("authorizationId",authorizationId);

// Save Global Project properties
project.setPropertyValue("authorizationId",authorizationId);
project.setPropertyValue("access_token",authCase.getPropertyValue("access_token"));
project.setPropertyValue("token_type",authCase.getPropertyValue("token_type"));
project.setPropertyValue("expires_in",authCase.getPropertyValue("expires_in"));
project.setPropertyValue("expires_atMillis",token_expires_at.toString());
project.setPropertyValue("refresh_token",authCase.getPropertyValue("refresh_token"));
project.setPropertyValue("scope",authCase.getPropertyValue("scope"));

log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('authorizationId'): " + project.getPropertyValue("authorizationId"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('access_token'): " + project.getPropertyValue("access_token"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('token_type'): " + project.getPropertyValue("token_type"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('expires_in'): " + project.getPropertyValue("expires_in"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('expires_atMillis'): " + project.getPropertyValue("expires_atMillis"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('refresh_token'): " + project.getPropertyValue("refresh_token"));
log.info("[Library] Create Authorization and extract information (Validate and extract information from Refresh Token authorization) -- project('scope'): " + project.getPropertyValue("scope"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Done" id="1506c724-dddb-4676-bd09-aabebed84455"><con:settings/><con:config><script>log.info("[Library] Create Authorization and extract all information (Done)");</script></con:config></con:testStep><con:tearDownScript>if(context.mockRunner != null){
	log.info("Create Authorization and extract all information 'SoapUI TestSteps TearDown Script' -- client_secret: " + authCase.getPropertyValue("client_secret"));
	log.info("Create Authorization and extract all information 'SoapUI TestSteps TearDown Script' -- Stop Mock Service");

	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}


</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/scope_selection</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://sandbox.utilityapi.com/DataCustodian/demo/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://sandbox.utilityapi.com/DataCustodian/demo/oauth/token</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJyZWZyZXNoX2lkIjogIkRFTU9fUFY1ZDY2U24xcHRBMThUNlI1UUtiU3VFSmN0IiwgImF1dGhfaWRzIjogWzExOTUwNl0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTkc3OjRTNmxpSUVDWkJ5dUwzcDRHNUkxTzRrQ09rOA</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119506</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119506</con:value></con:property><con:property><con:name>token_type</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEMO_PV5d66Sn1ptA18T6R5QKbSuEJctPSK8WuXwUX8HgcvYCjG4g11Aj6sj5pJpVNAfv1WbDhES5ftECpf9KybVkwPkVrTamRJfWvEAf84WSXR9b1SzEB1uppN6w27wtAYrj</con:value></con:property><con:property><con:name>expires_in</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3600</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_13_14</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>error</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>client_id</con:name><con:value>DEMO_gbatestsuite_id_admin</con:value></con:property><con:property><con:name>old_access_token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJyZWZyZXNoX2lkIjogIkRFTU9fQWFGZUpLa3NNOFlnc21oSjhKZ3ZyYk5FQjc1IiwgImF1dGhfaWRzIjogWzExOTQ5NV0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVS3BvOjRfRVZtRDgteHhORWJGTW9nbmZ0S3hleGluWQ</con:value></con:property><con:property><con:name>client_secret</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">gbasecret123</con:value></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>mockPort</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8080</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>resourceServer</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">sandbox.utilityapi.com:443</con:value></con:property><con:property><con:name>registration_access_token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJyZWxhdGVkX2lkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInR5cGUiOiAiZ2JjX3JlZyIsICJpZCI6ICJyZWdpc3RyYXRpb25fREVNT19nYmF0ZXN0c3VpdGVfaWQiLCAidXNlciI6IDQ1NjQ0fToxZ1VORmc6d0o0d1d4MmVHS21Zbk5VOTdFeDBTTmFVSnFz</con:value></con:property><con:property><con:name>client_access_token_client_id</con:name><con:value>DEMO_gbatestsuite_id</con:value></con:property><con:property><con:name>client_access_token_secret</con:name><con:value>gbasecret123</con:value></con:property><con:property><con:name>authorizationId</con:name><con:value>1dfa07c5740a_119506</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RunCommand" searchProperties="true" id="a3ec95e4-9f8e-40f3-a3ce-37609ecfe6e3"><con:settings/><con:testStep type="groovy" name="runCommand" id="06648a84-6352-4b25-b179-693e52d162cc"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [Library] runCommand Script");

def project = testRunner.testCase.testSuite.project

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath


public boolean RunCommand(String path,String cmd)
{

	log.info("[Library] RunCommand -- Starting RunCommand Method");
	def doCmd;
	def myTimeoutValue= testRunner.testCase.getPropertyValue("timeout").toInteger();
	def timeoutCmd= testRunner.testCase.testSuite.project.getPropertyValue("timeoutCmd");
	
	if(myTimeoutValue > 0)
	{
		cmd = timeoutCmd + " " + myTimeoutValue + " " + cmd;
	}
	
	log.info("[Library] RunCommand -- path: " + path);
	log.info("[Library] RunCommand -- exec: " + cmd);
	log.info("[Library] RunCommand -- os  : " + System.properties['os.name']);
	testRunner.testCase.setPropertyValue("stderr", "");
	testRunner.testCase.setPropertyValue("returncode", "0");
	testRunner.testCase.setPropertyValue("stdout", "");

	try {
		
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
		} else {
			doCmd = ["bash", "-c",cmd].execute(null, new File(path));
		}
	
		doCmd.waitFor()
	
		} catch (Exception e) {
			testRunner.fail( e.getMessage());
			log.info("**********  END   Execution ********** -- [Library] runCommand Script -- doCmd Exception");
			return false;
	}

	testRunner.testCase.setPropertyValue("stdout", doCmd.in.text);
	testRunner.testCase.setPropertyValue("stderr", doCmd.err.text);

//	if(doCmd.exitValue()!=0)
	if(testRunner.testCase.getPropertyValue("stderr").length() != 0)
	{	
//		testRunner.testCase.setPropertyValue("stderr", doCmd.err.text);
		testRunner.testCase.setPropertyValue("returncode", doCmd.exitValue().toString());
//		testRunner.testCase.setPropertyValue("stdout", doCmd.in.text);

		log.error "[Library] RunCommand -- return code: " + testRunner.testCase.getPropertyValue("returncode");
		log.error "[Library] RunCommand -- stderr: " + testRunner.testCase.getPropertyValue("stderr");
		log.error "[Library] RunCommand -- stdout: " + testRunner.testCase.getPropertyValue("stdout");
		
		testRunner.fail(  "return code: " + testRunner.testCase.getPropertyValue("returncode"));
		log.info("**********  END   Execution ********** -- [Library] runCommand Script -- doCmd Error");
		return false;
	}

//	testRunner.testCase.setPropertyValue("stdout", doCmd.in.text);
	log.info"[Library] RunCommand -- stdout: " + 	testRunner.testCase.getPropertyValue("stdout");
	log.info("**********  END   Execution ********** -- [Library] runCommand Script-- doCmd Success");

	return true;
}

// run the command
cmd = testRunner.testCase.getPropertyValue("cmd");
td = testRunner.testCase.getPropertyValue("path");

log.info("[Library] RunCommand -- Preparing to call RunCommand Method with path: " + td);
log.info("[Library] RunCommand -- Preparing to call RunCommand Method with cmd: " + cmd);
return (RunCommand(td,cmd));

</script></con:config></con:testStep><con:properties><con:property><con:name>stdout</con:name><con:value/></con:property><con:property><con:name>cmd</con:name><con:value>sudo ln -s /etc/hosts.forstunnel /etc/hosts</con:value></con:property><con:property><con:name>path</con:name><con:value>/etc/stunnel</con:value></con:property><con:property><con:name>stderr</con:name><con:value/></con:property><con:property><con:name>returncode</con:name><con:value>0</con:value></con:property><con:property><con:name>timeout</con:name><con:value>5</con:value></con:property><con:property><con:name>uri</con:name><con:value>https://localhost:8443/DataCustodian/espi/1_1/resource/Batch/Subscription/7</con:value></con:property><con:property><con:name>token</con:name><con:value>326bf68d-b49e-45b7-8296-46d80ada302d</con:value></con:property></con:properties></con:testCase><con:testCase id="978db0b7-3ecb-45f4-afd8-d7cb7e0dd584" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GenericResourceGet" searchProperties="true"><con:description>This GET will retrieve a resource via REST GET or SFTP or deferred GET with a 202 response followed by a notification

</con:description><con:settings/><con:testStep type="groovy" name="GenericResourceGet" id="7f4bdcdd-bd1f-4016-b05d-3176630848b5"><con:settings/><con:config><script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT
import static groovyx.net.http.ContentType.XML

import groovyx.net.http.*;

import groovyx.net.http.Method;

import org.xml.sax.InputSource;

import groovy.io.FileType;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];


def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def mockPort = authCase.getPropertyValue("mockPort");

String url = "http://localhost:8085/DataCustodian/espi/1_1/resource/UsagePoint";
//String url = "http://localhost:8080/DataCustodian/espi/1_1/resource/UsagePoint";
String token = "2a85f4bd-30db-4b7d-8f41-b046b0566cb3";

//String url = "http://localhost:8080/DataCustodi43an/espi/1_1/resource/Batch/Subscription/7";

//String url = testRunner.testCase.getPropertyValue("uri");
//String token = testRunner.testCase.getPropertyValue("token");
log.info "[Library] GenericResourceGet -- uri : " + url;
log.info "[Library] GenericResourceGet -- token : " + token;


public Integer doSFTPGET(String url, String token) {
	def transferDir = groovyUtils.projectPath + "/../transferred";
	def list = []
	def dir = new File(transferDir);

// must replace URL class with URI class.(universal get parsed)
	
	def aURL = new URL(url);
	
	dir.eachFileRecurse (FileType.FILES) { file ->
		list << file
	}
	
	if(list.size()>0){

		cmdRm = 'rm ' + transferDir +  '/*';
		
		if(RunCommand(cmdRm) != true) {
			log.error("could not clear transfer directory");
			testRunner.fail("could not clear transfer directory");
			return;
		} 
	}
	
	cmdGet = 'sftp ' + aURL.getHost() + ':' + context.strResource + ' ' + transferDir;
	tc.setPropertyValue("path",transferDir);
	tc.setPropertyValue("timeout","20");
	tc.setPropertyValue("cmd", cmdGet);
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	strResult = tc.getPropertyValue("stdout");
	
	if(RunCommand(cmdGet) != true) {
		log.error("could not issue sftp get");
		testRunner.fail("could not issue sftp get");
		return;
	}	
}

public Integer doHTTPGET(String url, String token) {
		

	def http = new HTTPBuilder();
	def result = 500;

//	http.client.removeRequestInterceptorByClass( ContentEncoding.RequestInterceptor.class );
//     http.client.removeResponseInterceptorByClass( ContentEncoding.ResponseInterceptor.class );

//http.setContentEncoding(ContentEncoding.Type.GZIP,ContentEncoding.Type.DEFLATE);

http.setContentEncoding("");

	try {
	
		http.request( url, GET, TEXT ) { req ->
	//		uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				log.info "Response Status: ${resp.status}"
				log.info "Response Status: ${resp.statusLine}"
				log.info "Content-Type: ${resp.headers.'Content-Type'}"
				log.info "Content-Encoding: ${resp.headers.'Content-Encoding'}"
				
				strBody = reader.getText();
				testRunner.testCase.setPropertyValue("response",strBody);	
				log.info "[Library] GenericResourceGet -- doHTTPGET (GET) -- strBody: " + strBody;
				log.info "[Library] GenericResourceGet -- Done doHTTPGET (GET)1";
				result = resp.status;
				log.info "[Library] GenericResourceGet -- Done doHTTPGET (GET)2";
				
			}
			response.'401' = { resp ->
	        		println '[Library] GenericResourceGet -- access denied'
				result = resp.status;
	    		}						
			response.'403' = { resp ->
	        		println '[Library] GenericResourceGet -- access not authorized'
				result = resp.status;
	    		}						
			response.'202' = { resp ->
	        		println '[Library] GenericResourceGet -- accepted but will provide notification when done'
				result = resp.status;
	    		}						
			response.failure = { resp ->
				log.info "[Library] GenericResourceGet -- doHTTPGET (GET) -- Get Failed with Status: ${resp.statusLine}";
				//log.info "doHTTPGET (GET) -- bShouldPass: " + bShouldPass;
				strResult = "[Library] GenericResourceGet -- GET Failed: " + resp.statusLine;
				bFailure = true;
				result = resp.status;
			}  
		}
	} catch ( HttpResponseException ex ) {
	    // default failure handler throws an exception:
	    log.info "[Library] GenericResourceGet -- resourceTests (GET) -- GET HttpResponseException Error: ${ex.statusCode}"
	    strResult ="[Library] GenericResourceGet -- GET Unexpected response error: ${ex.statusCode}"
	    _strError = strResult;
	    bFailure = true;
	    return 500;
	
	} catch (IOException io) {
	        log.info "[Library] GenericResourceGet -- GET IOException Error: " + io;
	        strResult = "[Library] GenericResourceGet -- GET IOException error: " + io;
	        _strError = strResult;
	        bFailure = true;
	        return 500;
	} catch (Exception e) {
	    log.info "[Library] GenericResourceGet -- GET Exception Error: " + e;
	    strResult ="[Library] GenericResourceGet -- GET Unexpected error"
	    _strError = strResult;
	    bFailure = true;
	    return 500;			
	}
return result;
}

/////////////////////////////////////////////////////////
// Main Script
/////////////////////////////////////////////////////////
def responseToGet;
def responses = [];
def aURL = new URL(url);

/////////////////////////////////////////////////////////
// start notification mock service to listen for results
/////////////////////////////////////////////////////////
context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification");
context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start(); 
context.mockRunner = runner;  
// clear notification of BatchList result
context.mockService.setPropertyValue("BatchList","");

log.info "[Library] GenericResourceGet -- Prototocl: " +aURL.getProtocol()

if( (aURL.getProtocol()=="http") || (aURL.getProtocol()=="https")){
// based on result of initial GET, handle response
	responseToGet = doHTTPGET(url,token);

	log.info "[Library] GenericResourceGet -- Done call to doHTTPGET";
	switch (responseToGet)
	{
		case 200:
			log.info "[Library] GenericResourceGet -- Done call to doHTTPGET/200";
			responses << testRunner.testCase.getPropertyValue("response");	
			log.info "[Library] GenericResourceGet -- Done call to doHTTPGET/200B";
			break;
		case 202:
			// we must wait for notification of BatchList with URLs to retrieve
			def delayWait = 10;
			while (delayWait > 0)
			{
				delayWait --;
				sleep (1000);
				
				if (context.mockService.getPropertyValue("BatchList").length() > 0)
				{
					log.info "[Library] GenericResourceGet -- Notification Received: " + responseToGet ;
					break;
				}
			}
	
			// Check if we have further processing
			if (context.mockService.getPropertyValue("BatchList").length() == 0)
			{
				testRunner.fail("[Library] GenericResourceGet -- No Notification Received");
			}
			else
			{
				// process batch list
				def rootNode = new XmlSlurper().parseText(context.mockService.getPropertyValue("BatchList"));
	
				// iterate through resources
				rootNode.resources.each {resources ->
					responseToGet = doHTTPGET(resources.text(),token);
					responses << testRunner.testCase.getPropertyValue("response");	
				}
			}
			break;
		default:
			break;
	}
}
else if (aURL.getProtocol()=="sftp"){
	doSFTPGET(url,token);
	responses << testRunner.testCase.getPropertyValue("response");	
}
else {
	testRunner.fail("[Library] GenericResourceGet -- Unknown protocol in URL");
}

	

/////////////////////////////////////////////////////////
// stop notification mock service to listen for results
/////////////////////////////////////////////////////////
context.mockRunner.stop();
context.mockRunner = null;

/*
responses.each { it->
	log.info "Here is an entry: " + it;
}
*/

return true;
]]></script></con:config></con:testStep><con:properties><con:property><con:name>uri</con:name><con:value>https://localhost:8443/DataCustodian/espi/1_1/resource/Batch/Subscription/7</con:value></con:property><con:property><con:name>token</con:name><con:value>326bf68d-b49e-45b7-8296-46d80ada302d</con:value></con:property><con:property><con:name>response</con:name><con:value>HELLO
</con:value></con:property></con:properties></con:testCase><con:testCase id="3755e6db-4149-4c29-bc8d-a4b0abd15bf4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ActivateOriginalHosts" searchProperties="true"><con:settings/><con:testStep type="groovy" name="activateOriginalHostsFile" id="765876fd-e104-4277-9217-bb3438afd9f7"><con:settings/><con:config><script>def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

tc.setPropertyValue("cmd","sudo rm /etc/hosts");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 1000
	
tc.setPropertyValue("cmd","sudo ln -s /etc/hosts.original /etc/hosts");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 1000</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="acec55ea-8ed5-4b45-ad50-6a546d29ea99" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ActivateStunnelHosts" searchProperties="true"><con:settings/><con:testStep type="groovy" name="activateHostsForStunnel" id="9e7152f7-5917-4d3a-873a-2407d50d8776"><con:settings/><con:config><script>def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

tc.setPropertyValue("cmd","sudo rm /etc/hosts");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 1000
	
tc.setPropertyValue("cmd","sudo ln -s /etc/hosts.forstunnel /etc/hosts");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 1000</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CMD openESPI UploadTestFile GUI" searchProperties="true" id="0b72c1dd-7a64-475f-abcc-8b6d41c6db16">
	<con:description>Uploads test usage file</con:description>
	<con:settings/>
	<con:testStep type="groovy" name="StartDriver" id="64378ea0-582b-4482-bbfb-17e535ed3794">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				import org.greenbutton.cmd.utils.DriverHelper;

				/////////////////////////////////////////////////////////
				// get variables from the project Custom Properties
				/////////////////////////////////////////////////////////
				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def strURL = project.getPropertyValue("linkPrefixForReplace");
				URL aURL = new URL(strURL);
				
				def host = aURL?.getHost();
				def BaseURL = aURL?.getProtocol() + "://" + host + ":" + aURL.getPort();

				log.info ("BASE=" + BaseURL );

				def DataCustodianContext = aURL.getPath();
				
				//def BaseURL = project.getPropertyValue("BaseURL")
				//def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
				driver._bLogActions = true;

				if( context["driver"] == null )
				context["driver"] = driver

				return
				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LoginManager" id="3b3e3b37-eb85-4a0b-8c27-92fc19189564">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				//def BaseURL = project.getPropertyValue("BaseURL")
				def strURL = project.getPropertyValue("linkPrefixForReplace");
				URL aURL = new URL(strURL);
				def host = aURL?.getHost();
				def BaseURL = aURL?.getProtocol() + "://" + host + ":" + aURL.getPort();

				
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				log.info( TestManager + "  " + TestManagerPW)
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				/////////////////////////////////////////////////////////
				// Open the DataCustodian Page
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)


				/////////////////////////////////////////////////////////
				// Log in as Manager
				/////////////////////////////////////////////////////////
				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear()
				driver.findElement(By.name("j_username")).sendKeys(TestManager)
				driver.findElement(By.name("j_password")).clear()
				driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
				driver.findElement(By.name("submit")).click()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="UploadFileViaGui" id="de867a7d-e52a-4b95-b463-157024b65a37">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
				def TestFile = tf.getAbsolutePath();
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				log.info "Test File: " + TestFile;
				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{

					/////////////////////////////////////////////////////////
					// Open the DataCustodian Page
					/////////////////////////////////////////////////////////


					/////////////////////////////////////////////////////////
					// Now to the upload
					/////////////////////////////////////////////////////////
					driver.findElement(By.linkText("Upload")).click();
					driver.findElement(By.name("file")).sendKeys(TestFile);
					driver.findElement(By.name("upload")).click();
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();
					driver.findElement(By.partialLinkText("Add Usage")).click();
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
					driver.findElement(By.name("create")).click();

				} catch(Exception e) {
					
					log.info("UploadFileViaGUI Exception: " + driver.getErrorString());
					testRunner.fail(driver.getErrorString())
					driver.quit();
				}</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="LogoutManager" id="7d6154fb-fe4d-4406-b9e5-c2d2b36058bd">
		<con:settings/>
		<con:config><script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				//def BaseURL = project.getPropertyValue("BaseURL")
				def strURL = project.getPropertyValue("linkPrefixForReplace");
				URL aURL = new URL(strURL);
				
				def host = aURL?.getHost();
				def BaseURL = aURL?.getProtocol() + "://" + host + ":" + aURL.getPort();

				
				def ServiceEndpoint=BaseURL+"/DataCustodian"
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")

				/////////////////////////////////////////////////////////
				// fetch driver from context
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try{
				/////////////////////////////////////////////////////////
				// Logout Manager
				/////////////////////////////////////////////////////////
				driver.get(ServiceEndpoint)
				driver.findElement(By.id("logout")).click();
				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StopDriver" id="d3ae2a80-3613-4c71-be6c-e87c497f0688">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;



				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				try {
				//Close the browser
				driver.quit()

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:properties/>
</con:testCase><con:properties/>
</con:testSuite>
<con:testSuite name="OpenEspiIntegrationTests" id="078c93b9-0aac-4a68-a290-27fec2b4942d">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="50000" name="ResourceTests" searchProperties="true" id="a536dcbe-f106-47e2-9c97-93c2d78cffa9" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
		<con:settings>
			<con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">20000</con:setting>
			<con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
		</con:settings>
		<con:testStep type="groovy" name="InitializeDataSets" id="428c4598-f235-469d-a6ce-95ae03ae28e0">
			<con:settings/>
			<con:config><script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.stream.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.Transformer;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.TransformerFactory;
import java.io.IOException;


public class ConvType {
    public static final int INT_VALUE = 0;
    public static final int ENTRY = 1;
    public static final int ROOT_ENTRY= 2;
   // public static final int ENTRY_FEED = 3;
   // public static final int ROOT_ENTRY_FEED = 4;    
}

class XMLHelper {
	
	private static boolean _skipNL;

	private static String _baseEndpoint;
	private static int _retailCustomerId;
	private static int _usagePointId;
	private static int _localTimeParametersID;
	private static int _ElectricPowerUsageSummaryId;
	private static int _ElectricPowerQualitySummaryId;
	private static int _meterReadingId;
	private static int _readingTypeId;
	private static int _intervalBlockId;
	private static int _resourceId;
	private static int _subscriptionId;


	public static ConvertToEntry(String strEndpoint,Element feed,String StoragePath,Object log) {
		
		NodeList list = feed.getElementsByTagName("entry");


		XMLHelper._baseEndpoint = strEndpoint;
		XMLHelper._retailCustomerId = 1;
		XMLHelper._usagePointId = 1;
		XMLHelper._localTimeParametersID = 1;
		XMLHelper._ElectricPowerUsageSummaryId = 1;
		XMLHelper._ElectricPowerQualitySummaryId = 1;		
		XMLHelper._meterReadingId = 1;
		XMLHelper._readingTypeId = 1;
		XMLHelper._intervalBlockId = 1;
		XMLHelper._resourceId = 1;
  		XMLHelper._subscriptionId = 5;
//		XMLHelper._subscriptionId = 1;
		
		for(int i = 0 ; i < list.getLength();i++) {
			
			Element entry = (Element) list.item(i);
			NodeList content = entry.getElementsByTagName("content");
			NodeList contentChildren = content.item(0).getChildNodes();

			String strEntryName = "";
			
			for(int j = 0 ; j < contentChildren.getLength();j++) {
				
				if(contentChildren.item(j).getNodeType()==Node.ELEMENT_NODE) {
					
					Element espi = (Element) contentChildren.item(j);
					log.info("Processing node: " + espi.getNodeName());
					strEntryName = espi.getNodeName();
				}
			}
			
			String strFileName = "entry_" + strEntryName + "_" + i + ".xml";

			def file = new PrintWriter (StoragePath + strFileName)

			file.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			
			Convert(list.item(i),file,ConvType.ENTRY,strEntryName);

			file.flush();
			file.close();
		}
		
	}

	public static ConvertToRootEntry(String strEndpoint,Element feed,String StoragePath,Object log) {
		
		NodeList list = feed.getElementsByTagName("entry");


		XMLHelper._baseEndpoint = strEndpoint;
		XMLHelper._retailCustomerId = 1;
		XMLHelper._usagePointId = 1;
		XMLHelper._localTimeParametersID = 1;
		XMLHelper._ElectricPowerUsageSummaryId = 1;
		XMLHelper._ElectricPowerQualitySummaryId = 1;		
		XMLHelper._meterReadingId = 1;
		XMLHelper._readingTypeId = 1;
		XMLHelper._intervalBlockId = 1;
		XMLHelper._resourceId = 1;
		XMLHelper._subscriptionId = 1;		
		
		for(int i = 0 ; i < list.getLength();i++) {
			
			Element entry = (Element) list.item(i);
			NodeList content = entry.getElementsByTagName("content");
			NodeList contentChildren = content.item(0).getChildNodes();

			String strEntryName = "";
			
			for(int j = 0 ; j < contentChildren.getLength();j++) {
				if(contentChildren.item(j).getNodeType()==Node.ELEMENT_NODE)
				{
					Element espi = (Element) contentChildren.item(j);
					log.info("Processing node: " + espi.getNodeName());
					strEntryName = espi.getNodeName();
				}
			}
			
			String strFileName = "root_entry_" + strEntryName + "_" + i + ".xml";

			def file = new PrintWriter (StoragePath + strFileName)

			file.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			
			Convert(list.item(i),file,ConvType.ROOT_ENTRY,strEntryName);

			file.flush();
			file.close();
		}
		
	}
	
	public static Convert(Node rootNode,PrintWriter file,int convType,String strEntryName) {
		
	    String tab = "";
	    _skipNL = false;
	    boolean bHasContents = false;
	    boolean bIsESPI = false;
	    
	    PrivConvert(rootNode, file,tab,bHasContents,bIsESPI,convType,strEntryName);
	    
	}

	private static boolean listAllAttributes(Element element,PrintWriter file,int convType,String strEntryName) {
		
		boolean bHasAttribs = false;

		NamedNodeMap attributes = element.getAttributes();
		
		int numAttrs = attributes.getLength();

		for (int i = 0; i < numAttrs; i++) 
		{
			Attr attr = (Attr) attributes.item(i);
			
			String attrName = attr.getNodeName();
			
			if(!attrName.equals("xmlns"))
			{
				String attrValue = attr.getNodeValue();

				if(attrName.equals("href"))
				{
					// replace RetailCustomer with Subscription
					attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/Subscription/" + _subscriptionId);
					
					if(convType==ConvType.ENTRY)
					{

						//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
						attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}","/Subscription/" + _subscriptionId);
						attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
						attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
						attrValue = attrValue.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
						attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
						attrValue = attrValue.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);
						attrValue = attrValue.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
						attrValue = attrValue.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);
						attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);
						
					}
					else if(convType==ConvType.ROOT_ENTRY)
					{
						if(strEntryName.equals("IntervalBlock")) {

							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
							attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
						}
						else if(strEntryName.equals("UsagePoint")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
						}
						else if(strEntryName.equals("MeterReading")) {

							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
						}
						else if(strEntryName.equals("ElectricPowerUsageSummary")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
								
						}
						else if(strEntryName.equals("ElectricPowerQualitySummary")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);					
						}
						else if(strEntryName.equals("LocalTimeParameters")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);					
						}						
						else
						{
							
//							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
							attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
							attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);							
							attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
							attrValue = attrValue.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
							attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
							attrValue = attrValue.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);							
						}					
					}

					attrValue = _baseEndpoint + attrValue;
				}
				
				file.print(" " + attrName + "=\"" + attrValue + "\"");
				
				bHasAttribs = true;
			}
		}
		
		return bHasAttribs;
		
	}
	
	private static PrivConvert(Node rootNode,PrintWriter file, String tab,boolean bHasContents,boolean bIsESPI,int convType,String strEntryName) {
		
		if(rootNode.getNodeType()==Node.ELEMENT_NODE) {

			String strNodeName = rootNode.getNodeName();

			if(bIsESPI)
			{
				strNodeName = "espi:" + strNodeName;
			}
			else
			{
//				strNodeName = "ns3:" + strNodeName;	
			}
			
			file.print("\n" + tab + "<" + strNodeName);	

			if(strNodeName.equals("ns3:entry"))
			{
				file.print(" xmlns:espi=\"http://naesb.org/espi\" xmlns:ns3=\"http://www.w3.org/2005/Atom\"");
			}
			else
			{
				file.print(" xmlns:espi=\"http://naesb.org/espi\" xmlns=\"http://www.w3.org/2005/Atom\"");
			}
			
			listAllAttributes(rootNode,file,convType,strEntryName);
		}

		if(rootNode.getNodeName().equals("content"))
		{
			bIsESPI = true;
		}

		if(rootNode.getNodeName().equals("IntervalBlock"))
		{
			_intervalBlockId++;
		}
	    
		NodeList nl = rootNode.getChildNodes();
		
		if(nl.getLength()>0) {

			bHasContents = true;
			file.print(">");
			for (int i = 0; i < nl.getLength(); i++) {
				PrivConvert(nl.item(i),file, tab + "   ",bHasContents,bIsESPI,convType,strEntryName);
			}
			
		} else {

			if(rootNode.getNodeType()!=Node.COMMENT_NODE){
				if(rootNode.getNodeValue()!=null) {
					
					file.print(rootNode.getNodeValue().trim());
		
					if(rootNode.getNodeValue().trim() !="") {
						bHasContents = true;
						_skipNL = true;
					} else {
						_skipNL = false;
					}
				} else {
					
					bHasContents = false;
					_skipNL = true;
				}				
			}

		}
	    
		if(rootNode.getNodeType()==Node.ELEMENT_NODE){
			
			if(!_skipNL) {
				file.print("\n" + tab);
			}
			
			_skipNL = false;
			
			if(bHasContents) {

				String strNodeName = rootNode.getNodeName();

				if(strNodeName.equals("content"))
				{
					bIsESPI = false;
				}
	
				if(bIsESPI)
				{
					strNodeName = "espi:" + strNodeName;
				}
				else
				{
//					strNodeName = "ns3:" + strNodeName;	
				}	
				
				file.print("</"+strNodeName+">");
				
			} else {
				file.print("/>");
			}
		}
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	def project = testRunner.testCase.testSuite.project;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath	
	
	def BaseURL = project.getPropertyValue("BaseURL")
	def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
	def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
	def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
	def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
	
	def TestFile = projectPath + "/../data/" + project.getPropertyValue("TestFile");
	def String StoragePath = projectPath + "/../data/testSets/";

	//ServiceEndpointDataCustodian = ServiceEndpointDataCustodian.replace("http:","https:");
	
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	DocumentBuilder db = dbf.newDocumentBuilder();	
	
	try {
			
		Document doc = db.parse(TestFile);
		Element feed = doc.getDocumentElement();
		
		XMLHelper.ConvertToEntry(ServiceEndpointDataCustodian,feed,StoragePath,log);
		//XMLHelper.ConvertToRootEntry(ServiceEndpointDataCustodian,feed,StoragePath,log);
		
		
	}
	catch(ParserConfigurationException pce) {
		//pce.printStackTrace();
		log.error("Parser configureation exception occurred");
	}
	catch(SAXException se) {
		//se.printStackTrace();
		log.error("SAX exception occurred");
	}
	catch(IOException ioe) {
		//ioe.printStackTrace();
		log.error("IO exception occurred");
	}
	
	return;]]></script></con:config>
		</con:testStep>
		<con:testStep type="groovy" name="testType1_RestVerbs after XPATH Posts" id="d49252f1-d087-4c49-adc5-3d225390100f">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;


					public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
					{
					def project = testRunner.testCase.testSuite.project

					tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
					tc.setPropertyValue("resourceTestFileName", strFileName)
					tc.setPropertyValue("testType", strTestType)
					tc.setPropertyValue("default_access_token",project.getPropertyValue("data_custodian_access_token"));

					if(bShouldPass) {
					tc.setPropertyValue("testShouldPass", "TRUE")
					}
					else {
					tc.setPropertyValue("testShouldPass", "FALSE")
					}

					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

					String strResult = tc.getPropertyValue("testFailed");	

					boolean bResult = false;

					if(strResult.equals("TRUE")) {
					bResult = true;
					}

					return bResult;
					}

					///////////////////////////////
					// 
					//	Main Body
					//
					///////////////////////////////

					//*********************************************************
					log.info("Init DB");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
					// Create Subscription to use in path methods
					testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);


					boolean bTestFailed =false;


					bTestFailed = ServiceTest("PostXPATH",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("PostXPATH",true,"entry_ReadingType_3.xml");

					bTestFailed = ServiceTest("PostXPATH",true,"entry_UsagePoint_0.xml");
					bTestFailed = ServiceTest("PostXPATH",true,"entry_MeterReading_2.xml");	
					bTestFailed = ServiceTest("PostXPATH",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("PostXPATH",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("PostXPATH",true,"entry_ElectricPowerQualitySummary_19.xml");

					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ElectricPowerQualitySummary_19.xml");
					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_MeterReading_2.xml");
					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_UsagePoint_0.xml");

					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ReadingType_3.xml");


					return;
				</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts (link UP after POST)" id="6c670c78-234b-4acb-b90b-35265d6f6cdf">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;

					import org.greenbutton.cmd.utils.DriverHelper;

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath

					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
					def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
					def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
					def TestManager=project.getPropertyValue("TestManager")
					def TestManagerPW=project.getPropertyValue("TestManagerPW")
					def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
					def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
					def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
					def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
					def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");




					public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
					{
					tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
					tc.setPropertyValue("resourceTestFileName", strFileName)
					tc.setPropertyValue("testType", strTestType)

					if(bShouldPass) {
					tc.setPropertyValue("testShouldPass", "TRUE")
					}
					else {
					tc.setPropertyValue("testShouldPass", "FALSE")
					}

					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

					String strResult = tc.getPropertyValue("testFailed");	

					boolean bResult = false;

					if(strResult.equals("TRUE")) {
					bResult = true;
					}

					return bResult;
					}

					///////////////////////////////
					// 
					//	Main Body
					//
					///////////////////////////////

					//*********************************************************
					log.info("Init DB");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

					boolean bTestFailed =false;


					bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");

					// First test LocalTimeParamters and ReadingType in isolation
					//	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
					//	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	
					// put back key resources to enable rest of resource tests
					//	bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
					//	bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");

					bTestFailed = ServiceTest("PostROOT",true,"entry_UsagePoint_0.xml");


					//*********************************************************
					log.info("Link UsagePoint to RetailCustomer and Subscription");
					//*********************************************************
					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

					try{
					// Browser Init
					driver.Before();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Given a Retail Customer with Usage Points");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
					driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

					// add usage point linkage
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();	
					driver.findElement(By.partialLinkText("Add Usage")).click();	
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
					driver.findElement(By.name("create")).click();

					} catch(Exception e) {
					testRunner.fail(driver.getErrorString())
					}

					//Close the browser
					driver.quit();	

					// Create Subscription to use in path methods
					testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);
					//*********************************************************
					//*********************************************************


					bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
					bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");

					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");


					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	

					return;</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts (link UP before POST)" id="6e5218a1-d68c-4092-bd2b-c762f7c89140">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;

					import org.greenbutton.cmd.utils.DriverHelper;

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath

					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
					def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
					def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
					def TestManager=project.getPropertyValue("TestManager")
					def TestManagerPW=project.getPropertyValue("TestManagerPW")
					def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
					def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
					def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
					def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
					def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");




					public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
					{
					tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
					tc.setPropertyValue("resourceTestFileName", strFileName)
					tc.setPropertyValue("testType", strTestType)

					if(bShouldPass) {
					tc.setPropertyValue("testShouldPass", "TRUE")
					}
					else {
					tc.setPropertyValue("testShouldPass", "FALSE")
					}

					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

					String strResult = tc.getPropertyValue("testFailed");	

					boolean bResult = false;

					if(strResult.equals("TRUE")) {
					bResult = true;
					}

					return bResult;
					}

					///////////////////////////////
					// 
					//	Main Body
					//
					///////////////////////////////
					/*

					*/
					//*********************************************************
					log.info("Init DB");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

					bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");


					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

					try{
					// Browser Init
					driver.Before();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Given a Retail Customer with Usage Points");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
					driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

					// add usage point linkage
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();	
					driver.findElement(By.partialLinkText("Add Usage")).click();	
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
					driver.findElement(By.name("create")).click();

					} catch(Exception e) {
					testRunner.fail(driver.getErrorString())
					}

					//Close the browser
					driver.quit();	

					// Create Subscription to use in path methods
					testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);
					//*********************************************************
					//*********************************************************

					bTestFailed = ServiceTest("PostROOT",true,"entry_UsagePoint_0.xml");

					bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
					bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");

					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	

					return;</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts (POST UP via XPATH)" id="b6605af6-c65a-45ce-a720-4da697a1d868">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;




					public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
					{
					tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
					tc.setPropertyValue("resourceTestFileName", strFileName)
					tc.setPropertyValue("testType", strTestType)

					if(bShouldPass) {
					tc.setPropertyValue("testShouldPass", "TRUE")
					}
					else {
					tc.setPropertyValue("testShouldPass", "FALSE")
					}

					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

					String strResult = tc.getPropertyValue("testFailed");	

					boolean bResult = false;

					if(strResult.equals("TRUE")) {
					bResult = true;
					}

					return bResult;
					}

					///////////////////////////////
					// 
					//	Main Body
					//
					///////////////////////////////
					/*

					*/
					//*********************************************************
					log.info("Init DB");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
					// Create Subscription to use in path methods
					testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);

					bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");

					bTestFailed = ServiceTest("PostXPATH",true,"entry_UsagePoint_0.xml");

					bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
					bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");

					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
					bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	

					return;</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="testType3_SequentialUploads" id="b4aa6820-99e8-4287-a68e-8533aa56a998">
			<con:settings/>
			<con:config><script>import org.xml.sax.SAXException;
					import org.w3c.dom.*;
					import javax.xml.parsers.*;
					import javax.xml.xpath.*;
					import java.util.HashMap;
					import java.util.Iterator;
					import java.util.Map;
					import javax.xml.namespace.NamespaceContext;


					public class SimpleNamespaceContext implements NamespaceContext {

					private final Map&lt;String, String> PREF_MAP = new HashMap&lt;String, String>();

			public SimpleNamespaceContext(final Map&lt;String, String> prefMap) {
		PREF_MAP.putAll(prefMap);       
		}

		public String getNamespaceURI(String prefix) {
		return PREF_MAP.get(prefix);
		}

		public String getPrefix(String uri) {
		throw new UnsupportedOperationException();
		}

		public Iterator getPrefixes(String uri) {
		throw new UnsupportedOperationException();
		}

		}

		public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
		{
		tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
		tc.setPropertyValue("resourceTestFileName", strFileName)
		tc.setPropertyValue("testType", strTestType)
		tc.setPropertyValue("resourceOutputFileName", strOutputFile)
		tc.setPropertyValue("resource", strResource)

		if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
		}
		else {
		tc.setPropertyValue("testShouldPass", "FALSE")
		}

		testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

		String strResult = tc.getPropertyValue("testFailed");	

		boolean bResult = false;

		if(strResult.equals("TRUE")) {
		bResult = true;
		}

		return bResult;
		}


		///////////////////////////////
		// 
		//	Main Body
		//
		///////////////////////////////

		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath


		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
		domFactory.setNamespaceAware(true); 
		DocumentBuilder builder = domFactory.newDocumentBuilder();

		XPath xpath = XPathFactory.newInstance().newXPath();

		// add namespaces
		HashMap&lt;String, String> prefMap = new HashMap&lt;String, String>() {{
put("espi", "http://naesb.org/espi");
put("ns3", "http://www.w3.org/2005/Atom");
}};

SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);

xpath.setNamespaceContext(namespaces);	

//*********************************************************
log.info("Init DB");
//*********************************************************
// reset DB : run library groovy script
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

log.info("*********************************************************");
log.info("upload usage data 1 using curl");
log.info("*********************************************************");
tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"];
tc.setPropertyValue("uploadFile", "Meter_Data_12-30-2013_01-05-2014.xml");
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['curlUpload']);

boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,"espi/1_1/resource/IntervalBlock","test_get_block.xml");	
String strOutputDataFile = projectPath + "/../data/" + "test_get_block.xml";
String strExpr = "";

if(!bTestFailed){

Document docResponse = builder.parse(strOutputDataFile);

strExpr = "/ns3:feed/ns3:entry";
XPathExpression expr = xpath.compile(strExpr);
NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

log.info("Retrieved " + nlNodes.getLength() + " Entries");
if(nlNodes.getLength()!=2)
{
log.error("Response did not contain the correct number of Entries.");
}

strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock";
expr = xpath.compile(strExpr);
nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

log.info("Retrieved " + nlNodes.getLength() + " IntervalBlocks");	
if(nlNodes.getLength()!=2)
{
log.error("Response did not contain the correct number of IntervalBlocks.");
}		

strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock/espi:IntervalReading";
expr = xpath.compile(strExpr);
nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

log.info("Retrieved " + nlNodes.getLength() + " IntervalReadings");
if(nlNodes.getLength()!=20160)
{
log.error("Response did not contain the correct number of IntervalReadings.");
}	

try{

File file = new File(strOutputDataFile);

file.delete();

} catch(Exception e) {

log.error("Error deleing temp file:" + e.getMessage());
}

}
else
{
return;
}

log.info("*********************************************************");
log.info("upload usage data 2 using curl");
log.info("*********************************************************");
tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"];
tc.setPropertyValue("uploadFile", "Meter_Data_01-06-2014_01-12-2014.xml");
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['curlUpload']);

bTestFailed = ServiceTest("GetSaveResponse",true,null,"espi/1_1/resource/IntervalBlock","test_get_block2.xml");	
strOutputDataFile = projectPath + "/../data/" + "test_get_block2.xml";
strExpr = "";

if(!bTestFailed){

Document docResponse = builder.parse(strOutputDataFile);

strExpr = "/ns3:feed/ns3:entry";
XPathExpression expr = xpath.compile(strExpr);
NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

log.info("Retrieved " + nlNodes.getLength() + " Entries");
if(nlNodes.getLength()!=4)
{
log.error("Response did not contain the correct number of Entries.");
}

strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock";
expr = xpath.compile(strExpr);
nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

log.info("Retrieved " + nlNodes.getLength() + " IntervalBlocks");
if(nlNodes.getLength()!=4)
{
log.error("Response did not contain the correct number of IntervalBlocks.");
}				

strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock/espi:IntervalReading";
expr = xpath.compile(strExpr);
nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

log.info("Retrieved " + nlNodes.getLength() + " IntervalReadings");
if(nlNodes.getLength()!=40320)
{
log.error("Response did not contain the correct number of IntervalReadings.");
}		

try{

File file = new File(strOutputDataFile);

file.delete();

} catch(Exception e) {

log.error("Error deleing temp file:" + e.getMessage());
}		
}
else
{
return;
}

return;
</script></con:config>
</con:testStep>
<con:testStep type="groovy" name="testType2_embeddedLinkTests" id="1dd738e2-f7ea-409c-a4f9-4d11c45239cc">
	<con:settings/>
	<con:config>
		<script>import org.openqa.selenium.*;



			public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
			{
			tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
			tc.setPropertyValue("resourceTestFileName", strFileName)
			tc.setPropertyValue("testType", strTestType)

			if(bShouldPass) {
			tc.setPropertyValue("testShouldPass", "TRUE")
			}
			else {
			tc.setPropertyValue("testShouldPass", "FALSE")
			}

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

			String strResult = tc.getPropertyValue("testFailed");	

			boolean bResult = false;

			if(strResult.equals("TRUE")) {
			bResult = true;
			}

			return bResult;
			}


			/*
			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def BaseURL = project.getPropertyValue("BaseURL")
			def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
			def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
			def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
			def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
			def TestManager=project.getPropertyValue("TestManager")
			def TestManagerPW=project.getPropertyValue("TestManagerPW")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
			def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
			def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
			def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

			Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);
			*/

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////

			//*********************************************************
			log.info("Init DB");
			//*********************************************************
			// reset DB : run library groovy script
			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

			log.info("*********************************************************");
			log.info("upload usage data using curl");
			log.info("*********************************************************");
			// reset DB : run library groovy script

			tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"]
			tc.setPropertyValue("uploadFile", "test_usage_data.xml")	
			tc.setPropertyValue("retailCustomerId","1")
			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['curlUpload']);

			// Create Subscription to use in path methods
			testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);


			/*
			try{
			// Browser Init
			driver.Before();

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			driver.logStep("Link Usage Point to Retail Customer");
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
			driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

			// add usage point linkage
			driver.findElement(By.linkText("Customer List")).click();
			driver.findElement(By.linkText(TestRetailCustomer)).click();	
			driver.findElement(By.partialLinkText("Add Usage")).click();	
			driver.findElement(By.id("UUID")).clear();
			driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
			driver.findElement(By.id("description")).clear();
			driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
			driver.findElement(By.name("create")).click();

			// upload usage point file
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			driver.logStep("upload usage point file");
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
			driver.findElement(By.linkText("Upload")).click();	
			driver.findElement(By.name("file")).sendKeys(TestFile);

			driver.findElement(By.name("upload")).click();	
			driver.assertDoesNotContain("Unable to process file");

			driver.logout(ServiceEndpointDataCustodian);

			} catch(Exception e) {
			testRunner.fail(driver.getErrorString())
			}

			//Close the browser
			driver.quit();
			*/

			log.info("*********************************************************");
			log.info("GETS and get links");
			log.info("*********************************************************");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_UsagePoint_0.xml");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_LocalTimeParameters_1.xml");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_MeterReading_2.xml");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ReadingType_3.xml");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ElectricPowerUsageSummary_18.xml");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ElectricPowerQualitySummary_19.xml");
			bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_IntervalBlock_4.xml");

			return;
		</script>
	</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Retail Customers" searchProperties="true" id="fa3949ff-a0a7-4274-ace9-674a8169ebd4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: Retail Customers" id="12644c5b-93b0-4cea-9bac-0527c9b0b407">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Feature: Retail Customers");
				log.info("  As a Retail Customer,");
				log.info("  I want to be able to view my usage point in my browser");
				log.info("  So that I can see my UsagePoints");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Usage Points access (reg UP before upload)" id="86ff38b6-a81e-4330-a5a6-2fed2fb15c2d">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;

				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				driver._bLogActions = true;


				try{
				//*********************************************************
				log.info("Scenario: Retail Customer authorizes Usage Points access");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);
				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				/*
				* 	old software behaved differently- it would route the use to the DC page
				* 	Instread of showwing no authorized usage points
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Usage Points page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Usage Points")).click();	
				*/

				// Corrected to the following step
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Data Custodians page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see Data Custodian selection page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertUrlEndsWith("/DataCustodianList");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("And I select a Data Custodian from the list");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();		

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
//				driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
				driver.assertContains("FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[1]")).click();	
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I authorize Third Party");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//	driver.findElement(By.name("authorize")).click();	
//				driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();

				driver.findElement(By.name("authorize")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see all my authorizations");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");
				driver.assertContains("data_custodian");
				driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");


				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Usage Points page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Usage Points")).click();	        

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see a Usage Point");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains(usagePointDescription1);

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();


			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Usage Points access" id="d51e18e6-2d8f-4a20-b37f-f68632baf6f2">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath

				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				driver._bLogActions = true;

				try{
				//*********************************************************
				log.info("Scenario: Retail Customer authorizes Usage Points access");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);
				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");


				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();


				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				/*
				* 	old software behaved differently- it would route the user to the DC page
				* 	Instead of showwing no authorized usage points
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Usage Points page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Usage Points")).click();	
				*/

				// Corrected to the following step
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Data Custodians page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see Data Custodian selection page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertUrlEndsWith("/DataCustodianList");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("And I select a Data Custodian from the list");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();		

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I authorize Third Party");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//	driver.findElement(By.name("authorize")).click();	
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click();


				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see all my authorizations");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");
				driver.assertContains("data_custodian");
				driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Usage Points page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Usage Points")).click();	        

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see a Usage Point");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains(usagePointDescription1);

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();


			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer views Usage Points with Meter Readings" id="d6637e99-bbe3-4cb9-b3af-2a6b5004e3a2">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				//driver._bLogActions = true;


				try{
				//*********************************************************
				log.info("Scenario: Retail Customer views Usage Points with Meter Readings");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				///////////////////////////////////////////////////////////  
				driver.logStep("Given a Retail Customer with Usage Points");
				///////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();


				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				/*
				* 	old software behaved differently- it would route the use to the DC page
				* 	Instread of showwing no authorized usage points
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Usage Points page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Usage Points")).click();	
				*/

				// Corrected to the following step
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I look at my Data Custodians page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("And I should see Data Custodian selection page");
				///////////////////////////////////////////////////////////
				driver.assertUrlEndsWith("/DataCustodianList");

				///////////////////////////////////////////////////////////
				driver.logStep("And I select a Data Custodian from the list");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				///////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				///////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				///////////////////////////////////////////////////////////
				driver.logStep("When I authorize Third Party");
				///////////////////////////////////////////////////////////
				//	driver.findElement(By.name("authorize")).click();	
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click();


				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see all my authorizations");
				///////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");
				driver.assertContains("data_custodian");
				driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

				///////////////////////////////////////////////////////////
				driver.logStep("When I look at my Usage Points page");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Usage Points")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see a Usage Point");
				///////////////////////////////////////////////////////////
				driver.assertContains(usagePointDescription1);

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Usage Point");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText(usagePointDescription1)).click();	        

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Usage Point details");
				///////////////////////////////////////////////////////////
				driver.assertContains("Usage Summaries");
				driver.assertContains("Quality Summaries");
				driver.assertContains("Local time zone offset from UTCTime");
				driver.assertContains("-18000");

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Meter Reading");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Fifteen Minute Electricity Consumption")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Meter Reading details");
				///////////////////////////////////////////////////////////
				driver.assertContains("Fifteen Minute Electricity Consumption");
				driver.assertContains("Type of Meter Reading Data");
				driver.assertContains("86400");
				driver.assertContains("974");
				driver.assertContains("900");
				driver.assertContains("965");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();
			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Scope" id="fa6ab5f0-5599-45fc-9364-7cdbd6140067">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				//driver._bLogActions = true;

				try{
				//*********************************************************
				log.info("Scenario: Retail Customer authorizes Scope");
				//*********************************************************  
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				///////////////////////////////////////////////////////////  
				driver.logStep("Given I have a Retail Customer account");
				///////////////////////////////////////////////////////////
				// Seed Data

				///////////////////////////////////////////////////////////
				driver.logStep("When I log in as Alan Turing into Third Party");
				///////////////////////////////////////////////////////////
				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				///////////////////////////////////////////////////////////
				driver.logStep("And I select a Data Custodian from the list");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				///////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				///////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				///////////////////////////////////////////////////////////
				driver.logStep("When I authorize Third Party");
				///////////////////////////////////////////////////////////
				//	driver.findElement(By.name("authorize")).click();	
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click();


				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see all my authorizations");
				///////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");
				driver.assertContains("data_custodian");
				driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");


				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();

			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer denies Scope" id="c8afb5f6-b5f3-4f17-9a88-26305ced9e1a">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				//driver._bLogActions = true;

				try{
				//*********************************************************
				log.info("Scenario: Retail Customer denies Scope");
				//********************************************************* 
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				///////////////////////////////////////////////////////////
				driver.logStep("Given I have a Retail Customer account");
				///////////////////////////////////////////////////////////
				// Seed Data

				///////////////////////////////////////////////////////////
				driver.logStep("When I log in as Alan Turing into Third Party");
				///////////////////////////////////////////////////////////
				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				///////////////////////////////////////////////////////////
				driver.logStep("And I select a Data Custodian from the list");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				///////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				///////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				///////////////////////////////////////////////////////////
				driver.logStep("When I deny Third Party");
				///////////////////////////////////////////////////////////
				//	driver.findElement(By.name("deny")).click();
				driver.findElement(By.xpath("html/body/div[2]/form/ul/li/input[2]")).click();	
				driver.findElement(By.name("authorize")).click();

				/// 
				///////////////////////////////////////////////////////////
				driver.logStep("Then I should be redirected to the home page");
				///////////////////////////////////////////////////////////
				driver.assertUrlContains("RetailCustomer");
				driver.assertUrlEndsWith("/home");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();

			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Scope from Data Custodian" id="c0cabbd0-fd85-48b3-b7b2-e83bba9c95da">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();

				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				//driver._bLogActions = true;

				try{
				//*********************************************************
				log.info("Scenario: Retail Customer authorizes Scope from Data Custodian");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				///////////////////////////////////////////////////////////
				driver.logStep("Given I have a Retail Customer account");
				///////////////////////////////////////////////////////////
				// Seed Data

				///////////////////////////////////////////////////////////
				driver.logStep("When I log in as Alan Turing into Data Custodian");
				///////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);

				///////////////////////////////////////////////////////////
				driver.logStep("And I select a Third Party from the list");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Third Parties")).click();
				driver.findElement(By.className("third-party")).click();
				driver.findElement(By.name("next")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("When I log into Third Party");
				///////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				///////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				///////////////////////////////////////////////////////////
				driver.logStep("When I authorize Third Party");
				///////////////////////////////////////////////////////////
				//	driver.findElement(By.name("authorize")).click();	
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see all my authorizations");
				///////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");
				driver.assertContains("data_custodian");
				driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();

			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer denies Scope from Data Custodian" id="af5ace54-0c77-46f1-8331-d2def8021771">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				//driver._bLogActions = true;

				try{
				//*********************************************************
				log.info("Scenario: Retail Customer denies Scope from Data Custodian");
				//*********************************************************  
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				///////////////////////////////////////////////////////////
				driver.logStep("Given I have a Retail Customer account");
				///////////////////////////////////////////////////////////
				// Seed Data

				///////////////////////////////////////////////////////////
				driver.logStep("When I log in as Alan Turing into Data Custodian");
				///////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);

				///////////////////////////////////////////////////////////
				driver.logStep("And I select a Third Party from the list");
				///////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Third Parties")).click();
				driver.findElement(By.className("third-party")).click();
				driver.findElement(By.name("next")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("When I log into Third Party");
				///////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
				driver.findElement(By.name("submit")).click();

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				///////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				///////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				///////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				///////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				///////////////////////////////////////////////////////////
				driver.logStep("When I deny Third Party");
				///////////////////////////////////////////////////////////
				//	driver.findElement(By.name("deny")).click();		
				driver.findElement(By.xpath("html/body/div[2]/form/ul/li/input[2]")).click();	
				driver.findElement(By.name("authorize")).click();


				///////////////////////////////////////////////////////////
				driver.logStep("Then I should be redirected to the home page");
				///////////////////////////////////////////////////////////
				driver.assertUrlContains("RetailCustomer");
				driver.assertUrlEndsWith("/home");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();


			</script></con:config>
	</con:testStep>
	<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Notification" searchProperties="true" id="0b86062c-c041-4957-b41a-22a9fcb7ad41" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: Notification" id="abe712c7-c0e6-4a1b-81d4-a39a7d5e9397">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Feature: Notification");
				log.info("  As Data Custodian,");
				log.info("  I should be able to notify Third Party about data updates,");
				log.info("  So Third Party can download updated data");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Data Custodian notifies Third Party of updated Subscription" id="ef66d463-1eef-4b29-9d6f-a61d9ece0957">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				def TestFile2=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile2"))).getAbsolutePath();
				def usagePointUUID2 = project.getPropertyValue("usagePointUUID2");
				def usagePointDescription2 = project.getPropertyValue("usagePointDescription2");

				//driver._bLogActions = true;
				// how long to wait between each execution step
				//driver._iSleepBetweenStepsMs = 3000;

				try{
				//*********************************************************
				log.info("Scenario: Data Custodian notifies Third Party of updated Subscription");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();

				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("And a Third Party with an updated subscription");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logout(ServiceEndpointThirdParty);

				driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

				driver.findElement(By.linkText("Batch Lists")).click();
				driver.assertDoesNotContain("Whoops");

				log.info("The following step may take up to 30 seconds to complete.");
				int OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
				log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

				driver.logout(ServiceEndpointThirdParty);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();

				driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);

				//driver.findElement(By.name("scope")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	
				//driver.findElement(By.name("authorize")).click();	
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click();

				driver.logout(ServiceEndpointDataCustodian);

				driver.logout(ServiceEndpointThirdParty);

				driver.login(ServiceEndpointDataCustodian, TestManager,TestManagerPW);

				// upload usage point file Sweet Usage Point
				driver.findElement(By.linkText("Upload")).click();		
				driver.findElement(By.name("file")).sendKeys(TestFile2);
				driver.findElement(By.name("upload")).click();	

				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();		
				driver.findElement(By.linkText(TestRetailCustomer)).click();		
				driver.findElement(By.partialLinkText("Add Usage")).click();
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID2);
				driver.findElement(By.name("create")).click();	

				driver.logout(ServiceEndpointDataCustodian);


				// Check for Notifications
				driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

				driver.findElement(By.linkText("Batch Lists")).click();
				driver.assertDoesNotContain("Whoops");

				log.info("The following step may take up to 30 seconds to complete.");
				OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
				log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

				if(OriginalnumberOfSubscriptions != 1)
				{
				log.error("did not see autogenerated notification from subscription creation");
				testRunner.fail("unexpected number of subscriptions");
				}

				driver.logout(ServiceEndpointThirdParty);




				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I notify the Third Party");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.findElement(By.linkText("Notify Third Party")).click();	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then the Third Party should be notified of the update");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logout(ServiceEndpointDataCustodian);
				driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

				driver.assertContains("Welcome");

				driver.findElement(By.linkText("Batch Lists")).click();

				int numberOfSubscriptions = driver.GetNumElsByTagName("h2");

				log.info("New number of subscriptions=" + numberOfSubscriptions);

				if( (numberOfSubscriptions-OriginalnumberOfSubscriptions) != 2)
				{
				log.error("unexpected number of subscriptions");
				testRunner.fail("unexpected number of subscriptions");
				}

				driver.assertContains("/espi/1_1/resource/Batch/Subscription/");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();

			</script></con:config>
	</con:testStep>
	<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Subscription" searchProperties="true" id="d7224ab1-0cfd-4bae-b06b-87490390bdc2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: Subscription" id="9b4ea004-dc2f-46a2-b2f5-d8cc64a19d33">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Feature: Subscription");
				log.info("  As a Third Party");
				log.info("  I want to access Retail Customer data");
				log.info("  So that I can display Retail Customer data");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Third Party accesses Subscription" id="0d9050c0-d020-43fa-ab62-1bdf7cd9f42a">
		<con:settings/>
		<con:config><script><![CDATA[import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap<String, String> prefMap = new HashMap<String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	//*********************************************************
	log.info("Scenario: Third Party accesses Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	//driver.findElement(By.name("scope")).click();
	driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
	driver.findElement(By.name("next")).click();	

	driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.logStep("And I log in as Alan Turing into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(driver.DATA_CUSTODIAN_CONTEXT, "alan", "koala");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Authorizations")).click();	

	List<WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
		
	String subscription = rows.get(rows.size() - 1).getText();
	
//	driver.get(subscription);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should receive XML for that Subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.assertXpathExists("/:feed");

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,subscription,"test_subscription.xml");
	
	String strOutputDataFile = projectPath + "/../data/" + "test_subscription.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry[ns3:id='urn:uuid:" + usagePointUUID1.toLowerCase() + "']";
	
		XPathExpression expr = xpath.compile(strExpr);
		
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=1)
		{
			log.error("Response did not contain the correct number of Entries.");
			testRunner.fail("Response did not contain the correct number of Entries.")
		}
	}
	else
	{
		log.error("Unable to GET subscription resource.");
		testRunner.fail("Unable to GET subscription resource.")		
	}
	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

]]></script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Third Party customer accesses Authorizations page" id="cbec34e4-6a72-4ba4-9d36-fe2d4a18b8f1">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				//driver._bLogActions = true;

				try{
				//*********************************************************
				log.info("Scenario: Third Party customer accesses Authorizations page");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();

				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given an authorized Third Party");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();

				driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);

				//driver.findElement(By.name("scope")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();	
				driver.findElement(By.name("authorize")).click();	

				// logout of Third Party	
				driver.logout(ServiceEndpointThirdParty);

				// logout of DataCustodian	
				driver.logout(ServiceEndpointDataCustodian);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I log in as Alan Turing");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
				driver.assertContains("Welcome");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("And I navigate to the Authorizations page");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Authorizations")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see a list of Authorizations");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");

				List&lt;WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
			String subscription = rows.get(rows.size() - 1).getText();

			driver.AssertStringNotEmpty(subscription);

			List&lt;WebElement> rows2 = driver.FindElementsByXpath("//td[@class='subscription_id']");
		String access_token = rows2.get(rows2.size() - 1).getText();	

		driver.AssertStringNotEmpty(access_token);	

		} catch(Exception e) {
		testRunner.fail(driver.getErrorString())
		}

		//Close the browser
		driver.quit();
	</script></con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: OAuth" searchProperties="true" id="fb28775f-2f52-4441-9dd0-0b9b7e7aba02" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: OAuth" id="b5eff940-c23d-4289-b228-1babb20293a2">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Feature: OAuth");
				log.info("As Retail Customer, I should be able to see Data Custodian list");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list" id="b99a77a7-be4a-4f13-99cc-f8aed3afb22c">
		<con:settings/>
		<con:config>
			<script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

				//driver._bLogActions = true;

				try{

				//*********************************************************
				log.info("Scenario: Retail Customer views Data Custodian list");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();


				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I navigate to Data Custodian list");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see a list of Data Custodians");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("data_custodian");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list" id="0fcf0979-3b5c-4bcc-a218-bc81ad69f1e0">
		<con:settings/>
		<con:config>
			<script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				//driver._bLogActions = true;

				try{

				//*********************************************************
				log.info("Scenario: Retail Customer selects Data Custodian for the list");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();

				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I select a Data Custodian from the list");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see the Data Custodian login screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertUrlContains("/DataCustodian");
				driver.assertContains("Login");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer selects Scope" id="e9df54bd-6caf-4538-93bf-69283bdeb3df">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				//driver._bLogActions = true;

				try{

				//*********************************************************
				log.info("Scenario: Retail Customer selects Scope");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();

				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I select a Data Custodian from the list");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();	
				driver.findElement(By.name("Data_custodian")).click();	
				driver.findElement(By.name("next")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see the Data Custodian login screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertUrlContains("/DataCustodian");
				driver.assertContains("Login");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();
			</script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party" id="363dc94b-475c-48eb-a850-6528391514df">
		<con:settings/>
		<con:config><script>import org.openqa.selenium.*;
				import org.greenbutton.cmd.utils.DriverHelper;

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
				def BaseURL = project.getPropertyValue("BaseURL")
				def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
				def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
				def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
				def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
				def TestManager=project.getPropertyValue("TestManager")
				def TestManagerPW=project.getPropertyValue("TestManagerPW")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
				def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
				def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
				def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


				DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


				//driver._bLogActions = true;

				try{

				//*********************************************************
				log.info("Scenario: Retail Customer authorizes Third Party");
				//*********************************************************
				// reset DB : run library groovy script
				testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
				// Browser Init
				driver.Before();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Given a Retail Customer with Usage Points");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
				driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

				// upload usage point file
				driver.findElement(By.linkText("Upload")).click();	
				driver.findElement(By.name("file")).sendKeys(TestFile);

				driver.findElement(By.name("upload")).click();	
				driver.assertDoesNotContain("Unable to process file");

				// add usage point linkage
				driver.findElement(By.linkText("Customer List")).click();
				driver.findElement(By.linkText(TestRetailCustomer)).click();	
				driver.findElement(By.partialLinkText("Add Usage")).click();	
				driver.findElement(By.id("UUID")).clear();
				driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
				driver.findElement(By.name("create")).click();


				driver.logout(ServiceEndpointDataCustodian);

				driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I select a Data Custodian from the list");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.linkText("Data Custodians")).click();
				driver.findElement(By.name("Data_custodian")).click();
				driver.findElement(By.name("next")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see the Data Custodian login screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertUrlContains("/DataCustodian");
				driver.assertContains("Login");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I log into Data Custodian");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
				driver.findElement(By.name("submit")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see Scope selection screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Select Scope");
				driver.assertContains("FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I select Scopes");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//driver.findElement(By.className("scope")).click();	
				//driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();
				driver.findElement(By.xpath("//input[@value='FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13']")).click();
				driver.findElement(By.name("next")).click();	

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see authorization screen");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Please Confirm");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("When I authorize Third Party");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//driver.findElement(By.name("authorize")).click();
				driver.findElement(By.name("scope.FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
				driver.findElement(By.name("authorize")).click();

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.logStep("Then I should see all my authorizations");
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				driver.assertContains("Authorizations");
				driver.assertContains("data_custodian");
				driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				}

				//Close the browser
				driver.quit();
			</script></con:config>
	</con:testStep>
	<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="API" searchProperties="true" id="545b3d0d-00cc-4724-98ae-351af13fccb5">
	<con:description>API Tests based on Role</con:description>
	<con:settings/>
	<con:testStep type="calltestcase" name="Run TestCase EstablishTwoSubscriptions" id="6056be9c-9f27-4a40-afda-54c8f65a1ad2">
		<con:settings/>
		<con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:targetTestCase>842a41c8-96fb-4b15-bab5-c26d1f3f0dba</con:targetTestCase>
			<con:properties/>
			<con:returnProperties/>
			<con:runMode>PARALLELL</con:runMode>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="Feature: Data Custodian Admin API" id="a49facff-60da-4564-a2ee-f1aa635a36ef">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Feature: Data Custodian Admin API");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="restrequest" name="GET Authorization Feed" id="0429cbaf-6560-4fda-accd-ac2407642972">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="72a7dd72-5f8a-40e9-b6cc-8d8474ceb630">
			<con:configuration>
				<codes>200</codes>
			</con:configuration>
		</con:assertion>
		<con:assertion type="GroovyScriptAssertion" id="0df54aaa-8d70-46e5-a448-a159ffdead78" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Authorization by Id" id="ca4dd883-a325-4175-bf78-f4cd759c22a9">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Authorization by Id" mediaType="Application/atom+xml" id="e624979d-efc3-4ebf-a27f-3f78b3284a68">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d91a33f0-31c3-40e6-9284-39297882c6bd">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="9a70499a-574b-405d-a2f8-f04cd53fac18" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="authorizationId" value="1"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET UsagePoint Feed - Request 1" id="464b26a6-bb25-42ac-8d02-7aef3f276e71">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint" methodName="GET UsagePoint Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET UsagePoint Feed - Request 1" mediaType="application/json" id="19aaf2a0-c8b0-45c3-b56b-3f17a2439839">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a74dd1ab-d4d4-4a67-bbd5-fab46e565650">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="a768c5c4-d1ba-48e5-a855-b05ac60c5cb6" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET UsagePoint by Id - Request 1" id="95ec5902-1584-4f19-861b-9af6a09209f6">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint/{usagePointId}" methodName="GET UsagePoint by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET UsagePoint by Id - Request 1" mediaType="application/json" id="60f67287-8953-45c9-872d-a7fc6eeb63af">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="071ed6f0-5a88-4b2f-971f-976ca72a0283">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="2f4aac25-5c34-466e-b3cc-aae89d198c08" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
	<con:parameterOrder>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
		<con:entry>subscriptionId</con:entry>
		<con:entry>usagePointId</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Feature: Third Party Admin API" id="3f2f5d2e-9013-402c-a9b0-921d2dce7152">
	<con:settings/>
	<con:config>
		<script>//******************************************************************************************************************
			//******************************************************************************************************************
			log.info("Feature: Third Party Admin API");
			//******************************************************************************************************************
			//******************************************************************************************************************
		</script>
	</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Authorization - third_party_access" id="b849bcd0-d3d4-4b25-aee5-e5b3e892b411">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Authorization - third_party_access" mediaType="Application/atom+xml" id="2e25d1dc-0123-4e61-affa-25b3f9e76c7e">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/5</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9141b2e2-d55d-4945-94e7-dcdf82a1c94c">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="3aaa354b-1059-4126-906a-bfd96dd84fe6" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
		<con:entry key="authorizationId" value="5"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Authorization - third_party_access of User Authorization Subscription 6" id="11f40459-398c-4564-a028-43b08205027c">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Authorization - third_party_access of User Authorization Subscription 6" mediaType="Application/atom+xml" id="92002a5d-0170-43d1-909c-77b1a7561881">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/6</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e39b62e6-a4c2-4f14-a8bc-1dcab636e1ab">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="ccc6acd6-1175-42b2-a0ed-89002bcd1421" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
		<con:entry key="authorizationId" value="6"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Authorization - third_party_access of User Authorization Subscription 5" id="13deb6c0-197e-43a1-b4bf-3617a1fd9308">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Authorization - third_party_access of User Authorization Subscription 5" mediaType="Application/atom+xml" id="3f666c37-42ab-4c66-8912-8bdcec095462">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/5</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a5505dea-6ad6-4c7b-bc8a-28f36f2b864a">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="34fda6b4-243d-41de-a93e-b3831f23fe10" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
		<con:entry key="authorizationId" value="5"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET Authorization - third_party_access of User Authorization for DC" id="51d4aef9-d0b3-45e6-9c9c-e68164fc63ce">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET Authorization - third_party_access of User Authorization for DC" mediaType="Application/atom+xml" id="831e70a1-b4b9-483e-97af-821617c3523f">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ac3cdebf-d702-41a1-8c1c-99e22032068a">
		<con:configuration>
			<codes>400,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
		<con:entry key="authorizationId" value="1"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET - Subscription/{subscriptionId}" id="72676b00-cd0f-4662-a906-dc401e6014d7">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}" methodName="Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET - Subscription/{subscriptionId}" mediaType="application/json" id="83faf171-f6e6-4569-98a5-0c1dcf080fe5">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/6</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="321b48d7-5754-4955-9647-c9cf949359b6">
		<con:configuration>
			<codes>400,404</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="subscriptionId" value="6" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>subscriptionId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Batch/Subscription/{subscriptionId}" id="9a97a49a-e246-4d54-a048-4ee0315d53c6">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Batch/Subscription/{subscriptionId}" mediaType="application/json" id="5e441930-970e-4fb0-bc37-2c3b53e912ba">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="53ac6e81-c7a6-466d-ab5c-3fc25b933c0b">
				<con:configuration>
					<codes>200</codes>
				</con:configuration>
			</con:assertion>
			<con:assertion type="GroovyScriptAssertion" id="60148089-eaf9-4c7d-a410-9a9cda2f4ac0" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<entry key="subscriptionID" value="1" xmlns="http://eviware.com/soapui/config"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET ServiceStatus" id="9e2a95d4-5903-428d-915b-e7cb7300b47f">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET ServiceStatus" mediaType="application/json" id="9fb50fa8-2298-438d-a767-e4a14ba72f10">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="07ba9a63-0f7b-4ca0-b761-94529387c081">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="c1c65ad4-ea6c-41a8-b394-61e74816592e" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="Authorization" value="Bearer ${#Project#third_party_access_token}" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Feature: Third Party User Subscription API" id="0f7fe020-b9d4-409e-a45c-b831cef3ac70">
	<con:settings/>
	<con:config>
		<script>//******************************************************************************************************************
			//******************************************************************************************************************
			log.info("Feature: Third Party User Subscription API");
			//******************************************************************************************************************
			//******************************************************************************************************************
		</script>
	</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET LocalTimeParameters Feed" id="6b7e45d9-e994-456b-a45c-3eab8e633e8f">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/LocalTimeParameters" methodName="GET LocalTimeParameters Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET LocalTimeParameters Feed" mediaType="application/json" id="03bcb211-9b20-4f13-a3d5-ba0897166d66">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/LocalTimeParameters</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7effecaa-41dc-4618-9525-8c8b31faa598">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="d116ddeb-afe3-4481-80b8-1efc8cae6a21" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="Authorization" value="Bearer ${#Project#userAccessToken2}" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>Content-Type</con:entry>
		<con:entry>Authorization</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET LocalTimeParameters by Id" id="f855b10a-d8e9-47ad-9522-200df2ad83d1">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/LocalTimeParameters/{localTimeParametersId}" methodName="GET LocalTimeParameters by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET LocalTimeParameters by Id" mediaType="application/json" id="992b9d02-a55d-4839-bbe9-fad896b41aeb">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/LocalTimeParameters/1</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="759d487b-f7ac-404a-824b-7f8390aac2f5">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="b38f8d23-e6e0-4742-9c1a-3ac6c3f2efcb" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
		<con:entry key="Content-Type" value="application/atom+xml"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>localTimeParametersId</con:entry>
		<con:entry>Content-Type</con:entry>
		<con:entry>Authorization</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Get root ReadingType feed" id="db82027c-868b-4aae-8ae7-bb649d84f878">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadingType" methodName="Get root ReadingType feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="Get root ReadingType feed" mediaType="application/json" id="b16590e5-f966-4442-be59-1354fbfc5c43">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadingType</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1348cd3f-04ca-45c3-8344-a427c9cfc1af">
				<con:configuration>
					<codes>200</codes>
				</con:configuration>
			</con:assertion>
			<con:assertion type="GroovyScriptAssertion" id="b16f7971-ac1c-49a5-8c41-253a9fc72492" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/>
			</con:parameters>
			<con:parameterOrder>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Get ReadingType by Id" id="1f680568-c2fe-4db9-b60b-2330829ca177">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadingType/{readingTypeId}" methodName="Get ReadingType by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="Get ReadingType by Id" mediaType="application/json" id="8a301fd3-0ea4-46bb-b3bd-6d934d52b57c">
			<con:encoding/>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadingType/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9fbb7639-f942-45bf-9f7b-23c9b40ce6eb">
				<con:configuration>
					<codes>200</codes>
				</con:configuration>
			</con:assertion>
			<con:assertion type="GroovyScriptAssertion" id="ad2cdc95-153e-48a8-b428-75596f03b00d" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/>
			</con:parameters>
			<con:parameterOrder>
				<con:entry>readingTypeId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET {subscriptionId} id 5 with AccessToken1" id="0b74777b-8816-463a-abd0-0a1b85572b0e">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET {subscriptionId} id 5 with AccessToken1" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2dbcd30c-709e-4a9b-af0c-a691c27c26cf">
				<con:configuration>
					<codes>200</codes>
				</con:configuration>
			</con:assertion>
			<con:assertion type="GroovyScriptAssertion" id="a093f8ac-b37c-433e-8e57-83fdf25fa535" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<con:entry key="subscriptionID" value="5"/>
				<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET {subscriptionId} id 6 with AccessToken1" id="dcabc108-2c09-4089-a978-433d5e866486">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET {subscriptionId} id 6 with AccessToken1" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/6</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9e2256d5-6fd0-4095-b272-baa4e4d7c162">
				<con:configuration>
					<codes>400,403</codes>
				</con:configuration>
			</con:assertion>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
				<con:entry key="subscriptionID" value="6"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET {subscriptionId} User 6 with AccessToken2" id="0f4d5dbd-d3bd-4cbb-9b06-62f120ea08ce">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET {subscriptionId} User 6 with AccessToken2" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/6</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a49b7a93-aba1-46c1-a07e-45c12f37d253">
				<con:configuration>
					<codes>200</codes>
				</con:configuration>
			</con:assertion>
			<con:assertion type="GroovyScriptAssertion" id="caab02de-bd1d-420c-9178-b155238076f2" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<con:entry key="subscriptionID" value="6"/>
				<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET {subscriptionId} id 5 with AccessToken2" id="d65c619e-feaf-4a95-9d10-fc519a280ed5">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET {subscriptionId} id 5 with AccessToken2" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="be750417-6d32-40a6-8f68-1b525baf15c6">
				<con:configuration>
					<codes>400,403</codes>
				</con:configuration>
			</con:assertion>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<con:entry key="subscriptionID" value="5"/>
				<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET UsagePoint Path by Id" id="91b9860c-36dc-4e05-881e-5b0cd4a05a2e">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint/{usagePointId}" methodName="GET UsagePoint by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET UsagePoint Path by Id" mediaType="application/json" id="60f67287-8953-45c9-872d-a7fc6eeb63af">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8db4c452-27d7-46ce-be3b-a061e78f1ecf">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="26ee4529-61cc-432e-bf85-de7f9f4a4010" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
		<con:entry key="usagePointId" value="1"/>
		<con:entry key="subscriptionId" value="5"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
		<con:entry>subscriptionId</con:entry>
		<con:entry>usagePointId</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET MeterReading Feed by Path" id="d9127290-aa27-49cf-a23f-1ffeaa6aa4eb">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint/{usagePointId}/MeterReading" methodName="GET MeterReading Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET MeterReading Feed by Path" mediaType="application/json" id="f5aa923b-979f-4e19-8939-779f508ba6b3">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/6/UsagePoint/2/MeterReading</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="15a4bf7b-a4f6-4344-a84b-1a124235c124">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:assertion type="GroovyScriptAssertion" id="52663891-4c17-427c-8502-c930d57614e8" name="Script Assertion"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
		<con:entry key="usagePointId" value="2"/>
		<con:entry key="subscriptionId" value="6"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Feature: Upload Admin API" id="57b10e6c-76db-4b63-a281-74f41d82e6fa">
	<con:settings/>
	<con:config>
		<script>//******************************************************************************************************************
			//******************************************************************************************************************
			log.info("Feature: Upload API");
			//******************************************************************************************************************
			//******************************************************************************************************************
		</script>
	</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET ServiceStatus with Upload_Access_Token" id="0455f0f1-60db-4296-a17e-4dbb1b8a6784">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET ServiceStatus with Upload_Access_Token" mediaType="application/json" id="57584ac3-ef1f-4024-b18d-16222bbf47d5">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="dd3f7979-9335-49c3-91b4-32e178e06977">
		<con:configuration><codes>200</codes></con:configuration>
	</con:assertion>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="Authorization" value="Bearer ${#Project#upload_access_token}" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Feature: Registration Third Party API" id="e19b7e40-16fd-4107-b1f3-9be4313d9cd2">
	<con:settings/>
	<con:config>
		<script>//******************************************************************************************************************
			//******************************************************************************************************************
			log.info("Feature: Registration Third Party API");
			//******************************************************************************************************************
			//******************************************************************************************************************
		</script>
	</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] registration_third_party_access_token GET ServiceStatus" id="f5e3614f-ef56-4e0d-8081-59578c52f087">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] registration_third_party_access_token GET ServiceStatus" mediaType="application/json" id="99772be0-c00d-4c7b-a94f-c28612400817">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fcaa7b23-43b6-42c1-9a9a-6df7faf41c4c">
		<con:configuration>
			<codes>403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
	<con:parameterOrder>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:properties/>
</con:testSuite>

<con:testSuite name="RonsSandbox" id="fc6d73c0-e0f3-4cc4-a717-2bd30d6bcbfe">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify SFTP Bulk" searchProperties="true" id="7277e322-f7e7-4d3a-b282-75d7dc56463e">
		<con:settings/>
		
		<con:testStep type="restrequest" name="Sim POST Notify SFTP Bulk" id="ff38b066-1220-4a4a-82d9-0e31c437a63d"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Sim POST Notify SFTP Bulk" mediaType="application/xml" postQueryString="false" id="4e3ec003-3e58-4bb3-b982-b3dee3a92998"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>sftp://localhost/home/bitnami/git/OpenESPI-GreenButtonCMDTest/SOAPUI/sampledata/BatchBulk.xml
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="45f58593-6728-47fd-bfb3-ca49456508e3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/>
	</con:testCase>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify REST Bulk" searchProperties="true" id="840f1422-a75b-44c6-84c7-6d1f45909a85"><con:settings/><con:testStep type="restrequest" name="Sim POST Notify REST Bulk" id="808a6e9e-0a90-45c8-ab81-9f788766e576"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Sim POST Notify REST Bulk" mediaType="application/xml" postQueryString="false" id="d101ef00-7121-4f56-9760-11fd160b82c0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Bulk/1
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="98e7f937-82b9-4687-9831-e6a215060cc9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify REST ApplicationInformation" searchProperties="true" id="0dff3e4a-0b1e-44c5-b4a9-ecf17f889b5e"><con:settings/><con:testStep type="restrequest" name="POST - Sim notify : REST" id="0aa69610-39ff-402b-b9e1-23a85f3897ce"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - Sim notify : REST" mediaType="application/xml" postQueryString="false" id="e55cc426-8a78-4ea6-a96a-575dcc56f05f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/2
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="42ba2be0-2674-44b7-a48e-1975c0cc2006"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify SFTP ApplicationInformation" searchProperties="true" id="9218dd46-d405-4273-a60a-ac5a36a7198c"><con:settings/><con:testStep type="restrequest" name="POST - Sim notify : SFTP" id="7b5a4e48-ebaa-4dbf-9f28-0ae65bcf20e3"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - Sim notify : SFTP" mediaType="application/xml" postQueryString="false" id="37b2ce51-71dd-4b95-a4f3-b2aa8b03f11e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>sftp://localhost/home/bitnami/git/OpenESPI-GreenButtonCMDTest/SOAPUI/sampledata/ApplicationInformation.xml
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="aae46a5f-c8c9-4fec-bc32-8aabbfdf52c2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify REST Authorization" searchProperties="true" id="1a1ae686-efea-474d-a4d0-9b5f869dd6b7"><con:settings/><con:testStep type="restrequest" name="POST - Sim notify : REST" id="c094e61e-1cf4-455e-9b1d-76cc9f789d4e"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - Sim notify : REST" mediaType="application/xml" postQueryString="false" id="e0ed9c26-8d9c-47b7-9fe9-fb5b40094b87"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4bfe7b83-9ae6-49bc-ad97-9ea0f2e246c5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify SFTP Authorization" searchProperties="true" id="5958c534-76cb-43df-a24f-8c20cce2aa40"><con:settings/><con:testStep type="restrequest" name="POST - Sim notify : SFTP" id="e3dcad38-dcb9-450d-8d62-f1c5b5ea86e2"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - Sim notify : SFTP" mediaType="application/xml" postQueryString="false" id="75277e7f-0225-4472-bcc5-4844d91719e2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>sftp://localhost/home/bitnami/git/OpenESPI-GreenButtonCMDTest/SOAPUI/sampledata/Authorizations.xml
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="915becd8-8d69-46c2-92e8-e7485702acfb"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify REST Subscription" searchProperties="true" id="6154aac2-4399-41a9-be4c-06c2e58cd59c"><con:settings/><con:testStep type="restrequest" name="POST - Sim notify : REST" id="1321893c-96b3-46f0-84a0-559b699b3ea1"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - Sim notify : REST" mediaType="application/xml" postQueryString="false" id="ab5b40f7-ce9e-4b8d-bf54-442eb0ca56a0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0a0f0a92-7a3f-409a-8813-4c6e4defbe21"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sim POST Notify SFTP Subscription" searchProperties="true" id="3bed03af-dbdf-4aa0-a059-bdf61bf074de"><con:settings/><con:testStep type="restrequest" name="POST - Sim notify : SFTP" id="aa31beba-d2a9-4728-8870-d66b1f0f39a9"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#notificationUri}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - Sim notify : SFTP" mediaType="application/xml" postQueryString="false" id="e3e203aa-0555-47c7-bd40-a526d93316fa"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#NotificationEndpoint}</con:endpoint><con:request>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;espi:BatchList xmlns:espi="http://naesb.org/espi">
&lt;espi:resources>sftp://localhost/home/bitnami/git/OpenESPI-GreenButtonCMDTest/SOAPUI/sampledata/Authorizations.xml
&lt;/espi:resources>
&lt;/espi:BatchList></con:request><con:originalUri>http://localhost/DataCustodian/localhost:8081/ThirdParty/espi/1_1/Notification</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ed14c8cd-687a-46f9-8c75-ee2200c4ce0b"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="454fa731-3c08-4ecd-861a-f6bdcd5e3a85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CodeTest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="URIChange" id="f5681dda-1abb-4b01-9827-4a8c274b7958"><con:settings/><con:config><script>
import groovyx.net.http.HTTPBuilder

def project  = testRunner.testCase.testSuite.project;

String strOrigURIAA = "https://api.pge.com/GreenButtonConnect/espi/1_1/resource/Batch/Subscription/403880?correlationID=e3be20d1-f624-47ae-a387-9def2f920e50";
URI aURI = new URI(strOrigURIAA);


String strOrigURI = strOrigURIAA;
String strURI = "http://" + aURI.getHost()+ ":" + project.getPropertyValue("proxyOutPort") + "/" + aURI.getPath();
String strSrch = "?";

log.info("Qest=" + strSrch);
						
int iPos = strOrigURI.indexOf(strSrch);
log.info ("pos=" + iPos);

String strQry = strOrigURI.substring(iPos + 1);
log.info "strQry =" + strQry;
						
if(strQry !=null &amp;&amp; !strQry.isEmpty()){
	strURI = strURI + "?" + strQry;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="MultiFeedChange" id="968da514-a082-408d-a669-266326a7c5e9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;

import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);

String fileAContents = new File('/home/ubuntu/rons/Files/chunkA.xml').text;
String fileBContents = new File('/home/ubuntu/rons/Files/chunkB.xml').text;

// SOURCE A
try{
	holderSourceA = groovyUtils.getXmlHolder(fileAContents);
	
} catch(org.apache.xmlbeans.XmlException e) {
	testRunner.fail("fail");
	return 2;
}

holderSourceA.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

def feedNodeSourceA;

try{
	feedNodeSourceA = holderSourceA.getDomNode("//atom:feed");
} catch(org.apache.xmlbeans.XmlException e) {
	testRunner.fail("fail");
	return 3;
}

for (item in feedNodeSourceA.getChildNodes()) {
	if(item.getNodeName()=="ProgramIdMappings") {
		item.parentNode.removeChild(item);
		break;
	}
}

def docSourceA = feedNodeSourceA.getOwnerDocument();

// SOURCE B
try{
	holderSourceB = groovyUtils.getXmlHolder(fileBContents);
	
} catch(org.apache.xmlbeans.XmlException e) {
	testRunner.fail("fail");
	return 2;
}

holderSourceB.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

def feedNodeSourceB;

try{
	feedNodeSourceB = holderSourceB.getDomNode("//atom:feed");
} catch(org.apache.xmlbeans.XmlException e) {
	testRunner.fail("fail");
	return 3;
}

// copy childern from from src B to scr A
for (item in feedNodeSourceB.getChildNodes()) {
	log.info("adding child from src B:" + item.getNodeName());
	if(item.getNodeName()!="ProgramIdMappings") {
		def importNode = docSourceA.importNode(item,true);
		feedNodeSourceA.appendChild(importNode);
	}
}

log.info("xml:" + holderSourceA.getXml());

new File("/home/ubuntu/rons/Files/output.xml").write(holderSourceA.getXml());

String xmlStrToValidate = new File('/home/ubuntu/rons/Files/output.xml').text;


String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = xmlStrToValidate;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);

return 0;
</script></con:config></con:testStep><con:testStep type="groovy" name="testGarbageCollection" id="0f4f1479-d0e1-479a-b569-19340ab2f334"><con:settings/><con:config><script>System.runFinalization();
Runtime.getRuntime().gc();</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/>
</con:testSuite>
<con:testSuite name="MartySandbox" id="508479c0-72e2-43bb-8f36-77f924943cc7">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Resources" searchProperties="true" id="238c2543-ee6b-41e3-befe-0669a7b1a6c2">
		<con:settings/>
		
		<con:testStep type="httprequest" name="GetPGEClientAccessTokens" id="9de8d645-09ec-4305-b436-cff75ec5bbe6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="GetPGEClientAccessTokens" postQueryString="false" mediaType="application/xml" id="c4761ff3-3d85-41b8-9826-93a2c62cdaaa" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>$(#Project#ServiceEndpoint)</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Client Credentials - POST ThirdParty Request" id="1afb4b0b-d51c-41d0-9e7e-e6bc0fd8b8d3"><con:settings/><con:config service="ESPI Resources" resourcePath="" methodName="Client Credentials" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Client Credentials - POST ThirdParty Request" mediaType="application/json" postQueryString="false" id="9ba40594-5ba1-490b-b4b8-0547108733e3">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#authorizationServerProxy}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
	<con:credentials>
		<con:username>${#Project#client_id}</con:username>
		<con:password>${#Project#client_secret}</con:password>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
  <con:entry key="scope" value="FB=34_35"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
	<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RunGenericResourceGet" id="46502172-3de4-4bae-b3fe-3d9e0e7679cc"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def project = testRunner.testCase.testSuite.project
def auth  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GenericResourceGet'];




tc.setPropertyValue("uri", auth.getPropertyValue("resourceURI"));
tc.setPropertyValue("token",  auth.getPropertyValue("access_token"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("response");
//returnCode = tc.getPropertyValue("returncode");
</script></con:config></con:testStep><con:properties/>
	</con:testCase>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestSSL" searchProperties="true" id="974785bd-d7aa-45d7-b757-58e974068e18"><con:settings/><con:testStep type="groovy" name="testssl" id="19a91516-7ed6-4e21-a5f2-c82f5a230a8f"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

def sslhost = project.getPropertyValue( "authorizationServer" );
def opensslCmd = project.getPropertyValue("opensslCmd");
sslport="443";

//def cmdSubString = "s_client -connect " + sslhost + ":" + sslport;
def cmdSubString = "s_client -tls1_2 -connect " + sslhost + ":" + sslport;
def command = opensslCmd + " " + cmdSubString;

log.info command;


tc.setPropertyValue("cmd",command);
tc.setPropertyValue("path",".");
tc.setPropertyValue("timeout","2");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);

assert true;
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase" id="097e7bc4-df69-43be-8ba5-b18263c0e1a0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a3ec95e4-9f8e-40f3-a3ce-37609ecfe6e3</con:targetTestCase><con:properties><con:property><con:name>stdout</con:name><con:value>total 11508
drwxr-xr-x  5 bitnami bitnami     4096 Dec 27 22:09 .
drwxrwxr-x 10 bitnami bitnami     4096 Jul 15 15:17 ..
drwxr-xr-x  2 bitnami bitnami     4096 Apr  9  2014 actions
-rw-rw-r--  1 bitnami bitnami     9422 Dec 28 18:13 error.log
drwxr-xr-x  2 bitnami bitnami     4096 Dec 27 19:11 ext
drwxr-xr-x  2 bitnami bitnami     4096 Apr  9  2014 listeners
-rwxr-xr-x  1 bitnami bitnami     1918 Apr  9  2014 loadtestrunner.sh
-rwxr-xr-x  1 bitnami bitnami     1889 Apr  9  2014 mockservicerunner.sh
-rwxr-xr-x  1 bitnami bitnami     1872 Apr  9  2014 securitytestrunner.sh
-rwxr-xr-x  1 bitnami bitnami    10562 Apr  9  2014 SoapUI-5.0.0
-rw-r--r--  1 bitnami bitnami 11519067 Apr  9  2014 soapui-5.0.0.jar
-rw-rw-r--  1 bitnami bitnami      516 Jul 15 15:17 SoapUI-5.0.0.vmoptions
-rw-rw-rw-  1 bitnami bitnami   100546 Dec 29 07:59 soapui-errors.log
-rw-rw-rw-  1 bitnami bitnami    34611 Dec 29 08:04 soapui.log
-rw-r--r--  1 bitnami bitnami     3606 Apr  9  2014 soapui-log4j.xml
-rwxr-xr-x  1 bitnami bitnami     2326 Apr  9  2014 soapui.sh
-rw-r--r--  1 bitnami bitnami    27186 Apr  9  2014 soapui-splash.png
-rw-r--r--  1 bitnami bitnami     1322 Apr  9  2014 starter-page.html
-rwxr-xr-x  1 bitnami bitnami     1887 Apr  9  2014 testrunner.sh
-rwxr-xr-x  1 bitnami bitnami     1883 Apr  9  2014 toolrunner.sh
-rwxr-xr-x  1 bitnami bitnami     1896 Apr  9  2014 wargenerator.sh
</con:value></con:property><con:property><con:name>cmd</con:name><con:value>ls -al</con:value></con:property><con:property><con:name>path</con:name><con:value>.</con:value></con:property><con:property><con:name>stderr</con:name><con:value>depth=1 C = US, O = DigiCert Inc, CN = DigiCert Secure Server CA verify error:num=20:unable to get local issuer certificate verify return:0 </con:value></con:property><con:property><con:name>returncode</con:name><con:value>124</con:value></con:property><con:property><con:name>timeout</con:name><con:value>0</con:value></con:property><con:property><con:name>uri</con:name></con:property><con:property><con:name>token</con:name></con:property></con:properties><con:returnProperties><con:entry>stdout</con:entry><con:entry>stderr</con:entry><con:entry>returncode</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>cmd</con:name><con:value>openssl s_client -tls1_2 -connect services.greenbuttondata.org:443</con:value></con:property><con:property><con:name>path</con:name><con:value>.</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetupForTest" searchProperties="true" id="7e6f4176-bacb-4455-91f3-c970b4c7898b"><con:settings/><con:testStep type="groovy" name="setup" id="67e36b32-f28c-4a42-a4b2-ef9f061757cf"><con:settings/><con:config><script>testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfig']);
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);
testRunner.testCase.testSuite.project.testSuites['Library'].testCases['UploadTestFile GUI'].run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
testRunner.testCase.testSuite.project.testSuites['[FB_01] Common'].testCases['FND001 Initial Test Configuration'].run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
assert true;</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b5a5d827-23bd-4b87-a1c7-c3c4f9babc41" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestNotify" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="SendNotification" id="a71df42c-e37c-438f-b0bb-038ba3d1ec92"><con:settings/><con:config service="ESPI Resources" methodName="POST" resourcePath="/${#Project#notificationUri}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SendNotification" id="fd941070-d72a-453b-a912-697b177120e0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://localhost:8444/ThirdParty</con:endpoint><con:request><![CDATA[<BatchList>
<resources>http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation</resources>
<resources>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization</resources>
</BatchList>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/Notification/Notification</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TestGenericGet" id="8f98f818-2a9e-4849-b1fb-1cf9f7706cb2"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GenericResourceGet'];

tc.setPropertyValue("uri","http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation");
tc.setPropertyValue("token","2a85f4bd-30db-4b7d-8f41-b046b0566cb3 ");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("response");

log.info strResult;
return true;</script></con:config></con:testStep><con:testStep type="groovy" name="TestSFTP Parse" id="e2b2597c-7752-44dc-9822-d5c6c4161849"><con:settings/><con:config><script>def aUri = new URI("sftp://user@openespivm:8443/DataCustodian");


log.info "Protocol: " + aUri.getScheme();
log.info "Host: " + aUri.getHost();
log.info "User: " + aUri.getUserInfo();

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GenericResourceGet'];

tc.setPropertyValue("uri",aURI);
tc.setPropertyValue("token","");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("response");
</script></con:config></con:testStep><con:properties><con:property><con:name>notification</con:name><con:value>https://localhost:8444/ThirdParty/espi/1_1/Notification</con:value></con:property></con:properties></con:testCase><con:properties>
		<con:property>
			<con:name>sessionid</con:name>
			<con:value>null</con:value>
		</con:property>
	</con:properties>
</con:testSuite>

<con:testSuite name="Dons Sandbox" id="ea56bae1-54ea-4a1c-9e88-ec3a7920958e">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestTwoTokens" searchProperties="true" id="5e39f0ac-f227-48e3-b3f3-45e71f5273de">
		<con:settings/>
		<con:testStep type="groovy" name="StartDriver" id="3dce3d14-cbaa-46af-9db1-5130f0033661">
			<con:settings/>
			<con:config>
				<script>/////////////////////////////////////////////////////////
					// Note: Generated by capture using Selenium in FF. 
					// Export to Java / JUnit 4 / WebDriver
					// Copy and paste into Groovy Script with minor tweaks
					/////////////////////////////////////////////////////////

					/////////////////////////////////////////////////////////
					// Need these imports to run tests
					/////////////////////////////////////////////////////////
					import org.openqa.selenium.By
					import org.openqa.selenium.Keys;
					import org.openqa.selenium.WebDriver
					import org.openqa.selenium.WebElement
					import org.openqa.selenium.firefox.FirefoxDriver

					import java.util.concurrent.TimeUnit;
					import java.util.regex.Pattern;
					import java.util.concurrent.TimeUnit;
					import org.junit.*;
					import static org.junit.Assert.*;
					import static org.hamcrest.CoreMatchers.*;

					import org.greenbutton.cmd.utils.DriverHelper;

					/////////////////////////////////////////////////////////
					// get variables from the project Custom Properties
					/////////////////////////////////////////////////////////
					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath
					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


					/////////////////////////////////////////////////////////
					// Create a new instance of the Firefox driver
					/////////////////////////////////////////////////////////
					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
					driver._bLogActions = true;

					if( context["driver"] == null )
					context["driver"] = driver

					return
					//Then in later steps you can retrieve it as context["driverInstance"] 
				</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="Set Access Tokens" id="dafeb230-75ef-49f0-8b43-4cf42cb660c0">
			<con:settings/>
			<con:config>
				<script>/////////////////////////////////////////////////////////
					// Need these imports to run tests
					/////////////////////////////////////////////////////////
					import org.openqa.selenium.By
					import org.openqa.selenium.Keys;
					import org.openqa.selenium.WebDriver
					import org.openqa.selenium.WebElement
					import org.openqa.selenium.firefox.FirefoxDriver

					import java.util.concurrent.TimeUnit;
					import java.util.regex.Pattern;
					import java.util.concurrent.TimeUnit;
					import org.junit.*;
					import static org.junit.Assert.*;
					import static org.hamcrest.CoreMatchers.*;
					import com.eviware.soapui.support.types.StringToStringMap;


					/////////////////////////////////////////////////////////
					// fetch driver from context
					/////////////////////////////////////////////////////////
					Object driver = context["driver"];

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath

					def BaseURL = project.getPropertyValue("BaseURL");
					def ServiceEndpoint=BaseURL+"/ThirdParty/home";
					List&lt;WebElement> rows;
				def teststep;

				log.info("Service Endpoint: " + ServiceEndpoint);

				try {
				/////////////////////////////////////////////////////////
				// run test step details
				/////////////////////////////////////////////////////////
				// open Data Custodian
				driver.get(ServiceEndpoint)

				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys("alan");
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys("koala");
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.linkText("Authorizations")).click();
				rows = driver.FindElementsByXpath("//td[@class='access_token']");
				String accessToken1 = rows.get(rows.size() - 1).getText();
				log.info("accessToken1:" +  accessToken1);
				project.setPropertyValue("userAccessToken1",accessToken1);
				driver.findElement(By.id("logout")).click();

				// set message parameters
				teststep = testRunner.testCase.getTestStepByName("GET Subscription 1");
				teststep.setPropertyValue("Authorization","Bearer "+ accessToken1);
				teststep.setPropertyValue("subscriptionId","1");


				driver.findElement(By.id("login")).click();
				driver.findElement(By.name("j_username")).clear();
				driver.findElement(By.name("j_username")).sendKeys("charles");
				driver.findElement(By.name("j_password")).clear();
				driver.findElement(By.name("j_password")).sendKeys("koala");
				driver.findElement(By.name("submit")).click();
				driver.findElement(By.linkText("Authorizations")).click();
				rows = driver.FindElementsByXpath("//td[@class='access_token']");
				String accessToken2 = rows.get(rows.size() - 1).getText();
				log.info("accessToken2:" +  accessToken2);
				project.setPropertyValue("userAccessToken2",accessToken2);
				driver.findElement(By.id("logout")).click();

				// set message parameters
				teststep = testRunner.testCase.getTestStepByName("GET Subscription 2");
				teststep.setPropertyValue("Authorization","Bearer "+ accessToken2);
				teststep.setPropertyValue("subscriptionId","2");


				} catch(Exception e) {
				testRunner.fail(driver.getErrorString())
				driver.quit();
				}
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="groovy" name="StopDriver" id="1f4828cb-55ce-4c5c-af59-a59ca9933809">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Note: Generated by capture using Selenium in FF. 
				// Export to Java / JUnit 4 / WebDriver
				// Copy and paste into Groovy Script with minor tweaks
				/////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import org.openqa.selenium.By
				import org.openqa.selenium.Keys;
				import org.openqa.selenium.WebDriver
				import org.openqa.selenium.WebElement
				import org.openqa.selenium.firefox.FirefoxDriver

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Pattern;
				import java.util.concurrent.TimeUnit;
				import org.junit.*;
				import static org.junit.Assert.*;
				import static org.hamcrest.CoreMatchers.*;



				/////////////////////////////////////////////////////////
				// Create a new instance of the Firefox driver
				/////////////////////////////////////////////////////////
				Object driver = context["driver"]

				//Close the browser
				driver.quit();

				//Then in later steps you can retrieve it as context["driverInstance"] 
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="restrequest" name="GET Subscription 1" id="4904023e-48d9-4744-af6e-42e7a84ec758">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET Subscription 1" mediaType="application/json" id="b16cbd05-c321-4fef-926e-b53c3abf1bbf">
				<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
				<con:request/>
				<con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="22f68af9-c9c4-4d1b-a40c-f2a295b746f1">
					<con:configuration>
						<scriptText>assert messageExchange.responseStatusCode == 200</scriptText>
					</con:configuration>
				</con:assertion>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
				<con:jmsPropertyConfig/>
				<con:parameters>
					<con:entry key="subscriptionID" value="1"/>
					<con:entry key="Authorization" value="Bearer bdd9b97b-b1cf-4b35-9c15-a14356930415"/>
					<con:entry key="subscriptionId" value="1"/>
				</con:parameters>
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:credentials>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:parameterOrder>
			<con:entry>subscriptionID</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Subscription 2" id="bddae553-f09a-4690-9e76-194f48b331c7">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Subscription 2" mediaType="application/json" id="bf8f43bd-efa2-4611-baa6-7ad04b4bee1d">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="2906d0f9-8190-4c77-9f49-83555947570c">
				<con:configuration>
					<scriptText>assert messageExchange.responseStatusCode == 200	</scriptText>
				</con:configuration>
			</con:assertion>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<con:entry key="Authorization" value="Bearer 14e9da63-b611-43a3-8010-b4830d789de4"/>
				<con:entry key="subscriptionID" value="2"/>
				<con:entry key="subscriptionId" value="2"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET Subscription 1 Wrong Access Token" id="e247f6a9-6402-4a51-b137-221a7db43b5c">
	<con:settings/>
	<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET Subscription 1 Wrong Access Token" mediaType="application/json" id="27621e24-8183-4cd7-9eba-bb9909b941e5">
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="c240652c-76c2-44e3-a025-7b4e17060a86">
				<con:configuration>
					<scriptText>assert messageExchange.responseStatusCode != 200</scriptText>
				</con:configuration>
			</con:assertion>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters>
				<con:entry key="Authorization" value="Bearer ${#Project#useraccesstoken2}"/>
				<con:entry key="subscriptionID" value="1"/>
				<con:entry key="subscriptionId" value="1"/>
			</con:parameters>
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:credentials>
		<con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:parameterOrder>
		<con:entry>subscriptionID</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Data Custodian Admin API" searchProperties="true" id="56b71304-c464-461c-bc2b-6e0a74d05b1e">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: Data Custodian Admin API" id="b08c2fbd-6ed6-4e9e-93b4-677460870e58">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Dons Sandbox Feature: Data Custodian Admin API");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="restrequest" name="GET MeterReading Feed by Path" id="86939ee4-3d06-4fde-9066-fe24c2c887a6">
		<con:settings/>
		<con:config service="ESPI Resources" methodName="Get root MeterReading feed" resourcePath="/${#Project#resourceUri}/MeterReading" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET MeterReading Feed by Path" mediaType="Application/atom+xml" id="79debf75-1b4c-4abf-854a-4e269239ce4e">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:encoding>UTF-8</con:encoding>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri>
		<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="056bc715-eef1-484d-8a0a-bc0cf8c4ca16">
			<con:configuration>
				<codes>401,403</codes>
			</con:configuration>
		</con:assertion>
		<con:credentials>
			<con:authType>No Authorization</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters>
			<con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
			<con:entry key="Content-Type" value="Application/atom+xml"/>
		</con:parameters>
	</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET /ApplicationInformation" id="9c2e6758-a90b-4270-96fd-ca20f62ce3b9">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation Feed" resourcePath="/${#Project#resourceUri}/ApplicationInformation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET /ApplicationInformation" mediaType="Application/atom+xml" id="b7f4154f-bf91-4ff4-b215-5d18ed74db1e">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="06aba6ff-2f25-4b3c-9f0c-3b932bd81710">
		<con:configuration>
			<codes>401,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Get /ApplicationInformation/{applicationInformationId} ID 1" id="35515cc0-6473-437e-adfe-f18b893cc95c">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="Get /ApplicationInformation/{applicationInformationId} ID 1" mediaType="Application/atom+xml" id="74c6ec0f-78d5-4200-a3b6-345f35f98831">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="11610b71-8ee7-47b1-b7d1-d437b3e12a10">
		<con:configuration>
			<codes>401,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
		<con:entry key="applicationInformationId" value="${#Project#applicationInformationId}"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 2" id="2552b9d9-5d1e-4eb6-9a06-dcc003b59744">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 2" mediaType="Application/atom+xml" id="6f6df154-245e-465f-af76-00d074e2dfa2">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="3c3edb43-f689-43ad-8dee-02d01ec9ead5">
		<con:configuration>
			<codes>401,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
		<con:entry key="applicationInformationId" value="2"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 3" id="40382418-c01c-42ec-be92-a94614d59e7c">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 3" mediaType="Application/atom+xml" id="5320d948-475d-4d08-ac81-c96d266f1b75">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="90551203-3802-4aec-8cbf-b748344486b8">
		<con:configuration>
			<codes>401,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
		<con:entry key="applicationInformationId" value="3"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 99" id="fcea7cf7-93ef-417f-8846-5a03fc94fe9e">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 99" mediaType="Application/atom+xml" id="8c2cb8c9-fc1c-4b4c-8559-86e05e4b915b">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="70f33134-e95f-44d4-a692-70922767293a">
		<con:configuration>
			<codes>401,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
		<con:entry key="applicationInformationId" value="99"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="POST /MeterReading" id="be6d5690-3577-43b2-ad24-51f5a24f2321">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="Post" resourcePath="/${#Project#resourceUri}/MeterReading" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="POST /MeterReading" mediaType="application/atom+xml" postQueryString="false" id="4d27785f-7c45-49a9-b757-d37f2d6e8506">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="RecordRequestRepresentations">true</con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="f0104471-5e16-4793-84d3-402bb832a24a">
		<con:configuration>
			<codes>400,401,403,415</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:attachment>
		<con:name>entry_MeterReading_2.xml</con:name>
		<con:contentType>application/atom+xml</con:contentType>
		<con:size>944</con:size>
		<con:contentId>entry_MeterReading_2.xml</con:contentId>
		<con:data>UEsDBBQACAgIAGdlK0UAAAAAAAAAAAAAAAAYAAAAZW50cnlfTWV0ZXJSZWFkaW5nXzIueG1sxVNNi9swEL3nVwjdHUn52CQm8eKkMfSwUNrspZei2JNErCIZabRp/n3lj7p0WXoqLAjBDO/Ne2+Q1o8/r5q8gvPKmg0VY04JmNJWypw39PlQJEv6mI3Wxk9TMOjuJOKNT8HXakMviHXKmJHgj2Przqxp0x4SKQPidruNb9MWMuF8znK0V5qNCCHtZFVlwZk0BFWlxWJRbIvpLMn5ap/M9ttdsnrgD0lRiHy+ysVil+/XrGcNE7QyL+Ti4DRIaltKfbEe0yVfcvZJotwFjzGZNK1PJn4I5sDb4Epg38LRl07VGPfA5uzZyzN8scogE+wJENxXkM1SmKDEgd5QD/pE2Qc46PVD/SHqsfxsYvkq9TZKvPRu4iURqv9qqVc83GsYtv6ODirUkBXqhACGPCkTEMheQ4lOlQrvZGeND9c2WfdwOsYwoLQxkMG20fQaJ+lfmTssewtu2XU4auUvUGUTLiaJ4MlkduA8bc/3jvQHM9BCXTVB/kH6jRh1Zfv7sl9QSwcI5hDMyn8BAACwAwAAUEsBAhQAFAAICAgAZ2UrReYQzMp/AQAAsAMAABgAAAAAAAAAAAAAAAAAAAAAAGVudHJ5X01ldGVyUmVhZGluZ18yLnhtbFBLBQYAAAAAAQABAEYAAADFAQAAAAA=</con:data>
		<con:id>9bd633ee-3d88-4ddf-8ec3-51dd36736ba2</con:id>
	</con:attachment>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="PUT /MeterReading/{meterReadingId} w/o Data" id="021572cd-f6be-4ffe-88ae-8b41272e23eb">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="Put" resourcePath="/${#Project#resourceUri}/MeterReading/{meterReadingId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="PUT /MeterReading/{meterReadingId} w/o Data" mediaType="application/atom+xml" postQueryString="false" id="f1217190-69a5-404b-bf77-414f75844817">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="RecordRequestRepresentations">true</con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="f95a7c2f-14af-415f-a741-d40638d798e6">
		<con:configuration>
			<codes>200,401,403,415</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}" xmlns="http://eviware.com/soapui/config"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Third Party Registration Admin API" searchProperties="true" id="0f0961eb-aa88-4112-9a96-77089b29bfc7">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: Third Party Registration Admin" id="f360e8b9-907d-4d64-a20a-f83aa5f48644">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Dons Sandbox Feature: Third Party Registration Admin API");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="restrequest" name="[NEG] GET MeterReading Feed by Path" id="1e5ff803-b99f-455e-9320-a69bcfac59d7">
		<con:settings/>
		<con:config service="ESPI Resources" methodName="Get root MeterReading feed" resourcePath="/${#Project#resourceUri}/MeterReading" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="[NEG] GET MeterReading Feed by Path" mediaType="Application/atom+xml" id="97a0ae78-9d8b-47f0-8941-9e80100959c7">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:encoding>UTF-8</con:encoding>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri>
		<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="26c2fd64-6e76-4ac6-8d09-5d0e907a3218">
			<con:configuration>
				<codes>200</codes>
			</con:configuration>
		</con:assertion>
		<con:credentials>
			<con:authType>No Authorization</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters>
			<con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
			<con:entry key="Content-Type" value="Application/atom+xml"/>
		</con:parameters>
	</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation" id="c30fb329-18dd-428c-bdcd-7054c88d2ad9">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation Feed" resourcePath="/${#Project#resourceUri}/ApplicationInformation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET /ApplicationInformation" mediaType="Application/atom+xml" id="017b2995-6f24-437d-9887-e2aab449ce98">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="86889d35-6cb5-4cdc-9c57-e826fa914ad6">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1" id="281004e1-a4e8-43df-a4f7-e1e0c6d55966">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1" mediaType="Application/atom+xml" id="72b8de38-081a-402a-b6ee-418bd09251f1">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="026b80fd-c86b-4479-baf7-41a3b24f81ac">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
		<con:entry key="applicationInformationId" value="${#Project#applicationInformationId}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 2" id="174ca920-fb42-400b-99fc-f1c20c320b23">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 2" mediaType="Application/atom+xml" id="8442b72c-c148-4021-9c79-5b1853e35f8a">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="f23afa16-042f-4d98-b05c-a7da3e959261">
		<con:configuration>
			<codes>401,403</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
		<con:entry key="applicationInformationId" value="2"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3" id="4b2b44a1-afdb-4e05-a977-4679bd0fe20d">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3" mediaType="Application/atom+xml" id="247b8331-f264-4a94-8fe3-dd6bc95eaeaf">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="3f1b232a-5aa8-415c-8bcd-4ce228c31b56">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
		<con:entry key="applicationInformationId" value="3"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99" id="a6288f8f-1961-4279-869b-53f942a57d9f">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99" mediaType="Application/atom+xml" id="ea5bcb3e-7db6-4345-994c-9c2ddd887b5b">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="8ecc17c5-c18f-4b7b-a867-f02fffda5876">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
		<con:entry key="applicationInformationId" value="99"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Admin API" searchProperties="true" id="3ffbcd28-3bac-4e89-ba41-682f6e50b43c">
	<con:settings/>
	<con:testStep type="groovy" name="Feature: Upload Admin API" id="ad6e2233-03d3-41c8-8c96-05bd94647142">
		<con:settings/>
		<con:config>
			<script>//******************************************************************************************************************
				//******************************************************************************************************************
				log.info("Dons Sandbox Feature: Upload Admin API");
				//******************************************************************************************************************
				//******************************************************************************************************************
			</script>
		</con:config>
	</con:testStep>
	<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation" id="5deb60b8-1075-47ee-b237-ad81007fd396">
		<con:settings/>
		<con:config service="ESPI Resources" methodName="GET ApplicationInformation Feed" resourcePath="/${#Project#resourceUri}/ApplicationInformation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="[NEG] GET /ApplicationInformation" mediaType="Application/atom+xml" id="afe1bd11-1a5d-436f-aa37-abd60898ecfd">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:encoding>UTF-8</con:encoding>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri>
		<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="4fc5c56e-a997-4d79-a40a-d4ff4ca2d482">
			<con:configuration>
				<codes>200</codes>
			</con:configuration>
		</con:assertion>
		<con:credentials>
			<con:authType>No Authorization</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters>
			<con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
			<con:entry key="Content-Type" value="Application/atom+xml"/>
		</con:parameters>
	</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1" id="37c47f69-7c95-4e4b-ac9a-976e214894cb">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1" mediaType="Application/atom+xml" id="1a166859-0ec4-4ca6-863f-b7f071718ba6">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="d170a60c-cd78-4e39-9f18-3dec75abb1af">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
		<con:entry key="applicationInformationId" value="${#Project#applicationInformationId}"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 2" id="519d54db-2c8e-41b4-924c-9b0dab51f94e">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 2" mediaType="Application/atom+xml" id="4b0171d4-37e7-4d3a-9d7b-7ac45e644927">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="11f0f7a3-7f7b-4b8e-b230-10ea08fef29e">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
		<con:entry key="applicationInformationId" value="2"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3" id="d1f79744-f3f7-4555-93fb-1b798c5c352e">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3" mediaType="Application/atom+xml" id="97383b11-7199-41a7-90cc-e0c9fd91824d">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="38ecfc36-6c93-4533-977f-b1fada4cfba8">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
		<con:entry key="applicationInformationId" value="3"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99" id="a2b96905-dc44-49e2-9f81-b444618059ae">
	<con:settings/>
	<con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:restRequest name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99" mediaType="Application/atom+xml" id="c8c4ca82-65da-4a68-809a-3152f07015ad">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:encoding>UTF-8</con:encoding>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri>
	<con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="6ff9e119-4888-45db-acd0-882b7eceba83">
		<con:configuration>
			<codes>200</codes>
		</con:configuration>
	</con:assertion>
	<con:credentials>
		<con:authType>No Authorization</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
		<con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
		<con:entry key="Content-Type" value="Application/atom+xml"/>
		<con:entry key="applicationInformationId" value="99"/>
	</con:parameters>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_14] OAuth 2.0 [RFC6749] Compliance" searchProperties="true" id="9ec4c3ed-91e5-4b79-9273-3c9dec741e34">
	<con:settings/>
	<con:testStep type="groovy" name="[NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter)" id="9a252ac3-f0d3-418b-ba6c-a5c443d4229b">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import groovyx.net.http.Method
				import groovyx.net.http.ContentType
				import groovyx.net.http.HTTPBuilder
				import groovyx.net.http.HttpResponseDecorator
				import groovyx.net.http.HttpResponseException

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath


				def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

				def clientId = project.getPropertyValue("client_id")
				def redirectUri = project.getPropertyValue("redirect_uri")
				def scope = project.getPropertyValue("scope")
				def state = project.getPropertyValue("state")

				public class RestConnector {
				private String baseUrl
				private HTTPBuilder httpBuilder
				private List&lt;String> cookies

			RestConnector(String url) {
			this.baseUrl = url
			this.httpBuilder = initializeHttpBuilder()
			this.cookies = []
			}

			public def request(Method method, ContentType contentType, String url, Map&lt;String, Serializable> params) {
		debug("Send $method request to ${this.baseUrl}$url: $params")
		httpBuilder.request(method, contentType) { request ->
	uri.path = url
	uri.query = params
	headers['Cookie'] = cookies.join(';')
	}
	}

	private HTTPBuilder initializeHttpBuilder() {
	def httpBuilder = new HTTPBuilder(baseUrl)

	httpBuilder.handler.success = { HttpResponseDecorator resp, reader ->
resp.getHeaders('Set-Cookie').each {
String cookie = it.value.split(';')[0]
debug("Adding cookie to collection: $cookie")
cookies.add(cookie)
}
debug("Response: ${reader}")
return reader
}
return httpBuilder
}

private debug(String message) {
System.out.println(message) //for Gradle
}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////


log.info("*****************************************************************************************************");
log.info("   RESET Data Custodian Database ");
log.info("*****************************************************************************************************");	

testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);


log.info("*****************************************************************************************************");
log.info("   Login Retail Customer -- Alan ");
log.info("*****************************************************************************************************");	

restConnector = new RestConnector(ServiceEndpoint)

Map params = [j_username: TestRetailCustomer, j_password: TestRetailCustomerPW]

restConnector.request(Method.POST, ContentType.URLENC, '/DataCustodian/j_spring_security_check', params)
assert !(restConnector.cookies.empty)


log.info("*****************************************************************************************************");
log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
log.info("*****************************************************************************************************");	

params = [client_id: clientId, redirect_uri: redirectUri, scope: scope, state: state]

restConnector.request(Method.GET, ContentType.HTML, '/DataCustodian/oauth/authorize', params)

return;

</script>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LoginRetailCustomerAlan" searchProperties="true" id="07f212e3-1599-4361-8e95-63cdaeb51857">
	<con:settings/>
	<con:testStep type="groovy" name="LoginRetailCustomerAlan" id="f5857610-e8d5-4e18-bd03-477d1601803d">
		<con:settings/>
		<con:config>
			<script>/////////////////////////////////////////////////////////
				// Need these imports to run tests
				/////////////////////////////////////////////////////////
				import groovyx.net.http.Method
				import groovyx.net.http.ContentType
				import groovyx.net.http.HTTPBuilder
				import groovyx.net.http.HttpResponseDecorator
				import groovyx.net.http.HttpResponseException

				/////////////////////////////////////////////////////////
				// define some variables
				/////////////////////////////////////////////////////////

				def project = testRunner.testCase.testSuite.project
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath


				def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
				def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
				def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


				public class RestConnector {
				private String baseUrl
				private HTTPBuilder httpBuilder
				private List&lt;String> cookies

			RestConnector(String url) {
			this.baseUrl = url
			this.httpBuilder = initializeHttpBuilder()
			this.cookies = []
			}

			public def request(Method method, ContentType contentType, String url, Map&lt;String, Serializable> params) {
		debug("Send $method request to ${this.baseUrl}$url: $params")
		httpBuilder.request(method, contentType) { request ->
	uri.path = url
	uri.query = params
	headers['Cookie'] = cookies.join(';')
	}
	}

	private HTTPBuilder initializeHttpBuilder() {
	def httpBuilder = new HTTPBuilder(baseUrl)

	httpBuilder.handler.success = { HttpResponseDecorator resp, reader ->
resp.getHeaders('Set-Cookie').each {
String cookie = it.value.split(';')[0]
debug("Adding cookie to collection: $cookie")
cookies.add(cookie)
}
debug("Response: ${reader}")
return reader
}
return httpBuilder
}

private debug(String message) {
System.out.println(message) //for Gradle
}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

restConnector = new RestConnector(ServiceEndpoint)

Map params = [j_username: TestRetailCustomer, j_password: TestRetailCustomerPW]

restConnector.request(Method.POST, ContentType.URLENC, '/DataCustodian/j_spring_security_check', params)
assert !(restConnector.cookies.empty)

return;

</script>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Groovy Test Script [NEG] OAuth Authorize Endpoint -- malformed" searchProperties="true" id="a58f9311-2d1f-44d5-bc7b-ee45a8491e07">
	<con:settings/>
	<con:testStep type="groovy" name="[NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter)" id="15f60a7e-e4fa-4422-9216-3909e2bd95ea">
		<con:settings/>
		<con:config><script><![CDATA[/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////

import groovyx.net.http.Method
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseDecorator
import groovy.util.logging.Log

import org.apache.http.client.RedirectStrategy

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

def clientId = project.getPropertyValue("client_id")
def redirectUri = project.getPropertyValue("redirect_uri")
def scope = project.getPropertyValue("scope")
def state = project.getPropertyValue("state")

def List<String> sessionCookie = []

public class RestConnector {
	private log
	private String baseUrl
	private HTTPBuilder httpBuilder
	private List<String> cookies

	RestConnector(String url, log) {
		this.baseUrl = url
		this.httpBuilder = initializeHttpBuilder()
		this.cookies = []
		this.log = log
	}

	public def request(Method method, ContentType contentType, String url, Map<String, Serializable> params) {
		
		debug("Send $method request to ${this.baseUrl}$url: $params")
		httpBuilder.request(method, contentType) { request ->
			uri.path = baseUrl + url
			uri.query = params
			headers['Cookie'] = cookies.join(';')
		}
	}

	private HTTPBuilder initializeHttpBuilder() {
		def httpBuilder = new HTTPBuilder(baseUrl)

		httpBuilder.handler.success = { HttpResponseDecorator resp, reader ->
			resp.getHeaders('Set-Cookie').each {
				String cookie = it.value.split(';')[0]
				debug("Adding cookie to collection: $cookie")
				cookies.add(cookie)
			}
			debug("Response: ${reader}")
			return reader
		}
		return httpBuilder
	}

	private debug(String message) {
  		log.info(message);  		
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//	httpBuilder class used to test Oauth Authorize Endpoint so that 302 failures can be captured
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class OauthConnector { 
	private log
	private String baseUrl
	private HTTPBuilder httpBuilder
	private List<String> cookies

	OauthConnector(String url, List<String> cookies, log) {
		this.baseUrl = url
		this.httpBuilder = initializeOauthHttpBuilder()
		this.cookies = cookies
		this.log = log
	}

	public def request(Method method, ContentType contentType, String url, Map<String, Serializable> params) {
				
		debug("Send $method request to ${this.baseUrl}$url: $params")

		String strResult = "";

		// Make sure the HttpClient doesn't perform a redirect
		def dontHandleRedirectStrategy = [
			getRedirect : { request, response, context -> null},
			isRedirected : { request, response, context -> false}
		]

		httpBuilder.client.setRedirectStrategy(dontHandleRedirectStrategy as RedirectStrategy)
		
		// Execute a GET request and expect a redirect
		httpBuilder.request(method, contentType) { req ->
			uri.path = baseUrl + url
			uri.query = params
			headers['Cookie'] = cookies.join(';')

			response.success = { response, reader ->

				strResult = "OauthConnector Succeeded: " + response.statusLine.statusCode + " \n" + response.headers['Location'].value;
				debug(strResult);
			
				assertThat response.statusLine.statusCode, is (302)
				assertThat response.headers['Location'].value, startsWith("${baseUrl}")
			}

			response.failure = { response, reader ->
				fail("Expected redirect but received ${response.statusLine} \n ${reader}")
				strResult = "OauthConnector Failed: " + response.statusLine;
				debug(strResult)	
			}	
		}
	}

	private HTTPBuilder initializeOauthHttpBuilder() {
		def httpBuilder = new HTTPBuilder(baseUrl)

		return httpBuilder
	}
	
	private debug(String message) {
  		log.info(message);
	}
}
///////////////////////////////
// 
//	Main Body
//
///////////////////////////////


log.info("*****************************************************************************************************");
log.info("   RESET Data Custodian Database ");
log.info("*****************************************************************************************************");	
	
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);


log.info("*****************************************************************************************************");
log.info("   Login Retail Customer -- Alan ");
log.info("*****************************************************************************************************");	

restConnector = new RestConnector(ServiceEndpoint, log)

url = '/j_spring_security_check'
Map params = [j_username: TestRetailCustomer, j_password: TestRetailCustomerPW]
log.info("URL = " + "POST " + restConnector.baseUrl + url + params);

restConnector.request(Method.POST, ContentType.URLENC, url, params)
assert !(restConnector.cookies.empty)

sessionCookie = restConnector.cookies;

log.info("Returned session cookie = " + restConnector.cookies);


log.info("*****************************************************************************************************");
log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
log.info("*****************************************************************************************************");	

oauthConnector = new OauthConnector(ServiceEndpoint, sessionCookie, log)

log.info("oauthConnector = " + oauthConnector);
log.info("oauthConnector baseUrl = " + oauthConnector.baseUrl);
log.info("oauthConnector httpBuilder = " + oauthConnector.httpBuilder);
log.info("oauthConnector cookies = " + oauthConnector.cookies);

url = '/oauth/authorize'
params = [client_id: clientId, redirect_uri: redirectUri, scope: scope, state: state]
log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
log.info("Cookies = " + oauthConnector.cookies);

oauthConnector.request(Method.GET, ContentType.HTML, url, params);
	
return;

]]></script></con:config>
	</con:testStep>
	<con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter)" id="376f5922-9eea-4023-96a9-c236ab379a79">
		<con:settings/>
		<con:config><script>			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&amp;j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?client_id=" + clientId + "&amp;redirect_uri=" + redirectUri + "&amp;scope=" + scope + "&amp;state=" + state
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;</script></con:config>
</con:testStep>			<con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (no client_id parameter)" id="ef4da91c-3616-4521-bc45-a8a94d65504d">
		<con:settings/>
		<con:config><script>			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&amp;j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&amp;redirect_uri=" + redirectUri + "&amp;scope=" + scope + "&amp;state=" + state
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;</script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (no redirect_uri parameter)" id="b08194b4-a303-4fa7-9e26-0143db4cd8de">
		<con:settings/>
		<con:config><script>			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&amp;j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&amp;client_id=" + clientId + "&amp;scope=" + scope + "&amp;state=" + state 
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;</script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (no scope parameter)" id="54bbb444-2b5e-42da-9916-477ad64f9c45">
		<con:settings/>
		<con:config><script>			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&amp;j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&amp;client_id=" + clientId + "&amp;redirect_uri=" + redirectUri + "&amp;state=" + state
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;</script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (no state parameter)" id="c64f8a7f-68d3-4775-89a2-764f10901178">
		<con:settings/>
		<con:config><script>			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&amp;j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&amp;client_id=" + clientId + "&amp;redirect_uri=" + redirectUri + "&amp;scope=" + scope
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;</script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (multiple response_type parameters)" id="94590336-5764-4dd3-bfa7-7837e43824fb">
		<con:settings/>
		<con:config><script><![CDATA[			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&client_id=" + clientId + "&redirect_uri=" + redirectUri + "&scope=" + scope +"&state=" + state + "&response_type=" + "code"
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;]]></script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (multiple client_id parameters)" id="76f71fd5-6cc2-4358-a5e8-77fc365e0758">
		<con:settings/>
		<con:config><script><![CDATA[			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&client_id=" + clientId + "&redirect_uri=" + redirectUri + "&scope=" + scope +"&state=" + state + "&client_id=" + clientId
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;]]></script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (multiple scope parameters)" id="5bffc5cd-4a36-4a00-b54c-05ee70118974">
		<con:settings/>
		<con:config><script><![CDATA[			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&client_id=" + clientId + "&redirect_uri=" + redirectUri + "&scope=" + scope +"&state=" + state + "&scope=" + scope
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;]]></script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (multiple redirect_uri parameters)" id="3be12eca-461f-4ef8-bf65-8c51df08fbcb">
		<con:settings/>
		<con:config><script><![CDATA[			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&client_id=" + clientId + "&redirect_uri=" + redirectUri + "&scope=" + scope +"&state=" + state + "&redirect_uri=" + redirectUri
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;]]></script></con:config>
</con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (multiple state parameters)" id="8997037f-f533-4a88-b55e-3d05c7243bea">
		<con:settings/>
		<con:config><script><![CDATA[			/////////////////////////////////////////////////////////
			// Need these imports to run tests
			/////////////////////////////////////////////////////////

			import com.rhythmicsoftware.cmd.utils.HTTPConnector;



			/////////////////////////////////////////////////////////
			// define some variables
			/////////////////////////////////////////////////////////

			def project = testRunner.testCase.testSuite.project
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			def projectPath = groovyUtils.projectPath

			def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
			def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
			def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

			def clientId = project.getPropertyValue("client_id")
			def redirectUri = project.getPropertyValue("redirect_uri")
			def scope = project.getPropertyValue("scope")
			def state = project.getPropertyValue("state")

			def String sessionCookie = null

			///////////////////////////////
			// 
			//	Main Body
			//
			///////////////////////////////


			log.info("*****************************************************************************************************");
			log.info("   Load Certification Configuration ");
			log.info("*****************************************************************************************************");	

			testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);


			log.info("*****************************************************************************************************");
			log.info("   Login Retail Customer -- Alan ");
			log.info("*****************************************************************************************************");	

			HTTPConnector httpConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log);
//			log.info("httpConnector: " + httpConnector);

			if( context["httpConnector"] == null )
			context["httpConnector"] = httpConnector
//			log.info("context: " + context["httpConnector"]);

			url = '/j_spring_security_check'
			params = "?j_username=" + TestRetailCustomer + "&j_password=" + TestRetailCustomerPW
			status = 302

			boolean bResult = httpConnector.doPOST("application/x-www-form-urlencoded", url, params, status);
			log.info("bResult: " + bResult);
			log.info("httpConnector cookies: " + httpConnector.cookies);

			assert (bResult)
			assert !(httpConnector.cookies.empty)

			sessionCookie = httpConnector.cookies;

			log.info("Returned session cookie = " + httpConnector.cookies);


			log.info("*****************************************************************************************************");
			log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
			log.info("*****************************************************************************************************");	

			oauthConnector = new HTTPConnector(ServiceEndpoint, sessionCookie, log)

			log.info("oauthConnector: " + oauthConnector);
			log.info("oauthConnector baseUrl: " + oauthConnector.baseUrl);
			log.info("oauthConnector cookies: " + oauthConnector.cookies);

			url = '/oauth/authorize'
			params = "?response_type=" + "code" + "&client_id=" + clientId + "&redirect_uri=" + redirectUri + "&scope=" + scope +"&state=" + state + "&state=" + state
			status = 302

			log.info("url: " + url);
			log.info("client_id: " + clientId);
			log.info("redirect_uri: " + redirectUri);
			log.info("scope: " + scope);
			log.info("state: " + state);			
			
			log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
			log.info("Cookies = " + oauthConnector.cookies);

			bResult = oauthConnector.doGET("HTML", url, params, status)
			assert(bResult)
			
			return;]]></script></con:config>
</con:testStep><con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_14] Authorization and Authentication" searchProperties="true" id="b7ac6ce8-a97f-4e68-995c-bab4e4076eb8">
		<con:settings/>
		<con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list" id="f7d0dbae-8c9a-41b2-b048-799495031f5a">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;
					import org.greenbutton.cmd.utils.DriverHelper;

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath
					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
					def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
					def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
					def TestManager=project.getPropertyValue("TestManager")
					def TestManagerPW=project.getPropertyValue("TestManagerPW")
					def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
					def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
					def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
					def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
					def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
					//driver._bLogActions = true;

					try{

					//*********************************************************
					log.info("Scenario: Retail Customer views Data Custodian list");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
					// Browser Init
					driver.Before();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Given a Retail Customer with Usage Points");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
					driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

					// upload usage point file
					driver.findElement(By.linkText("Upload")).click();	
					driver.findElement(By.name("file")).sendKeys(TestFile);

					driver.findElement(By.name("upload")).click();	
					driver.assertDoesNotContain("Unable to process file");

					// add usage point linkage
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();	
					driver.findElement(By.partialLinkText("Add Usage")).click();	
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
					driver.findElement(By.name("create")).click();


					driver.logout(ServiceEndpointDataCustodian);

					driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I navigate to Data Custodian list");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.linkText("Data Custodians")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see a list of Data Custodians");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertContains("data_custodian");

					} catch(Exception e) {
					testRunner.fail(driver.getErrorString())
					}

					//Close the browser
					driver.quit();
				</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list" id="e57c5f9d-9aa9-48d1-b289-c98f542bdbd9">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;
					import org.greenbutton.cmd.utils.DriverHelper;

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath
					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
					def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
					def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
					def TestManager=project.getPropertyValue("TestManager")
					def TestManagerPW=project.getPropertyValue("TestManagerPW")
					def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
					def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
					def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
					def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
					def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

					//driver._bLogActions = true;

					try{

					//*********************************************************
					log.info("Scenario: Retail Customer selects Data Custodian for the list");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
					// Browser Init
					driver.Before();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Given a Retail Customer with Usage Points");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
					driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

					// upload usage point file
					driver.findElement(By.linkText("Upload")).click();	
					driver.findElement(By.name("file")).sendKeys(TestFile);

					driver.findElement(By.name("upload")).click();	
					driver.assertDoesNotContain("Unable to process file");

					// add usage point linkage
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();	
					driver.findElement(By.partialLinkText("Add Usage")).click();	
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
					driver.findElement(By.name("create")).click();

					driver.logout(ServiceEndpointDataCustodian);

					driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I select a Data Custodian from the list");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.linkText("Data Custodians")).click();	
					driver.findElement(By.name("Data_custodian")).click();	
					driver.findElement(By.name("next")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see the Data Custodian login screen");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertUrlContains("/DataCustodian");
					driver.assertContains("Login");

					} catch(Exception e) {
					testRunner.fail(driver.getErrorString())
					}

					//Close the browser
					driver.quit();
				</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="Scenario: Retail Customer selects Scope" id="1b696561-889d-413d-b4e5-1bea3eaeacb0">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;
					import org.greenbutton.cmd.utils.DriverHelper;

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath
					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
					def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
					def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
					def TestManager=project.getPropertyValue("TestManager")
					def TestManagerPW=project.getPropertyValue("TestManagerPW")
					def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
					def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
					def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
					def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
					def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

					//driver._bLogActions = true;

					try{

					//*********************************************************
					log.info("Scenario: Retail Customer selects Scope");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
					// Browser Init
					driver.Before();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Given a Retail Customer with Usage Points");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
					driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


					// upload usage point file
					driver.findElement(By.linkText("Upload")).click();	
					driver.findElement(By.name("file")).sendKeys(TestFile);

					driver.findElement(By.name("upload")).click();	
					driver.assertDoesNotContain("Unable to process file");

					// add usage point linkage
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();	
					driver.findElement(By.partialLinkText("Add Usage")).click();	
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
					driver.findElement(By.name("create")).click();

					driver.logout(ServiceEndpointDataCustodian);

					driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I select a Data Custodian from the list");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.linkText("Data Custodians")).click();	
					driver.findElement(By.name("Data_custodian")).click();	
					driver.findElement(By.name("next")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see the Data Custodian login screen");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertUrlContains("/DataCustodian");
					driver.assertContains("Login");

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I log into Data Custodian");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.name("j_username")).clear();
					driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
					driver.findElement(By.name("j_password")).clear();
					driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
					driver.findElement(By.name("submit")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see Scope selection screen");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertContains("Select Scope");
					driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");

					} catch(Exception e) {
					testRunner.fail(driver.getErrorString())
					}

					//Close the browser
					driver.quit();
				</script>
			</con:config>
		</con:testStep>
		<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party" id="911461cd-77e7-4970-83e9-e77718642139">
			<con:settings/>
			<con:config>
				<script>import org.openqa.selenium.*;
					import org.greenbutton.cmd.utils.DriverHelper;

					def project = testRunner.testCase.testSuite.project
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
					def projectPath = groovyUtils.projectPath
					def BaseURL = project.getPropertyValue("BaseURL")
					def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
					def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
					def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
					def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
					def TestManager=project.getPropertyValue("TestManager")
					def TestManagerPW=project.getPropertyValue("TestManagerPW")
					def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
					def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
					def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
					def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
					def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


					DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

					//driver._bLogActions = true;

					try{

					//*********************************************************
					log.info("Scenario: Retail Customer authorizes Third Party");
					//*********************************************************
					// reset DB : run library groovy script
					testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
					// Browser Init
					driver.Before();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Given a Retail Customer with Usage Points");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
					driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

					// upload usage point file
					driver.findElement(By.linkText("Upload")).click();	
					driver.findElement(By.name("file")).sendKeys(TestFile);

					driver.findElement(By.name("upload")).click();	
					driver.assertDoesNotContain("Unable to process file");

					// add usage point linkage
					driver.findElement(By.linkText("Customer List")).click();
					driver.findElement(By.linkText(TestRetailCustomer)).click();	
					driver.findElement(By.partialLinkText("Add Usage")).click();	
					driver.findElement(By.id("UUID")).clear();
					driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
					driver.findElement(By.name("create")).click();


					driver.logout(ServiceEndpointDataCustodian);

					driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I select a Data Custodian from the list");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.linkText("Data Custodians")).click();
					driver.findElement(By.name("Data_custodian")).click();
					driver.findElement(By.name("next")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see the Data Custodian login screen");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertUrlContains("/DataCustodian");
					driver.assertContains("Login");

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I log into Data Custodian");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.name("j_username")).clear();
					driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
					driver.findElement(By.name("j_password")).clear();
					driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
					driver.findElement(By.name("submit")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see Scope selection screen");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertContains("Select Scope");
					driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I select Scopes");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.findElement(By.className("scope")).click();	
					driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
					driver.findElement(By.name("next")).click();	

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see authorization screen");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertContains("Please Confirm");

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("When I authorize Third Party");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					//driver.findElement(By.name("authorize")).click();
					driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
					driver.findElement(By.name("authorize")).click();

					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.logStep("Then I should see all my authorizations");
					//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					driver.assertContains("Authorizations");
					driver.assertContains("data_custodian");
					driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

					} catch(Exception e) {
					testRunner.fail(driver.getErrorString())
					}

					//Close the browser
					driver.quit();
				</script>
			</con:config>
		</con:testStep>
		<con:properties/>
	</con:testCase><con:testCase id="0efd2e12-e718-41f8-92e4-90ff9def4ceb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTPBuilder GZIP IOException Test" searchProperties="true"><con:settings/><con:testStep type="groovy" name="HttpBuilder GZIP IOException Test" id="e25a0cc8-f9bd-49be-8887-781ecd4ad898"><con:settings/><con:config><script>import java.net.*;
import java.io.*;
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT
import groovyx.net.http.Method;




boolean bFailure = false;
String strResult = "";
String strBody = "";
String strBaseEndpoint = "http://localhost:8080/DataCustodian";
//String href = "/espi/1_1/resource/IntervalBlock";
String href = "/espi/1_1/resource/MeterReading/1";
String _strError="";

def http = new HTTPBuilder();


try {
	http.request( strBaseEndpoint, GET, TEXT ) { req ->
		uri.path = strBaseEndpoint+href
		headers.Authorization = 'Bearer 2a85f4bd-30db-4b7d-8f41-b046b0566cb3' ;
//  		headers.'Accept-Encoding' = 'deflate';
		headers.Accept = 'application/atom+xml'

		response.success = { resp, reader ->
			//assert resp.statusLine.statusCode == 200
			log.info "response.success -- Got response: ${resp.statusLine}"
			log.info "response.success -- Content-Type: ${resp.headers.'Content-Type'}"
			log.info "response.success -- Content-Encoding: ${resp.headers.'Content-Encoding'}"
//			log.info "response.success -- strBody: " + reader.getText();
			strBody = reader.getText();        

			}                                                                                              

			response.failure = { resp ->
				strResult = "GET Failed: " + resp.statusLine;
				bFailure = true;
			}  
	}

} catch ( HttpResponseException ex ) {
		// default failure handler throws an exception:
		log.info "HttpResponse Exception";
		strResult ="GET Unexpected response error: ${ex.statusCode}"
		_strError = strResult;
		bFailure = true;
		return true;

} catch (IOException io) {
		log.info "IO Exception!: ${io.statusLine}";
		return true;

} catch (SocketException se) {
		log.info "Socket Exception!: ${se.statusLine}";
		bFailure = true;
		return true;
	
} catch (Exception e) {
		log.info "The body in the catch is: " + strBody;
		log.info "Unexpected Exception" + e;
		strResult ="GET Unexpected error"
		_strError = strResult;
		bFailure = true;
		return true;                                    

}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4ab0c346-3814-4e24-80f3-d44526329128" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Unused Project Properties" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Remove Unused Project Property" id="64bb5a48-141b-4b78-baee-9683c069e27d"><con:settings/><con:config><script>//   Create addressability to project variables
def project = testRunner.testCase.testSuite.project

propertyName = "expires_at"

if (project.getPropertyValue(propertyName) != null) {
    log.info("\n\n********** Current value of " + propertyName + ": " + project.getPropertyValue(propertyName));
    project.removeProperty(propertyName)

    if (project.getPropertyValue(propertyName) == null) {
	   log.info("Property: " + propertyName + " has been removed")
    } else {
	   log.info("Request to remove " + propertyName + " property failed")
    }	
} else {
	log.info("\n\n********** Property " + propertyName + " does not exist!!")
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="47e8a5d0-d3b3-46c6-9cd6-9c6a7423f2c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Unused authCase Properties" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Remove Unused authCase Property" id="c75b3633-c316-4533-8c05-592d69577ae2"><con:settings/><con:config><script>//   Create addressability to project variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propertyName = "client_access_token"

if (authCase.getPropertyValue(propertyName) != null) {
    log.info("\n\n********** Current value of " + propertyName + ": " + authCase.getPropertyValue(propertyName));
    authCase.removeProperty(propertyName)

    if (authCase.getPropertyValue(propertyName) == null) {
	   log.info("Property: " + propertyName + " has been removed")
    } else {
	   log.info("Request to remove " + propertyName + " property failed")
    }	
} else {
	log.info("\n\n********** Property " + propertyName + " does not exist!!")
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/>
</con:testSuite>
<con:testSuite id="130ca386-2aa1-4889-9e48-5d1a08b1014b" name="[SetupDCUnderTest]"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="7cd7ced7-c818-4d27-bac3-6757f38c318f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetupDCUnderTest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Load gbcmdcert and gbcmdcert_target" id="7d901893-e1aa-4ba2-b19a-8d558133cc67"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] Load gbcmdcert and gbcmdcert_target Script");

result=testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);

log.info("**********  END   Execution ********** -- [SetupDCUnderTest] Load gbcmdcert and gbcmdcert_target Script");</script></con:config></con:testStep><con:testStep type="groovy" name="Configure hosts" id="e018973b-a93f-4a79-9109-b15e51703239"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] Configure hosts Script");

def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

URI aURI = new URI(project.getPropertyValue("AuthorizationEndpoint"));
hostAuth = aURI?.getHost();
aURI = new URI(project.getPropertyValue("dataCustodianResourceEndpoint"));
hostResource = aURI?.getHost();

def hostsFile = new File("/etc/hosts.original");
def newHostsFile = new File("/tmp/hosts.tmp");
newHostsFile.write("");

def crlf = "\n";

int count = 0;

boolean bModified = false;

hostsFile.eachLine { line ->
	//log.info (line)
	if(line.contains("127.0.0.1")){
		if(!line.contains(hostAuth)){
			
			bModified = true;
			newHostsFile.append line + " " + hostAuth;
			if(hostAuth!=hostResource){
				newHostsFile.append " " + hostResource;
			}
			newHostsFile.append crlf;
		}
		else
		{
			newHostsFile.append line + crlf;
		}
		
	} else {
		newHostsFile.append line +crlf;
	}
}

if(bModified){
	log.info ("[SetupDCUnderTest] Configure hosts -- Host File Modified");

	//tc.setPropertyValue("cmd","sudo mv /etc/hosts /etc/hosts.bak");
	//tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	//sleep 3000

	tc.setPropertyValue("cmd","sudo mv /tmp/hosts.tmp /etc/hosts.forstunnel");
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	sleep 1000

	tc.setPropertyValue("cmd","sudo rm /etc/hosts");
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	sleep 1000

	tc.setPropertyValue("cmd","sudo ln -s /etc/hosts.forstunnel /etc/hosts");
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	sleep 1000
	
}

log.info("**********  END   Execution ********** -- [SetupDCUnderTest] Configure hosts Script");
</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineIPAddresses" id="ab388155-4253-417d-acb9-aad8ebbc6450"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] DetermineIPAddresses Script");

def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def host = "";
def strCommand = "";

//URI aURI = new URI(project.getPropertyValue("authorizationServerTokenEndpoint"));
URI aURI = new URI(project.getPropertyValue("productionAuthorizationServerDomain"));

host = aURI?.getHost();
	
strCommand = 'nslookup  ' + host + ' |grep "Address" |grep -v "#" | cut -f 2 -d " " | xargs | cut -f 1 -d " "';

tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.setPropertyValue("stdout","");

tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

log.info("[SetupDCUnderTest] DetermineIPAddress Script -- Retrieve Authorization Server IP Address returncode: " + tc.getPropertyValue("returncode"));
log.info("[SetupDCUnderTest] DetermineIPAddress Script -- Retrieve Authorization Server IP Address stdout length: " + tc.getPropertyValue("stdout").length());

if(tc.getPropertyValue("returncode")=="1" || tc.getPropertyValue("stdout").length() &lt; 2 )
{
	testRunner.fail("retrieval of Authorization Server IP Address failed");
	return;
}

project.setPropertyValue("authorizationServerIP",tc.getPropertyValue("stdout").trim());


aURI = new URI(project.getPropertyValue("dataCustodianResourceEndpoint"));

host = aURI?.getHost();
	
strCommand = 'nslookup  ' + host + ' |grep "Address" |grep -v "#" | cut -f 2 -d " " | xargs | cut -f 1 -d " "';

tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.setPropertyValue("stdout","");

tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

log.info("[SetupDCUnderTest] DetermineIPAddress Script -- Retrieve Resource Server IP Address returncode: " + tc.getPropertyValue("returncode"));
log.info("[SetupDCUnderTest] DetermineIPAddress Script -- Retrieve Resource Server IP Address stdout length: " + tc.getPropertyValue("stdout").length());

if(tc.getPropertyValue("returncode")=="1" || tc.getPropertyValue("stdout").length() &lt; 2 )
{
	testRunner.fail("[SetupDCUnderTest] DetermineIPAddresses -- Retrieval of Resource Server IPAddress failed");
	return;
}

project.setPropertyValue("resourceServerIP",tc.getPropertyValue("stdout").trim());

log.info("**********  END   Execution ********** -- [SetupDCUnderTest] DetermineIPAddresses Script");</script></con:config></con:testStep><con:testStep type="groovy" name="RetrieveAndInstall DC Certificates" id="ca30c81a-b848-4d6b-859e-aeb96364400c"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] RetrieveAndInstall DC Certificates Script");

def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def String strResult;
def String strCommand;
def String strDCCertStoragePath;
def String strAuthServerIP;
def String strResourceServerIP;
def String strDCCertName;

aURI = new URI(project.getPropertyValue("dataCustodianResourceEndpoint"));
hostResource = aURI?.getHost();

// INPUT PARAMETERS:
strDCCertStoragePathTmp = "/tmp/";
strDCCertStoragePath = "/etc/ssl/certs/";
strAuthServerIP = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
URI aURI = new URI(project.getPropertyValue("productionAuthorizationServerDomain"));
strAuthServerDomain = aURI.getHost();
strDCCertName=hostResource + ".pem";

//strCommand="echo Q | openssl s_client -showcerts -connect " + strAuthServerIP + " -CApath /etc/ssl/certs -cert /etc/stunnel/greenbuttonalliance_org_SSL_Cert.crt -key /etc/stunnel/greenbuttonalliance_private_key.pem | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + strDCCertStoragePathTmp + strDCCertName;

// Obtain SSL Certificate using IP SSL Interface
project.setPropertyValue("SSLInterfaceType","IP");
strCommand="echo Q | openssl s_client -showcerts -connect " + strAuthServerIP + " -CApath /etc/ssl/certs -cert " + project.getPropertyValue("soapUIPlatformSSLCertificate") + " -key " + project.getPropertyValue("soapUIPlatformSSLPrivateKey") + " | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + strDCCertStoragePathTmp + strDCCertName;

log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- openSSL IP SSL Interface command: ") + strCommand;

tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
strCmdResult = tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificatie -- openSSL IP SSL Interface command Result: " + strResult);

//if(tc.getPropertyValue("returncode") == "1")
if(tc.getPropertyValue("stderr").contains("error:"))
{
	// Obtain SSL Certificate using SNI SSL Interface
	project.setPropertyValue("SSLInterfaceType","SNI");
	strCommand="echo Q | openssl s_client -showcerts -connect " + strAuthServerIP + " -servername " + strAuthServerDomain + " -CApath /etc/ssl/certs -cert " + project.getPropertyValue("soapUIPlatformSSLCertificate") + " -key " + project.getPropertyValue("soapUIPlatformSSLPrivateKey") + " | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + strDCCertStoragePathTmp + strDCCertName;

	log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- openSSL SNI SSL Interface command: ") + strCommand;

	tc.setPropertyValue("cmd", strCommand);
	tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
	tc.setPropertyValue("timeout","5");

	try {
		tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
		log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- [Library] RunCommand Performed");
	} catch (Exception e) {
		log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- [Library] RunCommand Exception: " + e.getMessage());
	}

	strResult = tc.getPropertyValue("stdout");

}

//if(tc.getPropertyValue("returncode")=="1")
if(tc.getPropertyValue("stderr").contains("error:"))
{
	log.error("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Retrieval of DC Authorization certificate failed");
	testRunner.fail("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Retrieval of DC Authorization certificate failed");
	return;
}

File file = new File(strDCCertStoragePathTmp + strDCCertName);
if(file.length()==0)
{
	log.error("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Retrieval of DC Authorization certificate failed: file length 0");
	testRunner.fail("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Retrieval of DC Authorization certificate failed: file length 0");
	return;
}

strCommand="sudo mv " + strDCCertStoragePathTmp + strDCCertName + " " + strDCCertStoragePath + strDCCertName;


tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if(tc.getPropertyValue("returncode")=="1")
{
	log.error("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Move (mv) of DC Authorization certificate failed");
	testRunner.fail("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Move (mv) of DC Authorization certificate failed");
	return;
}

// remove link if it exits
strCommand="sudo openssl x509 -hash -noout -in " + strDCCertStoragePath + strDCCertName;
	
tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

String linkFilePath = strDCCertStoragePath + strResult.trim() + ".0";

log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- See if link exits: " + linkFilePath);

strCommand='test -L ' + linkFilePath + ' &amp;&amp; echo "link"';
	
tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout").trim();

if(strResult.equals("link"))
{
	strCommand="sudo rm " + linkFilePath;
	
	tc.setPropertyValue("cmd", strCommand);
	tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
	tc.setPropertyValue("timeout","5");
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	strResult = tc.getPropertyValue("stdout");
} else {
	log.info("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Command execution error is acceptable here.");
}

//create link

strCommand="sudo ln -s " + strDCCertStoragePath + strDCCertName + " " + linkFilePath;


tc.setPropertyValue("cmd", strCommand);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","5");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if(tc.getPropertyValue("returncode")=="1")
{
	log.error("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Link DC Authorization pem hash failed");
	testRunner.fail("[SetupDCUnderTest] RetrieveAndInstall DC Certificate -- Link DC Authorization pem hash failed");
	return;
}

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] RetrieveAndInstall DC Certificate Script");</script></con:config></con:testStep><con:testStep type="groovy" name="GenerateStunnelConfiguration" id="62d88bd4-09f8-44da-8b1d-509e16b90d18"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] GenerateStunnelConfiguration Script");

result=testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['GenerateStunnelConf']);

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] GenerateStunnelConfiguration Script");
</script></con:config></con:testStep><con:testStep type="groovy" name="Start Generic Get Service" id="2f90ae19-d140-40d2-a984-e1f33c642c41"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] Start Generic GET Service Script");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").start();
//return;

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] Start Generic GET Service Script");</script></con:config></con:testStep><con:testStep type="groovy" name="CheckOrGetRegistrationAccessToken" id="9ec7c5cf-680c-48b5-bd62-4b129e2ec614"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] CheckOrGetRegistrationAccessToken Script");

import java.net.*;
import java.io.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def uri;	// lets check the DC uri

String registration_access_token = project.getPropertyValue("registration_access_token");

if (registration_access_token == "")
{
	// need to get it
	log.info "FND001 [POS] Initial Test Configuration - CheckOrGetRegistrationAccessToken: Need to obtain Registration Access Token";
}
else
{
	log.info "FND001 [POS] Initial Test Configuration - CheckOrGetRegistrationAccessToken -- registration_access_token: " + registration_access_token;
	testRunner.gotoStepByName( "Done 1");

}

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] CheckOrGetRegistrationAccessToken Script");</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRegistrationAccessToken" id="470ad377-00e7-4e8b-adb4-d33a9640ecfd"><con:settings/><con:config service="ESPI Resources" resourcePath="" methodName="Client Credentials" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRegistrationAccessToken" mediaType="application/json" postQueryString="false" id="c2d8f4db-dd26-4546-a99e-770d3221f363">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#AuthorizationEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
<con:assertion type="Valid HTTP Status Codes" id="26e96b62-01bc-4124-bbad-919f0182dac7" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
	<con:username>${#Project#registration_access_token_client_id}</con:username>
	<con:password>${#Project#registration_access_token_secret}</con:password>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters>
  <con:entry key="scope" value="FB=36_40"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RegistrationAccessTokenParseJSONResponse" id="ba9fa119-75e7-413a-9834-9c83da5b171e"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] RegistrationAccessTokenParseJSONResponse Script");

import groovy.json.JsonSlurper
def project = testRunner.testCase.testSuite.project
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

responseContent = testRunner.testCase.getTestStepByName("GetRegistrationAccessToken").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)
log.info "FND001 [POS] Initial Test Configuration - RegistrationAccessTokenParseJSONResponse -- JSON Response: " + slurperresponse
log.info "FND001 [POS] Initial Test Configuration - RegistrationAccessTokenParseJSONResponse -- Registration Access Token: " + slurperresponse.token_type + " " + slurperresponse.access_token

def applicationInformationResourceURI = slurperresponse.resourceURI;
def applicationInformationId = applicationInformationResourceURI.substring(applicationInformationResourceURI.lastIndexOf("/") + 1);

def applicationInformationAuthorizationURI = slurperresponse.authorizationURI;
def applicationInformationAuthorizationId = applicationInformationAuthorizationURI.substring(applicationInformationAuthorizationURI.lastIndexOf("/") + 1);

project.setPropertyValue("registration_access_token",slurperresponse.access_token);
project.setPropertyValue("applicationInformationId",applicationInformationId);
project.setPropertyValue("applicationInformationAuthorizationId",applicationInformationAuthorizationId);
authCase.setPropertyValue("registration_access_token",slurperresponse.access_token);

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] RegistrationAccessTokenParseJSONResponse Script");</script></con:config></con:testStep><con:testStep type="groovy" name="Done 1" id="79159ae7-b67d-40f5-a328-58e7adbe29b6"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="delay" name="Delay" id="5b9c83e0-d7fd-41c0-9c57-241e0c65f0b8"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="groovy" name="Init Loop" id="f083a232-067b-4b4d-9103-13ba895d142a"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] Init Loop Script");

	context.loopCnt = 0;
	context.passCnt = 0;
	context.results = [];

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] Init Loop Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Repeat GET up to 5 Times" id="76bc4444-4da7-479f-bebd-d10182e9ec47"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] Repeat GET up to 5 Times Script");
	
	if(context.loopCnt&lt;5){
		
		def tStep = testRunner.testCase.testSteps["GET ApplicationInformation by Id"];

		long millisStart = System.currentTimeMillis();

		def result = tStep.run(testRunner, context);

		long millisStop = System.currentTimeMillis();
		long delta = millisStop - millisStart;

		//log.info "single result:" + result.status.toString();
		if(result.status.toString().equals("OK")){
			context.passCnt++;
			def strResultA = "PASS: TIME DELTA=" + delta.toString();
			context.results.add(strResultA);

			// Done! stop test case
			context.results.each{strResult -> 
				log.info strResult;
			}
		
			log.info "iterations = " + (context.loopCnt + 1);
			log.info "pass count = " + context.passCnt;
			
			//log.info "goto Done 2";
			testRunner.gotoStepByName( "Done 2");
			//log.info "goto Done 2";
			return;
			
		} else {
			def strResult = "FAIL: TIME DELTA=" + delta.toString();
			context.results.add(strResult);
		}
		
		testRunner.gotoStepByName( "Repeat GET up to 5 Times");

		context.loopCnt++;	
	} else {
		context.results.each{strResult -> 
			log.info strResult;
		}
		
		log.info "iterations = " + context.loopCnt;
		log.info "pass count = " + context.passCnt;

		// if we get here we failed 5 times.
		log.error("Failed GET ApplicationInformation by ID");
		testRunner.fail("Failed GET ApplicationInformation by ID");
		
		testRunner.gotoStepByName( "Done 2");
	}

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] Repeat GET up to 5 Times Script");	
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation by Id" id="0be9e023-c7f6-4796-837a-982bd718fe21"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="76d44d45-b471-4f74-8aa9-8e1b64259cc6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="5aeef68b-2e8d-4476-bd9e-272782724009"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
count(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianScopeSelectionScreenURI)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>applicationInformationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Extract ApplicationInformation properties" id="70d99e78-140c-478c-97e9-2d2cba01f94e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>dataCustodianId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianId</con:sourcePath><con:targetType>dataCustodianId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" useXQuery="false" ignoreEmpty="false" transferChildNodes="false"><con:name>dataCustodianResourceEndpoint</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianResourceEndpoint</con:sourcePath><con:targetType>dataCustodianResourceUri</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>client_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_id</con:sourcePath><con:targetType>client_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>authorizationServerUri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerUri</con:sourcePath><con:targetType>authorizationServerUri</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>resourceServerUri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianResourceEndpoint</con:sourcePath><con:targetType>resourceServerUri</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianScopeSelectionScreenURI</con:sourcePath><con:targetType>dataCustodianScopeSelectionScreenURI</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>authorizationServerAuthorizationEndpoint</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerAuthorizationEndpoint</con:sourcePath><con:targetType>authorizationServerAuthorizationEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>authorizationServerTokenEndpoint</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerTokenEndpoint</con:sourcePath><con:targetType>authorizationServerTokenEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>redirect_uri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:redirect_uri</con:sourcePath><con:targetType>redirect_uri</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>client_secret</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_secret</con:sourcePath><con:targetType>client_secret</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>thirdPartyNotifyUri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyNotifyUri</con:sourcePath><con:targetType>thirdPartyNotificationEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Parse ApplicationInformation" id="33b41ac5-826a-4cf9-a30c-65a1920a873a"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [SetupDCUnderTest] Parse ApplicationInformation Script");

import java.net.*;
import java.io.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def uri;	// lets check the DC uri


def proxyOutPort = project.getPropertyValue("proxyOutPort");
def proxyOutPort1 = project.getPropertyValue("proxyOutPort1");

///////////////////////////////////////
// Convert API URIs to proxied versions
///////////////////////////////////////

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxyOutPort)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxyOutPort + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxyOutPort + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}


service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");
/*
// parse out ServiceEndpoint and resourceURI -- must have "espi/1_1/resource"
uri = project.getPropertyValue("dataCustodianResourceEndpoint");
log.info "DC Resource Endpoint URI: " + uri;
uritemp = uri;
i = uritemp.indexOf("espi/1_1/resource");
if(i>0) {
	// lets shorten it by stripping off up to resource
	uritemp = uritemp.substring(0,i-1);
	log.info "DC ServiceEndpoint " + uritemp;

	//uritemp = GetProxiedUrl(uritemp, proxyOutPort);
	//uritemp = GetProxiedUrl(uritemp, genericGetServiceMockPort);
	URL aURL = new URL(project.getPropertyValue("dataCustodianResourceEndpoint"));
	def host = aURL?.getHost();
	
	project.setPropertyValue("ServiceEndpoint","http://" + host + ":" + genericGetServiceMockPort);
	
	uritemp = uri;
	uritemp = uritemp.substring(uritemp.indexOf("espi/1_1/resource"), uritemp.length());
	log.info "DC resourceUri: " + uritemp;
	project.setPropertyValue("resourceUri",uritemp);
	
}  else {
	// cant be a resource
	log.info ("DC Resource Endpoint Uri not well formed: " + uri);					
}
*/
// lets check the TP Notification uri
uri = project.getPropertyValue("thirdPartyNotificationEndpoint");
if(uri != null)
{
	log.info "TP Notification URI: " + uri;
	uritemp = uri;
	i = uritemp.indexOf("espi/1_1");
	if(i>0) {
		// lets shorten it by stripping off up to resource
		uritemp = uritemp.substring(0,i-1);
		log.info "TP NotificationEndpoint " + uritemp;
		project.setPropertyValue("NotificationEndpoint",uritemp);
		uritemp = uri;
		uritemp = uritemp.substring(uritemp.indexOf("espi/1_1"), uritemp.length());
		log.info "TP notificationUri: " + uritemp;
		project.setPropertyValue("notificationUri",uritemp);
		
	}  else {
		// cant be a resource
		log.info ("TP Notification Endpoint Uri not well formed: " + uri);					
	}
}
else
{
	testRunner.fail("Missing TP thirdPartyNotificationEndpoint");	
}

/*
// check URI and compute proxy version	
uritemp = project.getPropertyValue("authorizationServerTokenEndpoint");
if(uritemp != null)
{

	uritemp = GetProxiedUrl(uritemp, proxyOutPort1);
	project.setPropertyValue("authorizationServerTokenEndpoint",uritemp);

	URL aURL = new URL(uritemp);

	// get authorization server
	if (aURL.getPort().equals(-1))
	{
		project.setPropertyValue("authorizationServer",aURL.getHost()  );
	}
	else {
		project.setPropertyValue("authorizationServer",aURL.getHost() + ":" +aURL.getPort());
	}
}
*/

// transfer to Authorization Case where other tests are looking
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('access_token'): " + project.getPropertyValue("access_token"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('token_type'): " + project.getPropertyValue("token_type"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('refresh_token'): " + project.getPropertyValue("refresh_token"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('expires_in'): " + project.getPropertyValue("expires_in"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('scope'): " + project.getPropertyValue("scope"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('resourceURI'): " + project.getPropertyValue("resourceURI"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationURI'): " + project.getPropertyValue("authorizationURI"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('dataCustodianScopeSelectionScreenURI'): " + project.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('redirect_uri'): " + project.getPropertyValue("redirect_uri"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerTokenEndpoint'): " + project.getPropertyValue("authorizationServerTokenEndpoint"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('OAuthCodeReceivedValue'): " + project.getPropertyValue("OAuthCodeReceivedValue"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('client_id'): " + project.getPropertyValue("client_id"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('client_secret'): " + project.getPropertyValue("client_secret"));

//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerTokenEndpoint'): " + project.getPropertyValue("authorizationServertokenEndpoint"));

//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('resourceServer'): " + project.getPropertyValue("resourceServer"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('mockPort'): " + project.getPropertyValue("mockPort"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('proxyOutPort'): " + project.getPropertyValue("proxyOutPort"));

authCase.setPropertyValue("access_token",project.getPropertyValue("access_token"));
authCase.setPropertyValue("token_type",project.getPropertyValue("token_type"));
authCase.setPropertyValue("refresh_token",project.getPropertyValue("refresh_token"));
authCase.setPropertyValue("expires_in",project.getPropertyValue("expires_in"));
authCase.setPropertyValue("scope",project.getPropertyValue("scope"));
authCase.setPropertyValue("resourceURI",project.getPropertyValue("resourceURI"));
authCase.setPropertyValue("authorizationURI",project.getPropertyValue("authorizationURI"));
authCase.setPropertyValue("dataCustodianScopeSelectionScreenURI",project.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
authCase.setPropertyValue("authorizationServerAuthorizationEndpoint",project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
authCase.setPropertyValue("redirect_uri",project.getPropertyValue("redirect_uri"));
authCase.setPropertyValue("authorizationServerTokenEndpoint",project.getPropertyValue("authorizationServerTokenEndpoint"));
authCase.setPropertyValue("OAuthCodeReceivedValue",project.getPropertyValue("OAuthCodeReceivedValue"));
authCase.setPropertyValue("client_id",project.getPropertyValue("client_id"));
authCase.setPropertyValue("client_secret",project.getPropertyValue("client_secret"));
authCase.setPropertyValue("client_access_token_client_id",project.getPropertyValue("client_access_token_client_id"));
authCase.setPropertyValue("client_access_token_secret",project.getPropertyValue("client_access_token_secret"));



authCase.setPropertyValue("authorizationServerAuthorizationEndpoint",project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
authCase.setPropertyValue("authorizationServerTokenEndpoint",project.getPropertyValue("authorizationServerTokenEndpoint"));

authCase.setPropertyValue("resourceServer",project.getPropertyValue("resourceServer"));


authCase.setPropertyValue("mockPort",project.getPropertyValue("mockPort"));
authCase.setPropertyValue("proxyOutPort",project.getPropertyValue("proxyOutPort"));

log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('access_token'): " + authCase.getPropertyValue("access_token"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('token_type'): " + authCase.getPropertyValue("token_type"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('refresh_token'): " + authCase.getPropertyValue("refresh_token"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('expires_in'): " + authCase.getPropertyValue("expires_in"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('scope'): " + authCase.getPropertyValue("scope"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('resourceURI'): " + authCase.getPropertyValue("resourceURI"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationURI'): " + authCase.getPropertyValue("authorizationURI"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('dataCustodianScopeSelectionScreenURI'): " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('redirect_uri'): " + authCase.getPropertyValue("redirect_uri"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerTokenEndpoint'): " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('OAuthCodeReceivedValue'): " + authCase.getPropertyValue("OAuthCodeReceivedValue"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('client_id'): " + authCase.getPropertyValue("client_id"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('client_secret'): " + authCase.getPropertyValue("client_secret"));

log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerTokenEndpoint'): " + authCase.getPropertyValue("authorizationServertokenEndpoint"));

log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('resourceServer'): " + authCase.getPropertyValue("resourceServer"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('mockPort'): " + authCase.getPropertyValue("mockPort"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('proxyOutPort'): " + authCase.getPropertyValue("proxyOutPort"));

log.info("**********  END  Execution ********** -- [SetupDCUnderTest] Parse ApplicationInformation Script");
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 2" id="8cff8b8b-4483-4fb5-9293-e6c6b12b3e28"><con:settings/><con:config><script/></con:config></con:testStep><con:setupScript>context.loopCnt = 0;</con:setupScript><con:tearDownScript>//testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getMockRunner().stop();
//return;</con:tearDownScript><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite id="cb8785d5-6cd3-45d7-8366-c921d6bd07fb" name="[PrepareForCMDTest]"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b332048a-1ae4-43da-a873-7dc3b96713ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PrepareForCMDTest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start Generic Get Service" id="9b4421b8-6e90-4338-b14e-15bea9bf9ab4"><con:settings/><con:config><script>def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").start();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="ClearLogs" id="0cc1676a-e15c-40b8-a127-649c10bc5f77"><con:settings/><con:config><script>com.eviware.soapui.SoapUI.logMonitor.getLogArea("script log").clear()</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>

<con:testSuite id="c85b105c-03a4-469f-9026-eb04b60fb046" name="[FinalizeCMDTest]"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f342bb56-efdb-4a98-b131-0257bfeba1de" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FinalizeCMDTest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Stop GenericGetService" id="02c9b42e-2bcf-4abc-929f-30a8cdfd3cd2"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getMockRunner().stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Results" id="cdd17d8f-4a19-4026-b22b-8e9cb02b460a"><con:settings/><con:config><script>result=testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['SaveScriptLog']);
return;</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_01] Common" id="705bf39e-206c-4ee4-90a5-0483778c0cb0"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d504ff25-e9a3-4df2-94b6-3df956a371dc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND001 Initial Test Configuration" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Initial Test Configuration from FB_03" id="adef6ec8-fc7a-4b64-acce-a2aaf9dab7d2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6f98eaed-016c-4e8a-b571-dc8759474507</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TR_CPYRT001 Verify the implementer has purchased the NAESB ESPI standard" searchProperties="true" id="171f69e0-c8a5-4aaa-88ed-edf5513db70f"><con:settings/><con:testStep type="groovy" name="Script will bring up browser to NAESB Purchased Standard Screen" id="aae143a4-f575-4de4-bb4f-54888eb1ff29"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project;

String strNAESBPurchasedStandardsURI = project.getPropertyValue("NAESBPurchasedStandardsURI");
log.info("NAESB Purchased Standards Screen URI: " + strNAESBPurchasedStandardsURI);

DriverHelper driver = new DriverHelper(strNAESBPurchasedStandardsURI,"","",log);

context["driver"] = driver;

driver.get(strNAESBPurchasedStandardsURI);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Purchase" id="6366c389-4459-419d-af48-56b5a11b49e4"><con:settings/><con:config><script>def procedure;

procedure = "[FB_01] Common -- TR_CPYRT001\n \n"
procedure = procedure + "Review the NAESB Purchased Standards website to verify the test applicant has purchased the NAESB REQ.21 Standard \n\n";
procedure = procedure + "1.  Locate the test applicant's name on the North American Energy Standards Board's (NAESB) 'Companies with Access to NAESB Standards' report." + "\n"
procedure = procedure + "2.  Verify the 'Retail Version(s)' column of the report's 'Standard Products' section contains evidence the test applicant purchased the \n     NAESB ESPI Standard [column includes '1.0', '2.0', '3.0', '1.0-1.2', '1.0-2.0', '1.0-2.1' version, 'Final Action (ESPI): 2011 Retail API 8c/R10008', \n     'REQ.21 (ESPI']', or 'REQ.21(ESPI)vx.x'\n\n";
procedure = procedure + "3.  If the test applicant has purchased the standard click 'YES'"
def ui = com.eviware.soapui.support.UISupport;

result = ui.getDialogs().confirm(procedure, "");
log.info (result)

if(result)
{
	assert("true");
} else {
testRunner.fail("Failed to verify purchase of standard");
}

context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase id="acf62110-632f-4c2a-b562-91179204d826" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CERT001 [POS] Verify ApplicationInformation entry contains valid Certification Link" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET ApplicationInformation and Verify Presence of GBACertId" id="1f425628-e5ba-4345-966c-41c42fa1a132"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation and Verify Presence of GBACertId" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="50e43d76-9d7f-479a-8aa7-5e4ad89b071e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b09aaf3f-1d9a-4165-a5c0-581dda295d72" name="Verify Presence of Certification Link"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
starts-with((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],'https://cert.greenbuttonalliance.org/certificate/')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="effab364-45e9-4fd5-85c6-1dc3be9611e5" name="Verify contents of Certification Link contains correct GBACertId"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
substring((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],string-length('https://cert.greenbuttonalliance.org/certificate/')+1)</path><content>${#Project#GBACertId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase id="ed82169b-e095-461b-9bed-5f3d051a2b7b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CERT002 [POS] Verify Authorization feed contains valid Certification Link" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="86840ce9-b579-4caa-91db-1247f0fdabeb"><con:settings/><con:config><script>log.info("[FB_01] Common -- CERT002 [POS] Verify Authorization feed contains valid Certification Link: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_01] Common -- CERT002 [POS]");
log.info("[FB_01] Common -- CERT002 [POS] Verify Authorization feed contains valid Certification Link: authorizationId: " + project.getPropertyValue("authorizationId"));
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="3db64c44-ab21-4594-a18f-ba7522acb029"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="aab97b21-eb7d-46f7-8428-62dd62d71d3e"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;


def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET and verify Authorization Feed");
def headers = new StringToStringMap();

log.info("[FB_01] Common -- CERT002 [POS] Verify Authorization feed contains valid Certification Link -- authCase('authorizationURI'): " + propCreateAuthResults.getPropertyValue("authorizationURI"));
log.info("[FB_01] Common -- CERT002 [POS] Verify Authorization feed contains valid Certification Link -- project('authorizationId'): " + project.getPropertyValue("authorizationId"));

def authorizationURIRootLength = propCreateAuthResults.getPropertyValue("authorizationURI").indexOf(project.getPropertyValue("authorizationId"));
log.info("[FB_01] Common -- CERT002 [POS] Verify Authorization feed contains valid Certification Link -- Length of authorizationURIRoot: " + authorizationURIRootLength);

def authorizationURIRoot = propCreateAuthResults.getPropertyValue("authorizationURI").substring(0,authorizationURIRootLength);

propTestStep.setPropertyValue("Endpoint",authorizationURIRoot);

log.info("[FB_01] Common -- CERT002 [POS] Verify Authorization feed contains valid Certification Link -- project('client_access_token'): Bearer " + project.getPropertyValue("client_access_token"));

headers.put("Authorization","Bearer " + project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET and verify Authorization Feed" id="162678d2-68dc-4e7e-952d-80df7ea90e2e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET and verify Authorization Feed" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fe6a24dc-9d74-4915-8ff5-b7de94296d82"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="18515314-7a7b-4253-8863-057b32675a2a" name="Verify Presence of Certification Link"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
starts-with((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],'https://cert.greenbuttonalliance.org/certificate/')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="53c5115e-0c9f-4a95-8c40-b4ee54606430" name="Verify contents of Certification Link contains correct GBACertId"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
substring((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],string-length('https://cert.greenbuttonalliance.org/certificate/')+1)</path><content>${#Project#GBACertId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase id="dc7aa3ef-ef6f-4822-93ff-639b7db24be4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CERT003 [POS] Verify Authorization entry contains valid Certification Link" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="210e1824-5913-425c-a5bb-66fbade6086a"><con:settings/><con:config><script>log.info("[FB_01] Common -- CERT003 [POS] Verify Authroization entry contains valid Certification Link: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_01] Common -- CERT003 [POS]");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="c574f312-3679-496a-88e1-691d1325b7c9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="f4839a0e-a34c-4892-8059-2812bb31390d"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
log.info("[FB_01] Common -- CERT003 [POS] Verify Authorization entry contains valid Certification Link -- project('client_access_token'): Bearer " + project.getPropertyValue("client_access_token"));

headers.put("Authorization","Bearer " + project.getPropertyValue("client_access_token"));headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers); </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id" id="afa234ff-a714-4d8e-89ac-0a36bd3de321"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119506</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fe6a24dc-9d74-4915-8ff5-b7de94296d82"><con:configuration><scriptText>import javax.xml.XMLConstants;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="ba7da5b8-c304-44d1-80ca-db285aee216a" name="Verify Presence of Certification Link"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
starts-with((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],'https://cert.greenbuttonalliance.org/certificate/')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="37f9b36a-4b03-4d2b-a043-0b43123fcccc" name="Verify contents of Certification Link contains valid GBACertId"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
substring((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],string-length('https://cert.greenbuttonalliance.org/certificate/')+1)</path><content>${#Project#GBACertId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase id="20bba088-d1d9-464a-9dd9-ac136fa83593" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CERT004 [POS] Verify Batch/Subscription feed contains valid Certification Link" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="3314ca04-cc8e-4425-81f2-f23dcc90286d"><con:settings/><con:config><script>log.info("[FB_01] Common -- CERT004 [POS] Verify Batch/Subscription feed contains valid Certification Link: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_01] Common -- CERT004 [POS]");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="126cc426-faa8-4a3f-925c-2b8c94642c2a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="f394f8fb-c036-43a2-a1fb-9f6b1dc64d4e"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Resource URI");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="14b94d89-863b-400a-9631-93e9235c2a97"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fUFY1ZDY2U24xcHRBMThUNlI1UUtiU3VFSmN0IiwgImF1dGhfaWRzIjogWzExOTUwNl0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTkc3OjRTNmxpSUVDWkJ5dUwzcDRHNUkxTzRrQ09rOA"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119506</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fe6a24dc-9d74-4915-8ff5-b7de94296d82" disabled="true"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="ba7da5b8-c304-44d1-80ca-db285aee216a" name="Verify Presence of Certification Link" disabled="true"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
starts-with((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],'https://cert.greenbuttonalliance.org/certificate/')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="37f9b36a-4b03-4d2b-a043-0b43123fcccc" name="Verify contents of Certification Link contains valid GBACertId" disabled="true"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
substring((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],string-length('https://cert.greenbuttonalliance.org/certificate/')+1)</path><content>${#Project#GBACertId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="InitializeLoop" id="60236f87-9197-4ca2-b5f9-78794e179d87"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:testStep type="groovy" name="StartLoopThroughFeeds" id="d11cc5e4-e292-4f43-9fe5-2ebd062db416"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;
import groovy.xml.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath;

if(context.holder==null)
{
	//context.responseParsed = "TRUE";
	def ResponseMessage = testRunner.testCase.testSteps["GET Resource URI"].testRequest.response.contentAsString;
//	log.info("resp:" + ResponseMessage);
	
	ResponseMessage = "&lt;dummyroot>" + ResponseMessage + "&lt;/dummyroot>";
	
	def holder;
	try{
		holder = groovyUtils.getXmlHolder(ResponseMessage);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	if(strCount.toInteger() &lt; 1){
		log.error("Error processing XML response: response must contain at lease one feed");
		testRunner.fail("Error processing XML response: response must contain at lease one feed");
		return;		
	}

	log.info("Resp contains " + strCount + " feed(s)");
	context.currentFeedIndex = strCount.toInteger();
	context.holder = holder;
}

if(context.currentFeedIndex &lt; 1) {
	testRunner.gotoStepByName("Done");
	return;
}

log.info("process feed # " + context.currentFeedIndex);

def feedNode = context.holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");

String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
//log.info("feed: " + strFeed);

context.currentFeed = strFeed;
context.currentFeedIndex--;

return ;</script></con:config></con:testStep><con:testStep type="groovy" name="SchemaValidation" id="882a4417-87ab-4a05-97d0-904c152668ce"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = context.currentFeed;
//log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try{
	v.validate(instanceDocument);
} catch(Exception e) {
	log.error("xml schema validation failed: " + e.getMessage());	
	testRunner.fail("xml schema validation failed: " + e.getMessage());	
	return;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify presence of certification link" id="e5758717-e0c4-4344-8d5c-f4d79772b7b4"><con:settings/><con:config><script>	import com.eviware.soapui.support.XmlHolder;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(context.currentFeed);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'ns3', 'http://www.w3.org/2005/Atom');
	holder.declareNamespace( 'espi', 'http://naesb.org/espi');

	String strResult = "0";
	try{
		strResult = holder.getNodeValue("starts-with((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],'https://cert.greenbuttonalliance.org/certificate/')")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	//log.info("result=" + strResult);

	if(strResult!="true") {
		log.error("Feed does not contain certification link.");
		testRunner.fail("Feed does not contain certification link.");
		return;		
	}

	return;

	</script></con:config></con:testStep><con:testStep type="groovy" name="Verify contents of Certification Link contains valid GBACertId" id="6d9f3432-7c44-464e-8a1b-615eba6e6d66"><con:settings/><con:config><script>	import com.eviware.soapui.support.XmlHolder;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(context.currentFeed);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'ns3', 'http://www.w3.org/2005/Atom');
	holder.declareNamespace( 'espi', 'http://naesb.org/espi');

	String strResult = "0";
	try{
		strResult = holder.getNodeValue("substring((//ns3:link[@rel='related' and starts-with(@href,'https://cert.greenbuttonalliance.org/certificate/')]/@href)[1],string-length('https://cert.greenbuttonalliance.org/certificate/')+1)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	log.info("cert link=" + strResult);

	if(strResult!=testRunner.testCase.testSuite.project.getPropertyValue("GBACertId")) {
		log.error("Feed does not contain correct certification link.");
		testRunner.fail("Feed does not contain correct certification link.");
		return;		
	}

	return;

	</script></con:config></con:testStep><con:testStep type="groovy" name="FeedLoop" id="26979dc3-56c5-41b7-a553-23c734618b70"><con:settings/><con:config><script>testRunner.gotoStepByName("StartLoopThroughFeeds");</script></con:config></con:testStep><con:testStep type="groovy" name="Done" id="6f5b3290-eb2a-4536-bcd4-0dcd3320078c"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel();
context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:properties/><con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite>
<con:testSuite name="[FB_03] Core Green Button Connect My Data" id="c8953f5e-e697-4dc8-b20a-edd5b8bb2eda">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND001 [POS] Initial Test Configuration" searchProperties="true" id="6f98eaed-016c-4e8a-b571-dc8759474507" disabled="true"><con:description>The ThirdParty tester requires the following initial information be provided as part of the application for certification and readiness for testing.
Verify this information has been received and that SoapUI has been configured with this information.

dataCustodianId="data_custodian"
federalEIN="123456"
dataCustodianResourceEndpoint="http://localhost:8080/DataCustodian/espi/1_1/resource/"
applicationInformationId="1"
authorizationId="1"
registration_access_token="1"
client_access_token="1"
client_id="test_third_party"
client_secret="secret"</con:description><con:settings/><con:testStep type="groovy" name="Load Configuration from gbcmdcert.conf" id="2f89d7a4-a43a-4f0b-9c57-c123f63eb425"><con:settings/><con:config><script>// load configuration
result=testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['LoadConfigCert']);

log.info "===== "+ result.status.toString() +" TestStep  =====> "  +  "Load Configuration from gbcmdcert.conf";
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Activate Hosts-stunnel" id="8f1dc141-1bc9-4ba6-9aa3-49c308e3d07e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="CheckOrGetRegistrationAccessToken" id="dba86a77-9453-4900-a767-05a3f4ecde0f"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def uri;	// lets check the DC uri

String registration_access_token = project.getPropertyValue("registration_access_token");

if (registration_access_token == "")
{
	// need to get it
	log.info "FND001 [POS] Initial Test Configuration - CheckOrGetRegistrationAccessToken: Need to obtain Registration Access Token";
}
else
{
	log.info "FND001 [POS] Initial Test Configuration - CheckOrGetRegistrationAccessToken -- registration_access_token: " + registration_access_token;
	testRunner.gotoStepByName( "Done 1");

}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRegistrationAccessToken" id="298e5152-1eb2-457a-9334-056d4b433ebe"><con:settings/><con:config service="ESPI Resources" resourcePath="" methodName="Client Credentials" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRegistrationAccessToken" mediaType="application/json" postQueryString="false" id="c2d8f4db-dd26-4546-a99e-770d3221f363">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:endpoint>${#Project#AuthorizationEndpoint}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
<con:assertion type="Valid HTTP Status Codes" id="26e96b62-01bc-4124-bbad-919f0182dac7" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
	<con:username>${#Project#registration_access_token_client_id}</con:username>
	<con:password>${#Project#registration_access_token_secret}</con:password>
	<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
	<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
	<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters>
  <con:entry key="scope" value="FB=36_40"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RegistrationAccessTokenParseJSONResponse" id="2abd567a-9438-4afd-b31e-08702bf32bb7"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def project = testRunner.testCase.testSuite.project
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

responseContent = testRunner.testCase.getTestStepByName("GetRegistrationAccessToken").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)
log.info "FND001 [POS] Initial Test Configuration - RegistrationAccessTokenParseJSONResponse -- JSON Response: " + slurperresponse
log.info "FND001 [POS] Initial Test Configuration - RegistrationAccessTokenParseJSONResponse -- Registration Access Token: " + slurperresponse.token_type + " " + slurperresponse.access_token

def applicationInformationResourceURI = slurperresponse.resourceURI;
def applicationInformationId = applicationInformationResourceURI.substring(applicationInformationResourceURI.lastIndexOf("/") + 1);

def applicationInformationAuthorizationURI = slurperresponse.authorizationURI;
def applicationInformationAuthorizationId = applicationInformationAuthorizationURI.substring(applicationInformationAuthorizationURI.lastIndexOf("/") + 1);

project.setPropertyValue("registration_access_token",slurperresponse.access_token);
project.setPropertyValue("applicationInformationId",applicationInformationId);
project.setPropertyValue("applicationInformationAuthorizationId",applicationInformationAuthorizationId);
authCase.setPropertyValue("registration_access_token",slurperresponse.access_token);
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 1" id="946c9122-385e-4b4b-bb98-1bce492b8621"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation by Id" id="32df3fe6-96cc-4680-a64c-81f44d3f9d56"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="76d44d45-b471-4f74-8aa9-8e1b64259cc6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="5aeef68b-2e8d-4476-bd9e-272782724009"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
count(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianScopeSelectionScreenURI)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>applicationInformationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Extract ApplicationInformation properties" id="64fc56a6-b8a6-4b4e-a4d0-20eed66f39ed"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>dataCustodianId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianId</con:sourcePath><con:targetType>dataCustodianId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" useXQuery="false" ignoreEmpty="false" transferChildNodes="false"><con:name>dataCustodianResourceEndpoint</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianResourceEndpoint</con:sourcePath><con:targetType>dataCustodianResourceUri</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>client_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_id</con:sourcePath><con:targetType>client_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>authorizationServerUri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerUri</con:sourcePath><con:targetType>authorizationServerUri</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>resourceServerUri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianResourceEndpoint</con:sourcePath><con:targetType>resourceServerUri</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianScopeSelectionScreenURI</con:sourcePath><con:targetType>dataCustodianScopeSelectionScreenURI</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>authorizationServerAuthorizationEndpoint</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerAuthorizationEndpoint</con:sourcePath><con:targetType>authorizationServerAuthorizationEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>authorizationServerTokenEndpoint</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerTokenEndpoint</con:sourcePath><con:targetType>authorizationServerTokenEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>redirect_uri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:redirect_uri</con:sourcePath><con:targetType>redirect_uri</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>client_secret</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_secret</con:sourcePath><con:targetType>client_secret</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>thirdPartyNotifyUri</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyNotifyUri</con:sourcePath><con:targetType>thirdPartyNotificationEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Parse ApplicationInformation" id="65cd1946-f4af-4c72-8ad5-bd546793d0fd"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def uri;	// lets check the DC uri


def proxyOutPort = project.getPropertyValue("proxyOutPort");
def proxyOutPort1 = project.getPropertyValue("proxyOutPort1");

///////////////////////////////////////
// Convert API URIs to proxied versions
///////////////////////////////////////

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxyOutPort)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxyOutPort + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxyOutPort + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}


service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");
/*
// parse out ServiceEndpoint and resourceURI -- must have "espi/1_1/resource"
uri = project.getPropertyValue("dataCustodianResourceEndpoint");
log.info "DC Resource Endpoint URI: " + uri;
uritemp = uri;
i = uritemp.indexOf("espi/1_1/resource");
if(i>0) {
	// lets shorten it by stripping off up to resource
	uritemp = uritemp.substring(0,i-1);
	log.info "DC ServiceEndpoint " + uritemp;

	//uritemp = GetProxiedUrl(uritemp, proxyOutPort);
	//uritemp = GetProxiedUrl(uritemp, genericGetServiceMockPort);
	URL aURL = new URL(project.getPropertyValue("dataCustodianResourceEndpoint"));
	def host = aURL?.getHost();
	
	project.setPropertyValue("ServiceEndpoint","http://" + host + ":" + genericGetServiceMockPort);
	
	uritemp = uri;
	uritemp = uritemp.substring(uritemp.indexOf("espi/1_1/resource"), uritemp.length());
	log.info "DC resourceUri: " + uritemp;
	project.setPropertyValue("resourceUri",uritemp);
	
}  else {
	// cant be a resource
	log.info ("DC Resource Endpoint Uri not well formed: " + uri);					
}
*/
// lets check the TP Notification uri
uri = project.getPropertyValue("thirdPartyNotificationEndpoint");
if(uri != null)
{
	log.info "TP Notification URI: " + uri;
	uritemp = uri;
	i = uritemp.indexOf("espi/1_1");
	if(i>0) {
		// lets shorten it by stripping off up to resource
		uritemp = uritemp.substring(0,i-1);
		log.info "TP NotificationEndpoint " + uritemp;
		project.setPropertyValue("NotificationEndpoint",uritemp);
		uritemp = uri;
		uritemp = uritemp.substring(uritemp.indexOf("espi/1_1"), uritemp.length());
		log.info "TP notificationUri: " + uritemp;
		project.setPropertyValue("notificationUri",uritemp);
		
	}  else {
		// cant be a resource
		log.info ("TP Notification Endpoint Uri not well formed: " + uri);					
	}
}
else
{
	testRunner.fail("Missing TP thirdPartyNotificationEndpoint");	
}

/*
// check URI and compute proxy version	
uritemp = project.getPropertyValue("authorizationServerTokenEndpoint");
if(uritemp != null)
{

	uritemp = GetProxiedUrl(uritemp, proxyOutPort1);
	project.setPropertyValue("authorizationServerTokenEndpoint",uritemp);

	URL aURL = new URL(uritemp);

	// get authorization server
	if (aURL.getPort().equals(-1))
	{
		project.setPropertyValue("authorizationServer",aURL.getHost()  );
	}
	else {
		project.setPropertyValue("authorizationServer",aURL.getHost() + ":" +aURL.getPort());
	}
}
*/

// transfer to Authorization Case where other tests are looking
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('access_token'): " + project.getPropertyValue("access_token"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('token_type'): " + project.getPropertyValue("token_type"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('refresh_token'): " + project.getPropertyValue("refresh_token"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('expires_in'): " + project.getPropertyValue("expires_in"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('scope'): " + project.getPropertyValue("scope"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('resourceURI'): " + project.getPropertyValue("resourceURI"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationURI'): " + project.getPropertyValue("authorizationURI"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('dataCustodianScopeSelectionScreenURI'): " + project.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('redirect_uri'): " + project.getPropertyValue("redirect_uri"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerTokenEndpoint'): " + project.getPropertyValue("authorizationServerTokenEndpoint"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('OAuthCodeReceivedValue'): " + project.getPropertyValue("OAuthCodeReceivedValue"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('client_id'): " + project.getPropertyValue("client_id"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('client_secret'): " + project.getPropertyValue("client_secret"));

//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('authorizationServerTokenEndpoint'): " + project.getPropertyValue("authorizationServertokenEndpoint"));

//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('resourceServer'): " + project.getPropertyValue("resourceServer"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('mockPort'): " + project.getPropertyValue("mockPort"));
//log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' project.getPropertyValue('proxyOutPort'): " + project.getPropertyValue("proxyOutPort"));

authCase.setPropertyValue("access_token",project.getPropertyValue("access_token"));
authCase.setPropertyValue("token_type",project.getPropertyValue("token_type"));
authCase.setPropertyValue("refresh_token",project.getPropertyValue("refresh_token"));
authCase.setPropertyValue("expires_in",project.getPropertyValue("expires_in"));
authCase.setPropertyValue("scope",project.getPropertyValue("scope"));
authCase.setPropertyValue("resourceURI",project.getPropertyValue("resourceURI"));
authCase.setPropertyValue("authorizationURI",project.getPropertyValue("authorizationURI"));
authCase.setPropertyValue("dataCustodianScopeSelectionScreenURI",project.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
authCase.setPropertyValue("authorizationServerAuthorizationEndpoint",project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
authCase.setPropertyValue("redirect_uri",project.getPropertyValue("redirect_uri"));
authCase.setPropertyValue("authorizationServerTokenEndpoint",project.getPropertyValue("authorizationServerTokenEndpoint"));
authCase.setPropertyValue("OAuthCodeReceivedValue",project.getPropertyValue("OAuthCodeReceivedValue"));
authCase.setPropertyValue("client_id",project.getPropertyValue("client_id"));
authCase.setPropertyValue("client_secret",project.getPropertyValue("client_secret"));
authCase.setPropertyValue("client_access_token_client_id",project.getPropertyValue("client_access_token_client_id"));
authCase.setPropertyValue("client_access_token_secret",project.getPropertyValue("client_access_token_secret"));



authCase.setPropertyValue("authorizationServerAuthorizationEndpoint",project.getPropertyValue("authorizationServerAuthorizationEndpoint"));
authCase.setPropertyValue("authorizationServerTokenEndpoint",project.getPropertyValue("authorizationServerTokenEndpoint"));

authCase.setPropertyValue("resourceServer",project.getPropertyValue("resourceServer"));


authCase.setPropertyValue("mockPort",project.getPropertyValue("mockPort"));
authCase.setPropertyValue("proxyOutPort",project.getPropertyValue("proxyOutPort"));

log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('access_token'): " + authCase.getPropertyValue("access_token"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('token_type'): " + authCase.getPropertyValue("token_type"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('refresh_token'): " + authCase.getPropertyValue("refresh_token"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('expires_in'): " + authCase.getPropertyValue("expires_in"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('scope'): " + authCase.getPropertyValue("scope"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('resourceURI'): " + authCase.getPropertyValue("resourceURI"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationURI'): " + authCase.getPropertyValue("authorizationURI"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('dataCustodianScopeSelectionScreenURI'): " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('redirect_uri'): " + authCase.getPropertyValue("redirect_uri"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerTokenEndpoint'): " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('OAuthCodeReceivedValue'): " + authCase.getPropertyValue("OAuthCodeReceivedValue"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('client_id'): " + authCase.getPropertyValue("client_id"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('client_secret'): " + authCase.getPropertyValue("client_secret"));

log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerAuthorizationEndpoint'): " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('authorizationServerTokenEndpoint'): " + authCase.getPropertyValue("authorizationServertokenEndpoint"));

log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('resourceServer'): " + authCase.getPropertyValue("resourceServer"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('mockPort'): " + authCase.getPropertyValue("mockPort"));
log.info("FND001 Initial Test Configuration -- 'Parse ApplicationInformation' authCase.getPropertyValue('proxyOutPort'): " + authCase.getPropertyValue("proxyOutPort"));
</script></con:config></con:testStep><con:testStep type="groovy" name="CheckOrGetClientAccessToken" id="3078dbd8-8cba-4cbb-a44e-6e17e8479d38"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def uri;	// lets check the DC uri

String client_access_token = project.getPropertyValue("client_access_token");

if (client_access_token == "")
{
	// need to get it
	log.info "FND001 [POS] Initial Test Configuration - CheckOrGetClientAccessToken: Need to obtain Client Access Token";
}
else
{
	log.info "FND001 [POS] Initial Test Configuration - CheckOrGetClientAccessToken -- client_access_token: " + client_access_token;
	testRunner.gotoStepByName( "Done");

}
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetClientAccessToken" id="c440acdc-4e2e-43c7-9411-48fae67f78cf"><con:settings/><con:config service="ESPI Resources" resourcePath="" methodName="Client Credentials" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetClientAccessToken" mediaType="application/json" postQueryString="false" id="9ba40594-5ba1-490b-b4b8-0547108733e3">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#AuthorizationEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
	<con:assertion type="Valid HTTP Status Codes" id="dbd9c6a4-fc49-4e2c-a4a1-267e768ef00b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
		<con:username>${#Project#client_access_token_client_id}</con:username>
		<con:password>${#Project#client_access_token_secret}</con:password>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
		<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
		<con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters>
  <con:entry key="scope" value="${#Project#scope}"/>
  <con:entry key="grant_type" value="client_credentials"/>
</con:parameters>
	<con:parameterOrder><con:entry>grant_type</con:entry><con:entry>scope</con:entry></con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ParseJSONResponse" id="2a318bc3-be68-47b4-9c89-f0ac55563644"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def project = testRunner.testCase.testSuite.project
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

responseContent = testRunner.testCase.getTestStepByName("GetClientAccessToken").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

log.info "FND001 [POS] Initial Test Configuration - ParseJSONResponse -- JSON Response: " + slurperresponse
log.info "FND001 [POS] Initial Test Configuration - ParseJSONResponse -- Client Access Token: " + slurperresponse.token_type + " " + slurperresponse.access_token

project.setPropertyValue("client_access_token",slurperresponse.access_token);
//authCase.setPropertyValue("client_access_token",slurperresponse.access_token);

//PGE HACK
if(project.getPropertyValue("client_access_token")==null)
{
	project.setPropertyValue("client_access_token",slurperresponse.client_access_token);
//	authCase.setPropertyValue("client_access_token",slurperresponse.client_access_token)	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Done" id="29dbe879-6273-4c43-a04c-a23d39307da1"><con:settings/><con:config><script/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND002 [POS][R] Authorized GET access to ApplicationInformation entry" searchProperties="true" id="720bfc98-a2d2-4679-a25c-1ab6b2ec6cb6"><con:settings/><con:testStep type="restrequest" name="GET and verify ApplicationInformation" id="57b667a0-6564-4fdc-a39e-33cc2ffb07fa"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET and verify ApplicationInformation" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="50e43d76-9d7f-479a-8aa7-5e4ad89b071e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema validation" id="1d9dd3c9-e60f-4d34-943d-d4ec5549c069"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="dataCustodianApplicationStatus must contain a value of 1,2,3 or 4" id="8f1eccbb-ec10-4306-9cb1-e84adcf394a5"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianApplicationStatus=1 or
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianApplicationStatus=2 or
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianApplicationStatus=3 or
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianApplicationStatus=4</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="token_endpoint_auth_method must contain the value client_secret_basic" id="c51f6647-e7e2-45cc-b561-7ce6be462b2f"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:token_endpoint_auth_method='client_secret_basic'</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="grant_types must contain a value of authorization_code, refresh_token or client_credentials" id="79f830b2-a78d-449c-a04b-19a40229695f"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:grant_types='authorization_code') or
(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:grant_types='refresh_token') or 
(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:grant_types='client_credentials')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="response_types must be 'code'" id="af6b6165-1df4-4ad2-b1ec-8a77a6952467"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:response_types='code'</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND003 [POS][C] Authorized GET access to Authorization feed" searchProperties="true" id="0d8885cd-82a7-48ad-8144-1a20113fd8a9"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="b8766406-03ae-4f3b-9a19-9636868dc8c8"><con:settings/><con:config><script>log.info("[FB_03] Core Green Button Connect My Data -- FND003 [POS][C] Authorized GET access to Authorization feed: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_03] Core Green Button Connect My Data -- FND003 [POS][C]");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="3c450b9d-8a80-4c64-9169-8cf2f8c7b317"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="e8bcacb0-8084-48b7-b351-53b2579361d5"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;


def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET and verify Authorization Feed");
def headers = new StringToStringMap();

//log.info("authorizationURI: " + propCreateAuthResults.getPropertyValue("authorizationURI"));
//log.info("authorizationId: " + propCreateAuthResults.getPropertyValue("authorizationId"));

def authorizationURIRootLength = propCreateAuthResults.getPropertyValue("authorizationURI").indexOf(propCreateAuthResults.getPropertyValue("authorizationId"));
//log.info("Length of authorizationURIPath: " + authorizationURIRootLength);
def authorizationURIRoot = propCreateAuthResults.getPropertyValue("authorizationURI").substring(0,authorizationURIRootLength);
//log.info("authorizationURIRoot: " + authorizationURIRoot);

propTestStep.setPropertyValue("Endpoint",authorizationURIRoot);
//headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("client_access_token"));
headers.put("Authorization","Bearer " + project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET and verify Authorization Feed 1");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET and verify Authorization Feed" id="7b1cf995-946d-4a44-8c4a-00a23a4330f9"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET and verify Authorization Feed" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fe6a24dc-9d74-4915-8ff5-b7de94296d82"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND004 [POS][C] Authorized GET access to Authorization entry" searchProperties="true" id="5f6945b3-0e08-4d6a-ab73-114465502a91"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="582fe7d9-892a-44b6-bf98-3c4ea98abbe2"><con:settings/><con:config><script>log.info("[FB_03] Core Green Button Connect My Data -- FND003 [POS][C] Authorized GET access to Authorization entry: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_03] Core Green Button Connect My Data -- FND004 [POS][C]");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="35c28f2e-f7dd-49dc-86f3-351fe2a9fa4a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="543b3c59-616f-4c48-824d-7f867e7d0105"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
headers.put("Authorization","Bearer " + project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id" id="9b10f568-faf5-4160-b0fc-bbeb915fba19"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119506</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fe6a24dc-9d74-4915-8ff5-b7de94296d82"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="dd2c8e9e-6b88-4849-a0a3-f15e0ba06e9b" name="XPath Match"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';

/ns3:entry/ns3:content/espi:Authorization/espi:expires_at and 
/ns3:entry/ns3:content/espi:Authorization/espi:scope and
/ns3:entry/ns3:content/espi:Authorization/espi:token_type and 
/ns3:entry/ns3:content/espi:Authorization/espi:resourceURI and
/ns3:entry/ns3:content/espi:Authorization/espi:authorizationURI and
( not(/ns3:entry/ns3:content/espi:Authorization/espi:status) or (ns3:entry/ns3:content/espi:Authorization/espi:status='0') or (ns3:entry/ns3:content/espi:Authorization/espi:status='1') or (ns3:entry/ns3:content/espi:Authorization/espi:status='2'))</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND005 [POS][A] Authorized GET access to Batch/Subscription feed" searchProperties="true" id="d62e2649-ece3-49b5-ac10-ee1ec70600b7"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="577a2646-eab8-4ce6-ad00-4687e5d19ba9"><con:settings/><con:config><script>log.info("[FB_03] Core Green Button Connect My Data -- FND003 [POS][C] Authorized GET access to Batch/Subscription feed: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_03] Core Green Button Connect My Data -- FND005 [POS][A]");</script></con:config></con:testStep><con:testStep type="groovy" name="InformUser" id="4f311188-09b7-4e10-a867-ec278e6f69bd"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;

//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
log.info("FND005 [POS] [A] Authorized GET access to Batch/Subscription feed 'informUser' -- client_secret: " + authCase.getPropertyValue("client_secret"));



String strFBsNotTested = "";
String strFBsPassed = "";

int iCntRemaining = 0;

for(Object object : context.listFBsToTest) {
	String strFB = (String) object;

	//if(context.mapFBsTested.get(strFB)!=true)
	if(context.mapFBsPassed.get(strFB)!=true)
	{
		iCntRemaining++;
		if(strFBsNotTested!=""){
			strFBsNotTested = strFBsNotTested + "_" + strFB;
		} else {
			strFBsNotTested = strFB;
		}
	} else {
		if(strFBsPassed!=""){
			strFBsPassed = strFBsPassed + "_" + strFB;
		} else {
			strFBsPassed = strFB;
		}		
	}

}

if(iCntRemaining == 0) {
	testRunner.gotoStepByName("Done");
	return;
}

//
// Build instruction screen dialog message
//
//String strDialog = "The following function blocks are to be certified:\r\n'" + context.strCertDataScopes + "'\r\n\r\n\
//The following FBs Have been tested and have passed:\r\n '" + strFBsPassed + "'\r\n\r\n\
//The following FBs Have not yet been tested or have failed:\r\n '" + strFBsNotTested + "'\r\n\r\n\
//Please continue to create authorizations untill all function blocks shown above have been tested.\r\n\r\n\
//Please click Yes to continue testing or No to terminate testing.\r\n";

// Do not display Instructions on first pass

if(project.getProperty("authorizationId") == "" || strFBsPassed != "") {

  String strDialog = "The following function blocks are to be certified:\r\n'" + context.strCertDataScopes + "'\r\n\r\n"
  if(strFBsPassed !="") {
    strDialog = strDialog + "The following FBs have been tested and have passed:\r\n '" + strFBsPassed + "'\r\n\r\n";
  } else {
    strDialog = strDialog + "The following FBs have been tested and have passed:\r\n 'No FBs have PASSED'\r\n\r\n";
  }
  strDialog = strDialog + "The following FBs have not been tested or have failed:\r\n '" + strFBsNotTested + "'\r\n\r\n";
  strDialog = strDialog + "Please continue to create authorizations until all FBs shown above have been tested.\r\n\r\n";
  strDialog = strDialog + "Please click YES to continue testing or NO to terminate testing.\r\n";

  strMessage = project.getPropertyValue("CMDTestStep") + "\n\n" + strDialog

  //result = ui.getDialogs().confirm(strDialog, "Continue Tests");
  result = ui.getDialogs().confirm(strMessage, "Continue Tests");

  log.info("FND005 Testing completed. The following tests passed:: " + strFBsPassed);

  if(result==false) {
    log.info("FND005 [POS] [A] Authorized GET access to Batch/Subscription feed 'informUser' -- response: No");	
    log.error("Failed FB validation tests. Testing terminated by user. The following test either not perfomred or not tested: " + strFBsNotTested);
    testRunner.fail("Failed FB validation tests. Testing terminated by user.");
    return;	
  }

  if(strFBsPassed != "") {
    // Force a new Authorization request
    project.setPropertyValue("authorizationId", "");
  }

  log.info("FND005 [POS] [A] Authorized GET access to Batch/Subscription feed 'informUser' -- response: YES");
  log.info("FND005 [POS] [A] Authorized GET access to Batch/Subscription feed 'informUser' -- client_secret: " + authCase.getPropertyValue("client_secret"));
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="61dcca52-4fb1-41aa-8b29-60e0be6004d0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="5639abcf-7a15-47fb-8c1e-1158091388f6"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
def headers = new StringToStringMap();

log.info("propCreateAuthResults Resource Endpoint: " + propCreateAuthResults.getPropertyValue("resourceURI"));
log.info("propCreateAuthResults Resource Server Endpoint: " + propCreateAuthResults.getPropertyValue("resourceServerURI"));

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

propTestStep = context.testCase.getTestStepByName("GET Authorization URI");
headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="385eca90-b9e6-4646-a4d3-7ff3576f1042"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fUFY1ZDY2U24xcHRBMThUNlI1UUtiU3VFSmN0IiwgImF1dGhfaWRzIjogWzExOTUwNl0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTkc3OjRTNmxpSUVDWkJ5dUwzcDRHNUkxTzRrQ09rOA"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119506</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fe6a24dc-9d74-4915-8ff5-b7de94296d82" disabled="true"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="InitializeLoop" id="581404cd-88ad-405e-b7d8-3892c5c6e948"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:testStep type="groovy" name="StartLoopThroughFeeds" id="4d9f6f7d-d14d-498a-b9a4-c21f187f2125"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;
import groovy.xml.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath;

if(context.holder==null)
{
	//context.responseParsed = "TRUE";
	def ResponseMessage = testRunner.testCase.testSteps["GET Resource URI"].testRequest.response.contentAsString;
//	log.info("resp:" + ResponseMessage);
	
	ResponseMessage = "&lt;dummyroot>" + ResponseMessage + "&lt;/dummyroot>";


	def holder;
	try{
		holder = groovyUtils.getXmlHolder(ResponseMessage);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	if(strCount.toInteger() &lt; 1){
		log.error("Error processing XML response: response must contain at lease one feed");
		testRunner.fail("Error processing XML response: response must contain at lease one feed");
		return;		
	}

	log.info("Resp contains " + strCount + " feed(s)");
	context.currentFeedIndex = strCount.toInteger();
	context.holder = holder;
}

if(context.currentFeedIndex &lt; 1) {
	testRunner.gotoStepByName("GET Authorization URI");
	return;
}

log.info("process feed # " + context.currentFeedIndex);

def feedNode = context.holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");

String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
//log.info("feed: " + strFeed);

context.currentFeed = strFeed;
context.currentFeedIndex--;

return ;</script></con:config></con:testStep><con:testStep type="groovy" name="SchemaValidation" id="b02bd494-90b6-4101-bdcf-54839459aa43"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = context.currentFeed;
//log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try{
	v.validate(instanceDocument);
} catch(Exception e) {
	log.error("xml schema validation failed: " + e.getMessage());	
	testRunner.fail("xml schema validation failed: " + e.getMessage());	
	return;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="FB Data Validation Tests" id="e07e9e92-d45a-4220-a1e6-b154b16a7d35"><con:settings/><con:config><script>import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	//def ResponseMessage = testRunner.testCase.testSteps["GET Resource URI"].testRequest.response.contentAsString;
	def ResponseMessage = context.currentFeed;
	def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service");
	
	
	String strPassedTests = "";
	boolean bFirst = true;

	// only try tests being certified
	for(Object object : context.listFBsToTest) {
		String strFB = (String) object;
		boolean bFailure = false;

		//log.info("Running data test for FB:" + strFB);
	
		String strFBTestXSLT = groovyUtils.projectPath + "/fnBlockTests/FB_" + sprintf('%02d',strFB.toInteger()) + ".xsl";
 	
		java.io.StringWriter sw=new java.io.StringWriter();
		StreamResult sr=new StreamResult(sw);
		
		StringReader readerResponseBody = new StringReader(ResponseMessage);		
		
		def factory = TransformerFactory.newInstance();
		def transformer = factory.newTransformer(new StreamSource(strFBTestXSLT));
		transformer.transform(new StreamSource(readerResponseBody), sr);
		 
		def holder;
		try{
			holder = groovyUtils.getXmlHolder(sw.toString());
		} catch(org.apache.xmlbeans.XmlException e) {
			log.error("Invalid xslt result body:" + e.toString());
			bFailure = true;
			break;
		}
		
		if(!bFailure) {
			String strCount = "0";
			try{
				strCount = holder.getNodeValue("count(//assert)")
			} catch(org.apache.xmlbeans.XmlException e) {
				log.error("Invalid xslt body: " + e.toString());
				bFailure = true;
				break;
			}
			
			for(int i=1;i&lt;strCount.toInteger()+1;i++){
				String strTestID = holder.getNodeValue("//assert[" + i + "]/@TestID");
				String strTestName = holder.getNodeValue("//assert[" + i + "]/TestName");
				String strReport = holder.getNodeValue("//assert[" + i + "]/Report");		
				log.info("FB [" + strFB + "] Failed Test ID: " + strTestID + " Name: '" + strTestName + "' Report: '" + strReport + "'");
				bFailure = true;
			}		

			if(strCount.toInteger()==0){
				// passed
				if(bFirst){
					bFirst = false;
					strPassedTests = strFB;
				} else {
					strPassedTests += "_" + strFB;
				}
			}
		}

		if(bFailure) {
			log.info("Failed data test for FB:" + strFB);
			context.mapFBsFailed.put(strFB,true);
		} else {
			log.info("Passed data test for FB:" + strFB);
			context.mapFBsPassed.put(strFB,true);
		}

	}


</script></con:config></con:testStep><con:testStep type="groovy" name="FeedLoop" id="b521cd88-614c-4388-a597-dd535b57a2c7"><con:settings/><con:config><script>testRunner.gotoStepByName("StartLoopThroughFeeds");</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization URI" id="d5d39f3b-710c-4076-a698-9bccfdadbb49"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization URI" id="81e49c44-9f6d-48d9-b15b-26d827d5f235" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119506</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="88efefb2-ecd7-4037-9d72-45735d67aa2f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema validation" id="1c62b622-4dea-4211-9334-0fad55ab55ab"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
//log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Goto begining" id="17281b65-15ef-47ee-aabf-1fb2795110f9"><con:settings/><con:config><script>// Branch to first Test Step to continue
testRunner.gotoStepByName("InformUser");
return;
</script></con:config></con:testStep><con:testStep type="groovy" name="Done" id="ba955ef3-ea8e-491d-abe6-7de4a0cb7d7c"><con:settings/><con:config><script>log.info "End Script Test Step";
context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;

assert true;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()
testRunner.testCase.setPropertyValue("testsPerformed","");
context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;

String strCertScopes = testRunner.testCase.testSuite.project.getPropertyValue("certScopes");
log.info "CertScopes to test: " + strCertScopes;

strCertScopes = strCertScopes.replace("FB=","");

List listFBsToTestTemp = strCertScopes.tokenize("_");
List listFBsToTest = [];
context.listFBsToTest = listFBsToTest;

String strCertDataScopes;

for(Object object : listFBsToTestTemp) {
	String strFB = (String) object;
	if((strFB=="1")||(strFB=="4")||(strFB=="5")||(strFB=="6")||(strFB=="7")||(strFB=="8")||(strFB=="9")||(strFB=="10")||
		(strFB=="11")||(strFB=="12")||(strFB=="15")||(strFB=="16")||(strFB=="17")||(strFB=="27")||(strFB=="28")||(strFB=="29")||(strFB=="99")){
			context.listFBsToTest.add(strFB);
			if(strCertDataScopes==null){ 
				strCertDataScopes = strFB;
			} else {
				strCertDataScopes = strCertDataScopes + "_" + strFB;
			}
		}
}

context.strCertDataScopes = strCertDataScopes;

log.info "Cert Data Scopes to test: " + context.strCertDataScopes;


def mapFBsTested = [:];
def mapFBsPassed = [:];
def mapFBsFailed = [:];
context.mapFBsTested = mapFBsTested;
context.mapFBsPassed = mapFBsPassed;
context.mapFBsFailed = mapFBsFailed;</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();

context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:tearDownScript><con:properties><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>extracted_scope_sel_uri</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>iCntRemaining</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>testsPerformed</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FND006 [POS][C] Authorized GET access to ReadServiceStatus" searchProperties="true" id="a5744784-2b85-461b-b265-c3ee56742237">
	<con:settings/>
	<con:testStep type="restrequest" name="GET and verify ServiceStatus" id="a6593c74-f056-4e74-aa11-1754c524e692">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET and verify ServiceStatus" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d3e7ed27-dd63-4c67-90fc-ef215e27b966">
			<con:configuration>
				<codes>200</codes>
			</con:configuration>
		</con:assertion>
		<con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="951fdfec-f1d8-4add-81ce-9d233b6aa0bc"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="b5d41889-dc30-4195-bd11-36bceb2656a7">
			<con:configuration><path>declare namespace espi='http://naesb.org/espi';
					/espi:ServiceStatus/espi:currentStatus</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
		</con:assertion>
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep>
<con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
</con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite>
<con:testSuite name="[FB_13] Security and Privacy" id="b36f2150-030a-4a0f-a27b-b21258b4eb97">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC001 Use of HTTPS" searchProperties="true" id="f7eef33d-5d99-4f2c-83c0-504725b1b0d8"><con:description>Verify the Data Custodian under test response HTTP header contains field indicating establishment of a secure session.</con:description><con:settings/><con:testStep type="restrequest" name="Use of HTTPS" id="f34f632e-31d3-4085-a7da-0cac6d222372"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Use of HTTPS" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="50e43d76-9d7f-479a-8aa7-5e4ad89b071e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema validation" id="1d9dd3c9-e60f-4d34-943d-d4ec5549c069"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e62c2cf5-1658-4905-99aa-639079a5e9dc" name="Script Assertion"><con:configuration><scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder

public boolean TestUrl(holder,String urlName)
{
	log.info "Testing URL: " + urlName ;
	String url = holder.getNodeValue(urlName); 

	// could be not present -- schema validation in prior step ensures
	//	required urls are present
	if(url == null){
		log.error("Entry: " + urlName + "contains null value");
		return false;
	}

		
	def aURL = new URL (url);

	if (aURL.getProtocol() != "https") {
		log.error("Entry: " + urlName + ":" +  url + " not using https")
		return false;
	}
	else {
		return true;
	}
}

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = new XmlHolder( messageExchange.responseContentAsXml);
holder.declareNamespace( 'espi', 'http://naesb.org/espi');
holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

/*
v =  holder.getNodeValue("//espi:authorizationServerUri");

//log.info "count: " + strCount + v;
log.info "value: " + v ;
log.info v.getClass();
r = TestUrl(v);

if(v != null)
	log.info "value: " + v + "Test result: " + TestUrl(v);
*/
boolean bResult = true;
bResult = bResult &  TestUrl(holder,"//espi:authorizationServerUri");
bResult = bResult &  TestUrl(holder,"//espi:thirdPartyNotifyUri");
bResult = bResult &  TestUrl(holder,"//espi:authorizationServerAuthorizationEndpoint");

/*
 *   The authorizationServerRegistrationEndpoint is only required if the test applicant
 *   is being certified as compliant with [FB_36], which is not currently implemented.
 *   
 *   ToDo: Conditionally test for [FB_36] Function block certification as a condition
 *         to verify presence of authorizationServerRegistrationEndpoint
 * 
bResult = bResult &  TestUrl(holder,"//espi:authorizationServerRegistrationEndpoint");
*/

bResult = bResult &  TestUrl(holder,"//espi:authorizationServerTokenEndpoint");
bResult = bResult &  TestUrl(holder,"//espi:dataCustodianBulkRequestURI");
bResult = bResult &  TestUrl(holder,"//espi:dataCustodianResourceEndpoint");
bResult = bResult &  TestUrl(holder,"//espi:thirdPartyScopeSelectionScreenURI");
bResult = bResult &  TestUrl(holder,"//espi:thirdPartyUserPortalScreenURI");
//bResult = bResult &  TestUrl(holder,"//espi:logo_uri");
bResult = bResult &  TestUrl(holder,"//espi:client_uri");
bResult = bResult &  TestUrl(holder,"//espi:redirect_uri");
bResult = bResult &  TestUrl(holder,"//espi:registration_client_uri");
bResult = bResult &  TestUrl(holder,"//espi:dataCustodianScopeSelectionScreenURI");

if(!bResult){
	throw new Error("Missing https in URL.");
}]]></scriptText></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC003 Data Custodian implements TLS 1.2" searchProperties="true" id="cc542435-5c48-47a7-b851-cea36d8e1e97"><con:description>Verify the Data Custodian under test implements TLS 1.2.</con:description><con:settings/><con:testStep type="groovy" name="Verify support for TLS 1.2 using OpenSSL" id="fdd42250-b01b-45c9-ada4-bd324456c1ce">
	<con:settings/>
	<con:config><script>def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def ts = tc.getTestStepByName("runCommand");

def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue( "resourceServerPort" );
def opensslCmd = project.getPropertyValue("opensslCmd");
def String strResult ;
def String returnCode;

tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","2");

// check the authorization server
log.info "Testing authorizationServer: " + authorizationServer;
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -CApath " + project.getPropertyValue("CApathDirectory") + " -verify 10 -showcerts -cert stunnel.pem -connect " + authorizationServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");
returnCode = tc.getPropertyValue("returncode");

if(strResult.contains("Protocol  : TLSv1.2") &amp;&amp; (returnCode.equals("0"))){
	log.info("Authorization Server: " + authorizationServer + " implemented TLS 1.2 as required");
	assert true;
} else {
	log.info "Authorization Server: " + authorizationServer + " did not implement TLS 1.2 as required";
	testRunner.fail("Authorization Server: " + authorizationServer + " did not implement TLS 1.2 as required");
}

// check the resource server
log.info "Testing resourceServer: " + resourceServer;
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -CApath " + project.getPropertyValue("CApathDirectory") + " -verify 10 -showcerts -cert stunnel.pem -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");
returnCode = tc.getPropertyValue("returncode");


if(strResult.contains("Protocol  : TLSv1.2") &amp;&amp; (returnCode.equals("0"))){
	log.info("Resource Server: " + resourceServer + " implemented TLS 1.2 as required");
	assert true;
} else {
	log.info "Resource Server: " + resourceServer + " did not implement TLS 1.2 as required";
	testRunner.fail("Resource Server: " + resourceServer + " did not implement TLS 1.2 as required");
}



//log.info tc.getPropertyValue("cmd");
//log.info strResult;


//strResult.eachLine {
//	line -> log.info(line);
//};







</script></con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC004 Negotiate highest level of TLS with browser" searchProperties="true" id="7f7c64e4-c822-40c6-a1de-3c4a6606cac2"><con:description>Verify that when communicating with a Retail Customer the Data Custodian negotiates the highest level of TLS supported by both parties.</con:description><con:settings/><con:testStep type="groovy" name="Verify that when communicating with a Retail Customer or Third Party the Data Custodian negotiates the highest level of TLS mutually supported." id="fd88994e-0e32-4282-a0a2-b8086f83dbc8">
	<con:settings/>
	<con:config><script><![CDATA[def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def String strResult;

def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue( "resourceServerPort" );
def opensslCmd = project.getPropertyValue("opensslCmd");
sslport="443";
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","2");

// for authorizationServer
log.info "===== Testing authorizationServer: " + authorizationServer + " =====";
// see if tls 1.2 is negotiated
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1 -tls1_1 -tls1_2 -cert stunnel.pem -connect " + authorizationServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if( (strResult.contains("Protocol  : TLSv1.2")) && (!strResult.contains("Cipher    : 0000"))){
	log.info("Authorization Server: " + authorizationServer + " successfully supports TLS 1.2 as required");
} else {
	log.info "Authorization Server: " + authorizationServer + " failed to support TLS 1.2 as required";
	testRunner.fail("Authorization Server: " + authorizationServer + " failed to support TLS 1.2 as required");
}


// next see if tls 1.1 is negotiated
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1 -tls1_1 -cert stunnel.pem -connect " + authorizationServer );
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if( (strResult.contains("Protocol  : TLSv1.1")) && (!strResult.contains("Cipher    : 0000"))){
	log.info("Authorization Server: " + authorizationServer + " successfully supports TLS 1.1 as required");
} else {
	log.info "Authorization Server: " + authorizationServer + " failed to support TLS 1.1 as required"
	testRunner.fail("Authorization Server: " + authorizationServer + " failed to support TLS 1.1 as required");
}

// next see if tls 1.0 is negotiated
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1 -cert stunnel.pem -connect " + authorizationServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if( (strResult.contains("Protocol  : TLSv1")) && (!strResult.contains("Cipher    : 0000"))){
	log.info("Authorization Server: " + authorizationServer + " successfully supports TLS 1 as required");
} else {
	log.info "Authorization Server: " + authorizationServer + " failed to support TLS 1 as required";
	testRunner.fail("Authorization Server: " + authorizationServer + " failed to support TLS 1 as required");
}


// for resourceServer
log.info "===== Testing resourceServer: " + resourceServer + " =====";

// see if tls 1.2 is negotiated
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -tls1 -tls1_1 -tls1_2 -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if( (strResult.contains("Protocol  : TLSv1.2")) && (!strResult.contains("Cipher    : 0000"))){
	log.info("Resource Server: " + resourceServer + " successfully supports TLS 1.2 as required");
} else {
	log.info "Resource Server: " + resourceServer + " failed to support TLS 1.2 as required";
	testRunner.fail("Resource Server: " + resourceServer + " failed to support TLS 1.2 as required");
}


// next see if tls 1.1 is negotiated
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -tls1 -tls1_1 -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if( (strResult.contains("Protocol  : TLSv1.1")) && (!strResult.contains("Cipher    : 0000"))){
	log.info("Resource Server: " + resourceServer + " successfully supports TLS 1.1 as required");
} else {
	log.info "Resource Server: " + resourceServer + " failed to support TLS 1.1 as required";
	testRunner.fail("Resource Server: " + resourceServer + " failed to support TLS 1.1 as required");
}

// next see if tls 1.0 is negotiated
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -tls1 -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if( (strResult.contains("Protocol  : TLSv1")) && (!strResult.contains("Cipher    : 0000"))){
	log.info("Resource Server: " + resourceServer + " successfully supports TLS 1 as required");
} else {
	log.info "Resource Server: " + resourceServer + " failed to support TLS 1 as required"
	testRunner.fail("Resource Server: " + resourceServer + " failed to support TLS 1 as required");
}


return;

]]></script></con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC005 Reject TLS_RSA_WITH_NULL_SHA cipher suite" searchProperties="true" id="75a32bde-dad0-4684-b02c-dcb1a2804aae"><con:description>Verify that when communicating with a Retail Customer the Data Custodian rejects TLS_RSA_WITH_NULL_SHA cipher suites.</con:description><con:settings/><con:testStep type="groovy" name="Reject TLS_RSA_WITH_NULL_SHA cipher suite" id="43eba2ae-ef55-4e11-add0-7dfef83c3040">
	<con:settings/>
	<con:config><script>def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def String strResult;

def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue( "resourceServerPort" );def opensslCmd = project.getPropertyValue("opensslCmd");
sslport="443";


// for authorizationServer
log.info "===== Testing authorizationServer: " + authorizationServer + " =====";

tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cipher NULL-SHA -connect " + authorizationServer);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","2");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);


strResult = tc.getPropertyValue("stdout");

if( strResult.contains("Cipher    : NULL-SHA")) {

	log.info "Authorization Server: " + authorizationServer + " failed to rejected NULL-SHA cipher as required";
	testRunner.fail("Authorization Server: " + authorizationServer + " failed to rejected NULL-SHA cipher as required");

} else {
	log.info("Authorization Server: " + authorizationServer + " properly rejected NULL-SHA cipher as required");
}


// for resourceServer
log.info "===== Testing resourceServer: " + resourceServer + " =====";

tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cipher NULL-SHA -cert stunnel.pem -connect " + resourceServer);
tc.setPropertyValue("timeout","2");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);


strResult = tc.getPropertyValue("stdout");

if( strResult.contains("Cipher    : NULL-SHA")) {

	log.info "Resource Server: " + resourceServer + " failed to rejected NULL-SHA cipher as required";
	testRunner.fail("Resource Server: " + resourceServer + " failed to rejected NULL-SHA cipher as required");

} else {
	log.info("Resource Server: " + resourceServer + " properly rejected the NULL-SHA cipher as required");
}



assert true;
</script></con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC006 Accept TLS_RSA_WITH_AES_128_CBC_SHA cipher suite" searchProperties="true" id="625e14db-c86a-49ee-a1a8-7cdc96c0b3f0"><con:description>Verify that when communicating with a Retail Customer at a minimum the Data Custodian accepts the TLS_RSA_WITH_AES_128_CBC_SHA cipher suite.</con:description><con:settings/><con:testStep type="groovy" name="Accept TLS_RSA_WITH_AES_128_CBC_SHA cipher suite" id="655c7614-4df4-470a-83fa-955ae981ecd3">
	<con:settings/>
	<con:config><script>def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def String strResult;

def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue( "resourceServerPort" );
def opensslCmd = project.getPropertyValue("opensslCmd");
sslport="443";

// for authorizationServer
log.info "===== Testing authorizationServer: " + authorizationServer + " =====";

tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cipher AES128-SHA -cert stunnel.pem -connect " + authorizationServer);
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","2");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);


strResult = tc.getPropertyValue("stdout");

if( strResult.contains("Cipher is AES128-SHA")) {

	log.info("Authorization Server: " + authorizationServer + " properly accepted the required AES128-SHA cipher");

} else {
	log.info "Authorization Server: " + authorizationServer + " failed to accept the required AES128-SHA cipher";
	testRunner.fail("Authorization Server: " + authorizationServer + " failed to accept the required AES128-SHA cipher");
}


// for resourceServer
log.info "===== Testing resourceServer: " + resourceServer + " =====";

tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cipher AES128-SHA -cert stunnel.pem -connect " + resourceServer);
tc.setPropertyValue("timeout","2");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);


strResult = tc.getPropertyValue("stdout");

if( strResult.contains("Cipher is AES128-SHA")) {

	log.info("Resource Server: " + resourceServer + " properly accepted the required AES128-SHA cipher");

} else {
	log.info "Resource Server: " + resourceServer + " failed to accept the required AES128-SHA cipher"
	testRunner.fail("Resource Server: " + resourceServer + " failed to accept the required AES128-SHA cipher");
}



assert true;

</script></con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC008 Quality of Certificate" searchProperties="true" id="53fa906b-92aa-415d-a2d6-6bb1a630e5c0"><con:description>Verify that the Data Custodian maintains an unexpired unrevoked RSA certificate with a public key length of at least 2048 bits.</con:description><con:settings/><con:testStep type="groovy" name="Quality of Certificate" id="3fc323c2-087b-4d17-8f23-c92dfb707851">
	<con:settings/>
	<con:config><script>import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def String strResult;

Calendar cal;

DateFormat df = new SimpleDateFormat ("MMM dd HH:mm:ss yyyy z");
Date dNB;
Date dNA;

Date now = new Date();
String datetimeStr = now.toString();


def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue( "resourceServerPort" );
def opensslCmd = project.getPropertyValue("opensslCmd");
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","2");


//////////////////////////////////////
// for authorizationServer
//////////////////////////////////////
log.info "===== Testing authorizationServer: " + authorizationServer + " =====";
// check that the key is 2048 bits
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -connect " + authorizationServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if(strResult.contains("Server public key is 2048 bit")){
	log.info("Authorization Server: " + authorizationServer + " uses a 2048 bit public key as required");
} else {
	log.info "Authorization Server: " + authorizationServer + " does not use a 2048 bit public key as required";
	testRunner.fail("Authorization Server: " + authorizationServer + " does not use a 2048 bit public key as required");
}

// verify certificate is unexpired
// fetch the certificate
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -connect " + authorizationServer + "| sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + projectPath + "/etc/getcert.pem");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");
		
// get the dates
tc.setPropertyValue("cmd", opensslCmd + " x509 -noout -in " + projectPath + "/etc/getcert.pem -dates");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");


strNotBefore = strResult.substring(strResult.indexOf("notBefore=") + "notBefore=".length(),strResult.indexOf(" GMT",strResult.indexOf("notBefore=")));
strNotAfter = strResult.substring(strResult.indexOf("notAfter=") + "notAfter=".length(),strResult.indexOf(" GMT",strResult.indexOf("notAfter=")));

cal = Calendar.getInstance();

dNB = df.parse(strNotBefore + " GMT");
dNA = df.parse(strNotAfter + " GMT");

now = new Date();
datetimeStr = now.toString();

if(now.after(dNB) &amp;&amp; now.before(dNA)) {
	log.info("Authorization Server: " + authorizationServer + " uses an active Certificate");
} else {
	log.info "Authorization Server: " + authorizationServer + " uses an expired Certificate";
	testRunner.fail("Authorization Server: " + authorizationServer + " uses an expired Certificate");

/*	try{
		File file = new File(projectPath+"/etc/getcert.pem");
		file.delete();
	} catch(Exception e) {
		log.error("Error deleting /etc/getcert.pem file:" + e.getMessage());
	}	*/
}

// check if RSA
// get the dates
tc.setPropertyValue("cmd", opensslCmd + " x509 -text -in " + projectPath + "/etc/getcert.pem -dates");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");


if(strResult.contains("Public Key Algorithm: rsaEncryption")){
	log.info("Authorization Server: " + authorizationServer + " Public Key uses the required rsa Encryption algorithm");
} else {
	log.info "Authorization Server: " + authorizationServer + " Public Key does not use the required rsa Encryption algorithm";
	testRunner.fail("Authorization Server: " + authorizationServer + " Public Key does not use the required rsa Encryption algorithm");
}


try{
	File file = new File(projectPath+ "/etc/getcert.pem");
	file.delete();
} catch(Exception e) {
	log.error("Error deleting /etc/getcert.pem file:" + e.getMessage());
}	



//////////////////////////////////////
// for resourceServer
//////////////////////////////////////
log.info "===== Testing resourceServer: " + resourceServer + " =====";
// check that the key is 2048 bits
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

if(strResult.contains("Server public key is 2048 bit")){
	log.info("Resource Server: " + resourceServer + " uses a 2048 bit public key as required");
} else {
	log.info "Resource Server: " + resourceServer + " does not use a 2048 bit public key as required";
	testRunner.fail("Resource Server: " + resourceServer + " does not use a 2048 bit public key as required");
}

// verify certificate is unexpired
// fetch the certificate
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -cert stunnel.pem -connect " + resourceServer + "| sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + projectPath + "/etc/getcert.pem");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");
		
// get the dates
tc.setPropertyValue("cmd", opensslCmd + " x509 -noout -in " + projectPath + "/etc/getcert.pem -dates");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");


strNotBefore = strResult.substring(strResult.indexOf("notBefore=") + "notBefore=".length(),strResult.indexOf(" GMT",strResult.indexOf("notBefore=")));
strNotAfter = strResult.substring(strResult.indexOf("notAfter=") + "notAfter=".length(),strResult.indexOf(" GMT",strResult.indexOf("notAfter=")));

cal = Calendar.getInstance();

dNB = df.parse(strNotBefore + " GMT");
dNA = df.parse(strNotAfter + " GMT");


if(now.after(dNB) &amp;&amp; now.before(dNA)) {
	log.info("Resource Server: " + resourceServer + " uses an active Certificate");
} else {
	log.info "Resource Server: " + resourceServer + " uses an expired Certificate";
	testRunner.fail("Resource Server: " + resourceServer + " uses an expired Certificate");

	try{
		File file = new File(projectPath+ "/etc/getcert.pem");
		file.delete();
	} catch(Exception e) {
		log.error("Error deleting /etc/getcert.pem file:" + e.getMessage());
	}	
}

// check if RSA
// get the dates
tc.setPropertyValue("cmd", opensslCmd + " x509 -text -in " + projectPath + "/etc/getcert.pem -dates");
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");


if(strResult.contains("Public Key Algorithm: rsaEncryption")){
	log.info("Resource Server: " + resourceServer + " Public Key uses the required rsa Encryption algorithm");
} else {
	log.info "Resource Server: " + resourceServer + " Public Key does not use the required rsa Encryption algoritm";
	testRunner.fail("Resource Server: " + resourceServer + " Public Key does not use the required rsa Encryption algorithm");
}


try{
	File file = new File(projectPath+ "/etc/getcert.pem");
	file.delete();
} catch(Exception e) {
	log.error("Error deleting /etc/getcert.pem file:" + e.getMessage());
}	



return;


</script></con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC009 Root of trust" searchProperties="true" id="44207f64-e3c4-4822-b6b1-0ade8dc45663"><con:description>Test software or manual inspection shall verify that the Data Custodian RSA certificate was issued by a Certificate Authority (CA) that has been successfully audited according to the criteria of ETSI or WebTrust.</con:description><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="ac749738-1a52-4079-b7dc-e4fb61055400"><con:settings/><con:config><script>log.info("[FB_13] Security and Privacy -- TC009 Root of Trust: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_13] Security and Privacy -- TC009");</script></con:config></con:testStep><con:testStep type="groovy" name="Root of trust" id="208dd4a2-9142-44f2-a14c-28830ff9f816"><con:settings/><con:config><script>import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];
def String strResult;

Calendar cal;

DateFormat df = new SimpleDateFormat ("MMM dd HH:mm:ss yyyy z");
Date dNB;
Date dNA;

Date now = new Date();
String datetimeStr = now.toString();


def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue( "authorizationServerPort" );
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue( "resourceServerPort" );
def opensslCmd = project.getPropertyValue("opensslCmd");
sslport="443";
tc.setPropertyValue("path",project.getPropertyValue( "stunnelConfigDirectory"));
tc.setPropertyValue("timeout","2");


//////////////////////////////////////
// for authorizationServer
//////////////////////////////////////
log.info "===== Testing Authorization Server: " + authorizationServer + " =====";

// check for connection
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1_2  -cert stunnel.pem -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

// Confirm connection supports TLSv1.2
if( (strResult.contains("Protocol  : TLSv1.2")) &amp;&amp; (!strResult.contains("Cipher    : 0000"))){
//} else {
//	log.info "Authorization Server: " + authorizationServer + " failed TLS 1.2 negotiation";
//	testRunner.fail("Authorization Server: " + authorizationServer + " failed TLS 1.2 negotiation");
//}


	// fetch the certificate
//	tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1_2 -cert stunnel.pem -connect " + authorizationServer + "| sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + projectPath + "/etc/getcert.pem");

	// Fetch the Certificate Chain
	log.info("[FB_13] Security and Privacy (TC009 Root of trust) -- Attempting to fetch Certificate Chain and generate /etc/getcertchain.txt file");
	tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1_2 -cert stunnel.pem -connect " + authorizationServer + "| sed -ne '/Certificate chain/,/---/p' > " + projectPath + "/etc/getcertchain.txt");
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);

	// get the certificate issuer
//	tc.setPropertyValue("cmd", opensslCmd + " x509 -issuer -noout -in "+ projectPath + "/etc/getcert.pem");
//	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
//	strResult = tc.getPropertyValue("stdout");

	// Extract the Root Certificate issuer
	try {
		File file = new File(projectPath+ "/etc/getcertchain.txt");
		def lineNo = 1;
		def line
		file.withReader { reader ->
			while ((line = reader.readLine()) != "---") {
				log.info("[FB_13] Security and Privacy (TC009 Root of trust) -- Certificate Chain: " + lineNo + " -- " + line);
				strResult = line;
				lineNo++
			}
		}
		
	} catch(Exception e) {
		log.error("[FB_13] Security and Privacy (TC009 Root of trust) -- Error reading Authorization Server /etc/getcertchain.txt file:" + e.getMessage());
	}

	// Remove Certificate Chain Text file
	try{
//		File file = new File(projectPath+ "/etc/getcert.pem");
		File file = new File(projectPath + "/etc/getcertchain.txt");
		file.delete();
	} catch(Exception e) {
//		log.error("Error deleting /etc/getcert.pem file:" + e.getMessage());
		log.error("[FB_13] Security and Privacy (TC009 Root of trust) -- Error deleting Authorization Server /etc/getcertchain.txt file:" + e.getMessage());
	}	

	// Ask testee to verify (manual procedure)
	strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify Authorization Server (" + project.getPropertyValue("authorizationServer") + ") certificate is chained to a Certificate Authority that has been successfully audited as complying with WebTrust or ETSI Audit Standards:\n\n" + strResult + "\n\n";
//	result = ui.getDialogs().confirm("Verify Authorization Server: " + project.getPropertyValue("authorizationServer") + " certificate issuer is recognized by WebTrust:\n\n" + strResult, "\n");
	result = ui.getDialogs().confirm(strMessage, "\n");
	log.info (result)

	if(result)
	{
		log.info "Authorization Server: " + authorizationServer + " Certificate was issued by a CA that complies with WebTrust or ETSI Audit Standards";
	} else {
		log.info "Authorization Server: " + authorizationServer + " Certificate was not issued by a CA that complies with WebTrust or ETSI Audit Standards";
		testRunner.fail("Authorization Server: " + authorizationServer + " Certificate was not issued by a CA that complies with WebTrust or ETSI Audit Standards");
	}
} else {
	log.info "Authorization Server: " + authorizationServer + " failed TLS 1.2 negotiation";
	testRunner.fail("Authorization Server: " + authorizationServer + " failed TLS 1.2 negotiation");	
}

//////////////////////////////////////
// for resourceServer
//////////////////////////////////////
log.info "===== Testing Resource Server: " + resourceServer + " =====";

// check for connection
tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1_2  -cert stunnel.pem -connect " + resourceServer);
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
strResult = tc.getPropertyValue("stdout");

// check that connection occurred
if( (strResult.contains("Protocol  : TLSv1.2")) &amp;&amp; (!strResult.contains("Cipher    : 0000"))){
//} else {
//	log.info "Resource Server: " + resourceServer + " failed TLS 1.2 negotiation";
//	testRunner.fail("Resource Server: " + resourceServer + " failed TLS 1.2 negotiation");
//}

	// Fetch the Certificate Chain
//	tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1_2  -cert stunnel.pem -connect " + resourceServer + "| sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > " + projectPath + "/etc/getcert.pem");
	tc.setPropertyValue("cmd", "echo Q | " + opensslCmd + " " + "s_client -tls1_2  -cert stunnel.pem -connect " + resourceServer + "| sed -ne '/Certificate chain/,/---/p' > " + projectPath + "/etc/getcertchain.txt");
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	strResult = tc.getPropertyValue("stdout");

	// Extract the Root Certificate issuer
//	tc.setPropertyValue("cmd", opensslCmd + " x509 -issuer -noout -in "+ projectPath + "/etc/getcert.pem");
//	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
//	strResult = tc.getPropertyValue("stdout");

	// Extract the Root Certificate issuer
	try {
		File file = new File(projectPath+ "/etc/getcertchain.txt");
		def lineNo = 1;
		def line
		file.withReader { reader ->
			while ((line = reader.readLine()) != "---") {
				log.info("[FB_13] Security and Privacy (TC009 Root of trust) -- Certificate Chain: " + lineNo + " -- " + line);
				strResult = line;
				lineNo++
			}
		}
		
	} catch(Exception e) {
		log.error("[FB_13] Security and Privacy (TC009 Root of trust) -- Error reading Resource Server /etc/getcertchain.txt file:" + e.getMessage());
	}

	// Remove Certificate Chain Text file
	try{
//		File file = new File(projectPath+ "/etc/getcert.pem");
		File file = new File(projectPath+ "/etc/getcertchain.txt");
		file.delete();
	} catch(Exception e) {
//		log.error("Error deleting /etc/getcert.pem file:" + e.getMessage());
		log.error("[FB_13] Security and Privacy (TC009 Root of trust) -- Error deleting Resource Server /etc/getcertchain.txt file:" + e.getMessage());
	}

	// Ask testee to verify (manual procedure)
	strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify Resource Server (" + project.getPropertyValue("resourceServer") + ") certificate is chained to a Certificate Authority that has been successfully audited as complying with WebTrust or ETSI Audit Standards:\n\n" + strResult + "\n\n";
//	result = ui.getDialogs().confirm("Verify Resource Server: " + project.getPropertyValue("resourceServer") + " certificate issuer is recognized by WebTrust:\n\n" + strResult, "\n");
	result = ui.getDialogs().confirm(strMessage, "\n");
	log.info (result)

	if(result)
	{
		log.info "Resource Server: " + resourceServer + " Certificate was issued by a CA that complies with WebTrust or ETSI Audit Standards";
	} else {
		log.info "Resource Server: " + resourceServer + " Certificate was not issued by a CA that complies with WebTrust or ETSI Audit Standards";
		testRunner.fail("Resource Server: " + resourceServer + " Certificate was not issued by a CA that complies with WebTrust or ETSI Audit Standards");
	}
} else {
	log.info "Resource Server: " + resourceServer + " failed TLS 1.2 negotiation";
	testRunner.fail("Resource Server: " + resourceServer + " failed TLS 1.2 negotiation");
}

assert true;
</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC010 Tokens and IDs have no PII" searchProperties="true" id="f2657555-c565-40fd-8bea-689fe45e254d"><con:description>Test software or manual inspection shall verify that Tokens and IDs communicated by the Data Custodian are opaque and if based on actual Customer information that they are randomized using a secure method to protect privacy.</con:description><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="92ffc711-b98b-4e35-9c55-99326c6382c5"><con:settings/><con:config><script>log.info("[FB_13] Security and Privacy -- TC010 Tokens and IDs have no PII: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_13] Security and Privacy -- TC010");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="9d825828-8cce-44d2-888c-9696dc427173"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name></con:property><con:property><con:name>redirect_uri</con:name></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name></con:property><con:property><con:name>access_token</con:name></con:property><con:property><con:name>resourceURI</con:name></con:property><con:property><con:name>authorizationURI</con:name></con:property><con:property><con:name>token_type</con:name></con:property><con:property><con:name>refresh_token</con:name></con:property><con:property><con:name>expires_in</con:name></con:property><con:property><con:name>scope</con:name></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name></con:property><con:property><con:name>error</con:name></con:property><con:property><con:name>client_id</con:name></con:property><con:property><con:name>old_access_token</con:name></con:property><con:property><con:name>client_secret</con:name></con:property><con:property><con:name>authorizationServerProxy</con:name></con:property><con:property><con:name>resourceServerProxy</con:name></con:property><con:property><con:name>mockPort</con:name></con:property><con:property><con:name>proxyOutPort</con:name></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="cbae16f1-0185-4e95-8000-a9437dc12e4d"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="56836459-4a00-438e-9e49-473f4079e441"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="78e4f188-7880-4f9a-89cc-aabcc1efe6c3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fbnp3TUVQQ0U4Q1l5UjloOHpTd0VncFNmUFljIiwgImF1dGhfaWRzIjogWzExOTQ5MF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVS2g5Ok4zZmxtR3VTazJhWWdLakEyN0x5VmZKc19sZw"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119490</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="abf9a02f-0549-44e3-b1ae-a2d99f0e05b1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="3978bfd5-0e54-4aa4-93a1-0499147f36c1" disabled="true"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="InitializeLoop" id="c3d1d549-829c-495d-a65d-c05d7eb44893"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:testStep type="groovy" name="StartLoopThroughFeeds" id="70499044-7689-413a-ae90-0490b39f6b6b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;
import groovy.xml.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath;

if(context.holder==null)
{
	//context.responseParsed = "TRUE";
	def ResponseMessage = testRunner.testCase.testSteps["GET Resource URI"].testRequest.response.contentAsString;
//	log.info("resp:" + ResponseMessage);
	
	ResponseMessage = "&lt;dummyroot>" + ResponseMessage + "&lt;/dummyroot>";
	
	def holder;
	try{
		holder = groovyUtils.getXmlHolder(ResponseMessage);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	if(strCount.toInteger() &lt; 1){
		log.error("Error processing XML response: response must contain at lease one feed");
		testRunner.fail("Error processing XML response: response must contain at lease one feed");
		return;		
	}

	log.info("Resp contains " + strCount + " feed(s)");
	context.currentFeedIndex = strCount.toInteger();
	context.holder = holder;
}

if(context.currentFeedIndex &lt; 1) {
	testRunner.gotoStepByName("Done");
	return;
}

log.info("process feed # " + context.currentFeedIndex);

def feedNode = context.holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");

String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
//log.info("feed: " + strFeed);

context.currentFeed = strFeed;
context.currentFeedIndex--;

return ;</script></con:config></con:testStep><con:testStep type="groovy" name="SchemaValidation" id="3e2197dd-0f83-4452-a76e-4fb681e84603"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = context.currentFeed;
//log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try{
	v.validate(instanceDocument);
} catch(Exception e) {
	log.error("xml schema validation failed: " + e.getMessage());	
	testRunner.fail("xml schema validation failed: " + e.getMessage());	
	return;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Tokens and IDs have no PII" id="874d046a-9525-4597-9c8e-65fd8fe0f5be"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;

import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

// get the response
//def responseXML = testRunner.testCase.getPropertyValue("response");
def responseXML = context.currentFeed;
def holder      = new XmlHolder(responseXML);  
holder.namespaces["atom"] = "http://www.w3.org/2005/Atom";
holder.namespaces["espi"] = "http://naesb.org/espi";



// check id
countIds = holder["count(//atom:id)"].toInteger();

if (countIds > 30) 
	countIds = 30;
ids = "";
for( item in holder.getNodeValues( "//atom:id" ))
{
	ids = ids + item + "\n";
	countIds = countIds - 1;

	if(countIds == 0) {
		break;
	}
}

// Ask testee to verify (manual procedure)
//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify IDs do not contain account or other personal identifiers\n\n" + ids.toString()
//result = ui.getDialogs().confirm("Verify IDs do not contain account or other personal identifiers \n\n"+ ids.toString(), "\n");
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nReview the following list of IDs to determine if it contains account or other personal identifiers\n\n" + ids.toString() + "\n\n"
strMessage = strMessage + "Select 'YES' if the above list of IDs contain account or other personal identifiers\nSelect 'NO' if the above list of IDs does NOT contain account or other personal identifiers"
result = ui.getDialogs().confirm(strMessage, "\n");
log.info (result)

if(!result)
{
	log.info "IDs do not contain PII";
} else {
	testRunner.fail( "IDs contain PII");
	return;
}



// check url
countLinks = holder["count(//atom:link)"].toInteger();
log.info "Links: " + countLinks;
if (countLinks > 30) 
	countLinks = 30;
links = "";

for( item in holder.getNodeValues( "//atom:link/@href" ))
{
	links = links + item + "\n";

	countLinks = countLinks - 1;

	if(countLinks == 0) {
		break;
	}
}

// Ask testee to verify (manual procedure)
//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify Link IDs do not contain account or other personal identifiers\n\n" + links.toString()
//result = ui.getDialogs().confirm("Verify Link IDs do not contain account or other personal identifiers \n\n"+ links.toString(), "\n");
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nReview the following list of Link IDs to determine if it contains account or other personal identifiers\n\n" + links.toString() + "\n\n"
strMessage = strMessage + "Select 'YES' if the above list of Link IDs contain account or other personal identifiers\nSelect 'NO' if the above list of Link IDs does NOT contain account or other personal identifiers"
result = ui.getDialogs().confirm(strMessage, "\n");
log.info (result)

if(!result)
{
	log.info "Link IDs do not contain PII";
} else {
	testRunner.fail( "Link IDs contain PII");
	return;
}

// check title
countTitles = holder["count(//atom:title)"].toInteger();
log.info "Titles: " + countTitles;
if (countTitles > 30) countTitles = 30;
titles = "";
for( item in holder.getNodeValues( "//atom:title" ))
{
	if(item != null) {
		titles = titles + item + "\n";

		countTitles = countTitles - 1;

		if(countTitles == 0) {
			break;
		}
	}
}

// Ask testee to verify (manual procedure)
//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify Titles do not contain account or other personal identifiers\n\n" + titles.toString()
//result = ui.getDialogs().confirm("Verify Titles do not contain account or other personal identifiers \n\n"+ titles.toString(), "\n");
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nReview the following list of Titles to determine if it contains account or other personal identifiers\n\n" + titles.toString() + "\n\n"
strMessage = strMessage + "Select 'YES' if the above list of Titles contain account or other personal identifiers\nSelect 'NO' if the above list of Titles does NOT contain account or other personal identifiers"
result = ui.getDialogs().confirm(strMessage, "\n");
log.info (result)

if(!result)
{
	log.info "Titles do not contain PII";
} else {
	testRunner.fail( "Titles contain PII");
	return;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="FeedLoop" id="ffd625ad-a7ac-4433-8284-54f016ec8f3a"><con:settings/><con:config><script>testRunner.gotoStepByName("StartLoopThroughFeeds");</script></con:config></con:testStep><con:testStep type="groovy" name="Done" id="b1c965d8-4651-4436-ae3f-c532523f5099"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()

context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();
context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC011 Tokens and IDs have at least 48bits" searchProperties="true" id="cbb49285-68dd-4b69-a837-70b28e847e71" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Test software or manual inspection shall verify that Tokens and IDs communicated by the Data Custodian consist of at least 48 bits and can be the random number part of an RFC2422 UUID.</con:description><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="7756365c-2139-41c4-aee9-c344f1f63c1c"><con:settings/><con:config><script>log.info("[FB_13] Security and Privacy -- TC011 Tokens and IDs have at least 48bits: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_13] Security and Privacy -- TC011");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="f2e6870d-cac6-4045-a5e0-57dee3399015"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value/></con:property><con:property><con:name>redirect_uri</con:name><con:value/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value/></con:property><con:property><con:name>access_token</con:name><con:value/></con:property><con:property><con:name>resourceURI</con:name><con:value/></con:property><con:property><con:name>authorizationURI</con:name><con:value/></con:property><con:property><con:name>token_type</con:name><con:value/></con:property><con:property><con:name>refresh_token</con:name><con:value/></con:property><con:property><con:name>expires_in</con:name><con:value/></con:property><con:property><con:name>scope</con:name><con:value/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value/></con:property><con:property><con:name>old_access_token</con:name></con:property><con:property><con:name>client_secret</con:name></con:property><con:property><con:name>authorizationServerProxy</con:name></con:property><con:property><con:name>resourceServerProxy</con:name></con:property><con:property><con:name>mockPort</con:name></con:property><con:property><con:name>proxyOutPort</con:name></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="7242c493-7f84-4c81-af82-144fbb99b91a"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="c9886d39-ce8e-4beb-b1ed-2fb87757a2b6"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="59862797-37c5-4509-8f7f-17b6ccd7152c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fbnp3TUVQQ0U4Q1l5UjloOHpTd0VncFNmUFljIiwgImF1dGhfaWRzIjogWzExOTQ5MF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVS2g5Ok4zZmxtR3VTazJhWWdLakEyN0x5VmZKc19sZw"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119490</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d36c1625-da09-4e8a-a2d8-1e7301df8e38"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="fab40464-9fbb-4e83-834c-e397764bcdd4" disabled="true"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="InitializeLoop" id="bf93d313-4555-4367-a226-6b1204445bf0"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:testStep type="groovy" name="StartLoopThroughFeeds" id="1ec9049d-7288-44eb-b787-29333d846897"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;
import groovy.xml.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath;

if(context.holder==null)
{
	//context.responseParsed = "TRUE";
	def ResponseMessage = testRunner.testCase.testSteps["GET Resource URI"].testRequest.response.contentAsString;
//	log.info("resp:" + ResponseMessage);
	
	ResponseMessage = "&lt;dummyroot>" + ResponseMessage + "&lt;/dummyroot>";
	
	def holder;
	try{
		holder = groovyUtils.getXmlHolder(ResponseMessage);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	if(strCount.toInteger() &lt; 1){
		log.error("Error processing XML response: response must contain at lease one feed");
		testRunner.fail("Error processing XML response: response must contain at lease one feed");
		return;		
	}

	log.info("Resp contains " + strCount + " feed(s)");
	context.currentFeedIndex = strCount.toInteger();
	context.holder = holder;
}

if(context.currentFeedIndex &lt; 1) {
	testRunner.gotoStepByName("Done");
	return;
}

log.info("process feed # " + context.currentFeedIndex);

def feedNode = context.holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");

String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
//log.info("feed: " + strFeed);

context.currentFeed = strFeed;
context.currentFeedIndex--;

return ;</script></con:config></con:testStep><con:testStep type="groovy" name="SchemaValidation" id="b63ad5a2-631e-416b-9ad1-a8730ecdb82f"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = context.currentFeed;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try{
	v.validate(instanceDocument);
} catch(Exception e) {
	log.error("xml schema validation failed: " + e.getMessage());	
	testRunner.fail("xml schema validation failed: " + e.getMessage());	
	return;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Tokens and IDs have at least 48bits" id="a7cc251b-64b5-4574-8f05-f4b82a35fa02"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;

import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

// get the response
//def responseXML = testRunner.testCase.getPropertyValue("response");
def responseXML = context.currentFeed;
def holder      = new XmlHolder(responseXML);  
holder.namespaces["atom"] = "http://www.w3.org/2005/Atom";
holder.namespaces["espi"] = "http://naesb.org/espi";

// check access token
// Ask testee to verify (manual procedure)
tokens = "access token: " + testRunner.testCase.testSuite.project.getPropertyValue("access_token") + "\n" + "registration access token: " + testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token")+ "\n"  + "client access token: " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token");
//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify tokens contain at least 48 bits\n(12 characters hes, 8 characters base64)\n\n" + tokens
//result = ui.getDialogs().confirm("Verify tokens contain at least 48 bits \n(12 characters hex, 8 characters base 64) \n\n" + tokens, "\n");
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nReview the following list of tokens to determine if all tokens contain at least 48-bits (12 hex characters, 8 base64 characters)\n\n" + tokens + "\n\n"
strMessage = strMessage + "Select 'YES' if the above list of tokens contain at least 48-bits (12 hex characters, 8 base64 characters)\nSelect 'NO' if the above list of tokens does NOT contain at least 48-bits (12 hex characters, 8 base64 characters)"
result = ui.getDialogs().confirm(strMessage, "\n");
log.info (result)

if(result)
{
	log.info "Tokens contain at least 48 bits";
} else {
	testRunner.fail( "Tokens do not contain at least 48 bits");
	return;
}


// check id
countIds = holder["count(//atom:id)"].toInteger();
log.info "IDs:" + countIds;
if (countIds > 10) 
	countIds = 10;
ids = "";
for( item in holder.getNodeValues( "//atom:id" ))
{
	ids = ids + item + "\n";
	//   log.info "Item : [$item]"

	countIds = countIds -1
	if(countIds == 0) {
		break;
	}
}

// Ask testee to verify (manual procedure)
//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify IDs contain at least 48 bits\n(12 characters hes, 8 characters base64)\n\n" + ids.toString()
//result = ui.getDialogs().confirm("Verify IDs contain at least 48 bits \n(12 characters hex, 8 characters base 64) \n\n"+ ids.toString(), "\n");
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nReview the following list of IDs to determine if all IDs contain at least 48-bits (12 hex characters, 8 base64 characters)\n\n" + ids.toString() + "\n\n"
strMessage = strMessage + "Select 'YES' if the above list of IDs contain at least 48-bits (12 hex characters, 8 base64 characters)\nSelect 'NO' if the above list of IDs does NOT contain at least 48-bits (12 hex characters, 8 base64 characters)"

result = ui.getDialogs().confirm(strMessage, "\n");
log.info (result)

if(result)
{
	log.info "IDs contain at least 48 bits";
} else {
	testRunner.fail( "IDs do not contain at least 48 bits");
	return;
}



// check url
countLinks = holder["count(//atom:link)"].toInteger();
log.info "Links: " + countLinks;
if (countLinks > 10) 
	countLinks = 10;
links = "";
for( item in holder.getNodeValues( "//atom:link/@href" ))
{
	links = links + item + "\n";
	//   log.info "Item : [$item]"

	countLinks = countLinks -1
	if(countLinks == 0) {
		break;
	}
}

// Ask testee to verify (manual procedure)
//strMessage = project.getPropertyValue("CMDTestStep") + "\n\nVerify Link identifiers contain at least 48 bits\n(12 characters hes, 8 characters base64)\n\n" + links.toString()
//result = ui.getDialogs().confirm("Verify Link identifiers contain at least 48 bits \n(12 characters hex, 8 characters base 64) \n\n"+ links.toString(), "\n");
strMessage = project.getPropertyValue("CMDTestStep") + "\n\nReview the following list of Link IDs to determine if all Link IDs contain at least 48-bits (12 hex characters, 8 base64 characters)\n\n" + links.toString() + "\n\n"
strMessage = strMessage + "Select 'YES' if the above list of Link IDs contain at least 48-bits (12 hex characters, 8 base64 characters)\nSelect 'NO' if the above list of Link IDs does NOT contain at least 48-bits (12 hex characters, 8 base64 characters)"
result = ui.getDialogs().confirm(strMessage, "\n");
log.info (result)

if(result)
{
	log.info "Link identifiers contain at least 48 bits";
} else {
	testRunner.fail( "Link identifiers do not contain at least 48 bits");
	return;
}



</script></con:config></con:testStep><con:testStep type="groovy" name="FeedLoop" id="8211237b-a004-4c9f-9cce-d29da58a0587"><con:settings/><con:config><script>testRunner.gotoStepByName("StartLoopThroughFeeds");</script></con:config></con:testStep><con:testStep type="groovy" name="Done" id="62215681-d0a8-42df-9482-04b2f41e2934"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()
context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();
context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:tearDownScript><con:properties/></con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite>
<con:testSuite name="[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope" id="5986c67c-db97-4324-b2a5-822fe773fe83">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD001 [NEG] Malformed Authorization Code Requests" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fe96e0e8-b157-4d38-b230-984f1e4d61c2"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="846006b0-ae2e-4070-8270-fedea0ee3ade"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD001 [NEG] Malforned Authorization Code Request: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD001 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="046723f4-4c1b-43a6-b4f5-18e9a1995ee9"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
context.mockService =  testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG A tests Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockPort variable is blank or null: " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockPort variable is blank or null: " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) proxyOutPort variable is blank or null: " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) proxyOutPort variable is blank or null: " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify OAuth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Redirect URI Endpoint variable is blank or null: " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Redirect URI variable is blank or null: " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client ID variable is blank or null: " + authCase.getPropertyValue("client_id"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client ID variable is blank or null: " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client Secret variable is blank or null: " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client Secret variable is blank or null: " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("GotFirstRedirect","FALSE");
context.mockService.setPropertyValue("GotScopeSelPOST","FALSE");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("client_secret",authCase.getPropertyValue("client_secret"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());

log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockService starting");

def runner = context.mockService.start();

log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockService: " + runner + " started");

context.mockRunner = runner;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Issue malformed oauth/authorize GETs" id="a3b8d371-3592-413d-90bc-5cb2b998798a"><con:settings/><con:config><script><![CDATA[import java.net.HttpUrlConnection.*;

//	Create addressability to global project variables
def project = testRunner.testCase.testSuite.project

public class codeLocation {
	
	private int iRespCode;
	private String strRespLoc;

	public codeLocation (int c, String l) {
		iRespCode = c;
		strRespLoc = l;
	}


	/******************************
	 * Return Response Code
	 ******************************/
	 public int getCode() {
	 	return iRespCode;
	 }


	/******************************
	 * Return Response Location
	 ******************************/
	 public String getLocation() {
	 	return strRespLoc;
	 }
}

//int issueGET(String targetURL,String strSessionID){
int issueGET(String targetURL){

	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs targetURL: " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
//		connection.setRequestProperty("Cookie", "JSESSIONID=" + strSessionID);
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			log.info("Response line: " + line);
			response.append(line);
			response.append('\r');
		}
		rd.close();

		log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Response code = " + connection.getResponseCode();

		strRespLoc = connection.getHeaderField("Location");
		log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Response Location: " + strRespLoc;
		
		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Exception: " + e.getMessage());
		return 0;
	} finally {
		if(connection != null) {
			log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Response: " + connection.getResponseCode());
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}
//   ****************************************************************************************************************************
//   *
//   *    Initialize test step variables
//   *
//   ****************************************************************************************************************************

String strSelectedScope = "";
String strRedirURI = project.getPropertyValue("redirect_uri");
String strClientId = project.getPropertyValue("client_id");
String strRespLocation;

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthEndpoint = "";
URL aURL = new URL(project.getPropertyValue("authorizationServerAuthorizationEndpoint"));

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) aURL: " + aURL);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) aURL.getPort(): " + aURL.getPort());
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) strAuthEndpoint: " + "http://" +  aURL.getHost() + ":" + project.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthEndpoint = "http://" +  aURL.getHost() + ":" + project.getPropertyValue("proxyOutPort") + aURL.getPath();
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) strAuthEndpoint: " + strAuthEndpoint);

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) strRedirURI: " + strRedirURI);

// Sample Authorization Code Grant request valid query string:
//strQryParams = "?response_type=code" + "&client_id=third_party" + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018"; 

int iTestID= 0;
testResult = true;

while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "";
	int iRespCode = 0;
	int iExpectedRespCode = 0;

/*

 no authorization code in the response 

 */

	switch(iTestID) {
		case 0:
			strTestName = "Malformed Authorization Code Request (No response_type field-value pair)";
			strQryParams = "?client_id=" + strClientId + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018"; 
  			//iExpectedRespCode = 302;	
			// PASS is response code=302 and the body contains error=
 			break;
		case 1:
			strTestName = "Malformed Authorization Code Request (No client_id field-value pair)";
			strQryParams = "?response_type=code" + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";  
  			//iExpectedRespCode = 401;	
  			// PASS is response code=401 						
			break;
		case 2:
			strTestName = "Malformed Authorization Code Request (Invalid response_type field-value pair)";
			strQryParams = "?response_type=badresponsetype&client_id=" + strClientId + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
  			//iExpectedRespCode = 302;	
  			// PASS is response code=302 and the body contains error=
			break;
		case 3:
			strTestName = "Authorization Code Request (Invalid client_id field-value pair)";
			strQryParams = "?response_type=code&client_id=invalid_third_party&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
			//iExpectedRespCode = 401;
			// PASS is response code=401 		
			break;
		case 4:
			strTestName = "Authorization Code Request (Invalid redirect_uri field-value pair)";
			strQryParams = "?response_type=code&client_id=" + strClientId + "&redirect_uri=" + "https://services.greenbuttondata.org" + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
			//iExpectedRespCode = 400;	
			// PASS is response code=400 or 403		
			break;
		case 5:
			strTestName = "Authorization Code Request (Invalid scope field-value pair)";
			strQryParams = "?response_type=code&client_id=" + strClientId + "&redirect_uri=" + strRedirURI + "&&scope=" + "FB=????" + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
			//iExpectedRespCode = 302;
			// PASS is response code=302 and the body contains error=
			break;
		default:
			break;
	}


	// 0 indicates skip test
	//if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");		
		log.info("Testing: " + strTestName);
		iRespCode = issueGET(strAuthEndpoint + strQryParams);


		switch(iTestID){
			// PASS is response code=302 and the body contains error=
			case 0:
			case 2:
			case 5: 
				if((iRespCode==302) && (strRespLoc != null) && (strRespLoc.indexOf("error=") != -1) && (strRespLoc.indexOf("code=") == -1)){
					// success 
				} else {
					if((iRespCode == 302) && (strRespLoc.indexOf("login") != -1)) {
					
  						log.error("Failed malformed Authorization request: " + strTestName + " Expected 302 with error= response. Received response code: " + iRespCode);
//						testRunner.fail("Failed malformed Authorization request: " + strTestName + " Expected 302 with error= response. Response code: " + iRespCode);		

						log.info("Authorization Code implementation does not meet OAuth 2.0 Authorization Framework [RFC6749] Section 4.1.1 Authorization Request implementation requirements");
						log.info("Section 4.1.1 Authorization Request requires the Authorization Server validate the request before Authenticating the user");

						testResult = false;
						
					} else {
//					     if(iRespCode!=302){
//						     strRespLoc="empty";
//					     }
					
  					log.error("Failed malformed Authorization request: " + strTestName + " Expected 302 with error= response. Received response code: " + iRespCode);
//  					testRunner.fail("Failed malformed Authorization request: " + strTestName + " Expected 302 with error= response. Response code: " + iRespCode);		

					log.info("Authorization Code implementation does not meet OAuth 2.0 Authorization Framework [RFC6749] Section 4.1.1 Authorization Request implementation requirements");
					log.info("Section 4.1.1 Authorization Request requires the Authorization Server validate the request and respond as defined by Section 4.1.2.1. Error Response if invalid");

					testResult = false;
				     }
				}
				break;
			// PASS is response code=401 		
			case 1:
			case 3: 
				if(iRespCode!=401) {

					if((iRespCode == 302) && (strRespLoc.indexOf("login") != -1)) {
						
  						log.error("Failed malformed Authorization request: " + strTestName + " expected response code: 401 but received response code: " + iRespCode);
//						testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: 401 but received response code: " + iRespCode);											

						testResult = false;
						
					} else {
						
  						log.error("Failed malformed Authorization request: " + strTestName + " expected response code: 401 but received response code: " + iRespCode);
//  						testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: 401 but received response code: " + iRespCode);											

						testResult = false;
					}
				}
				break;
			// PASS is response code=401 or 403
			case 4: 
				if(iRespCode == 401 || iRespCode == 403) {

					break;

				} else  {
					if((iRespCode == 302) && (strRespLoc.indexOf("login") != -1)) {
					
  						log.error("Failed malformed Authorization request: " + strTestName + " expected response code: 401 or 403 but received response code: " + iRespCode);
//						testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: 401 or 403 but received response code: " + iRespCode);											

						testResult = false;
												
					} else {
					
  						log.error("Failed malformed Authorization request: " + strTestName + " expected response code: 401 or 403 but received response code: " + iRespCode);
//  						testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: 401 or 403 but received response code: " + iRespCode);											

						testResult = false;
					}
				}			
				break;
			default:
  				log.error("Failed malformed Authorization request: " + strTestName + " invalid testID");
//				testRunner.fail("Failed malformed Authorization request: " + strTestName + " invalid testID");		

				testResult = false;
				break;
		}

	iTestID++;
	if(iTestID > 5){
		break;
	}
}

//assert true;
assert testResult;]]></script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="40ff42e1-7a63-4149-9c17-76a84053e99d"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}

log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();
</con:tearDownScript><con:properties><con:property><con:name>extracted_scope_sel_uri</con:name><con:value/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://localhost:8444/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>browserSession</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BFB4C3B6604951B5665C8C660CE84BCA</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD002 [NEG] Authorization Code Request (Retail Customer Passes Authentication and DENIES access)" searchProperties="true" id="bccca4c3-2b7b-4359-8ca2-2159ecd05c3e"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="4eba5abd-0e58-4d52-8ea7-25d811b92ce1"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD002 [NEG] Authorization CodeRequest(Retail Customer Passes Authentication and DENIES access): Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD002 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="d08db03c-02df-4bec-be6d-8eb8cd7f4cda"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	log.error("OAD002 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("OAD002 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify Oauth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("OAD002 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("error","");
context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="555d3544-2c69-4686-a54d-90b09aad35e2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="1ecf4a9c-55f0-45f8-a0f6-bfc4bd189ecf"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String parseBaseUrlFromURI(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    if(aURL.getPort().equals(-1))
    {
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost());
	    return aURL.getProtocol() + "://" +  aURL.getHost();
    }
    else
    {
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort());
	    return aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort();
    }
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strResource: " + aURL.getPath());
    return aURL.getPath();
}

String strBaseUrl = parseBaseUrlFromURI(strScopeSelURI);
String strResource = parseResource(strScopeSelURI);

log.info "OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- Scope select URI: " + strScopeSelURI;

DriverHelper driver = new DriverHelper(strBaseUrl,strResource,"",log);

context["driver"] = driver;

driver.get(strScopeSelURI);
</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="335fbfd7-b948-47bd-adb8-e20bad342944"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'DENY the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK."
//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'DENY the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");


context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="4d820d57-da11-46f5-9b74-2c9a58cd91f1"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="3aba0f86-2e1e-46ca-8196-ca71d8900f35"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="62cbdcbe-2f49-470b-b76b-16fc7ec0d150"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Check access denied" id="774ad163-ad8a-44d7-895d-c6c96d1f6f1a"><con:settings/><con:config><script>
String strError =  context.mockService.getPropertyValue("error");

if(!strError.contains("error=access_denied"))
{
	log.error("OAD002 [NEG] Authorization Code Request (Retail Customer Passes Authentication and DENIES access) Authorization Server did not respond with expected error:" + strError);
	testRunner.fail("OAD002 [NEG] Authorization Code Request (Retail Customer Passes Authentication and DENIES access) Authorization Server did not respond with expected error:" + strError);

	return
}
</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}
log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();
</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://localhost:8443/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://localhost:8444/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>LAaB0X</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"275ff15a-8902-445e-b4fd-f12fd00f9092","token_type":"bearer","refresh_token":"1b0b86ee-3508-4349-afff-0d87c1d004c9","expires_in":31535999,"scope":"FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13","resourceURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5","authorizationURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5"}
</con:value></con:property><con:property><con:name>access_token</con:name><con:value>275ff15a-8902-445e-b4fd-f12fd00f9092</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>1b0b86ee-3508-4349-afff-0d87c1d004c9</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>31535999</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>client_id</con:name><con:value>third_party</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD003 [NEG] Access Token Request Authorization Header and malformed Access Token Authorization Code Request Rejection" searchProperties="true" id="5e670f61-7366-4e72-9bf3-92c57e462f1f"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="9f979fd4-96c4-4123-bffe-5fdc7f9232ff"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD003 [NEG] Access Token Request Authorization Header and malformed Access Token Authorization Code Request Rejection: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD003 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="84ca8b4a-d62e-4996-bffa-45f1bd02e2d5"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG B tests Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	log.error("OAD003 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("OAD003 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify OAuth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("OAD003 [NEG] Start Mock Service -- OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- OAauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("OAD003 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("OAD003 [NEG] Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************


context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("client_secret",authCase.getPropertyValue("client_secret"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="ca39da4f-c61a-4386-b54e-abc6e260c15c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="34c1d3d7-de9f-4a23-8fae-d819ccbe6cde"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String strHost = "";

//	Does URI start with http://
if (strScopeSelURI.substring("http://".length()) == -1) {	// Yes, extract baseURI value
	
	strHost = strScopeSelURI.substring("http://".length());
	log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strHost: " + strHost);
	
} else {	// No, extract baseURI value using https://

	strHost = strScopeSelURI.substring("https://".length());
	log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strHost: " + strHost);
	
}

String strResource = strHost.substring(strHost.indexOf("/"));
strHost = strScopeSelURI.substring(0,strScopeSelURI.indexOf(strResource));

DriverHelper driver = new DriverHelper(strHost,strResource,"",log);

context["driver"] = driver;

driver.get(strScopeSelURI);</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="c959593c-f4f7-4741-adf3-914104b45561"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.\n";
//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.\n", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");

context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="b94ec9cd-0ad7-4cba-805f-375979bc058b"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="2475c631-16e8-4e02-ac13-85f07a5199df"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="98c0f85c-4381-4eea-97f6-bc62cc9b9ced"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Issue Malformed GET OAuth Token requests" id="e3246a57-8c49-4ed5-b6f4-ce549c91b88c"><con:settings/><con:config><script><![CDATA[import java.net.*;
import java.io.*;

//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

int issueGET(String targetURL,String strToken){

	log.info("Issuing malformed GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();
			
		log.info "Response Code = " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "Response = " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

String strOAuthCodeReceivedValue = context.mockService.getPropertyValue("OAuthCodeReceivedValue");
String strRedirURI = authCase.getPropertyValue("redirect_uri");
String strClientId = authCase.getPropertyValue("client_id");

// Save Received Authorization Code for later tests
authCase.setPropertyValue("OAuthCodeReceivedValue",strOAuthCodeReceivedValue);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strOAuthCodeReceivedValue: " + strOAuthCodeReceivedValue);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' Saved strOAuthCodeReceivedValue: " + authCase.getPropertyValue("OAuthCodeReceivedValue"));

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' aURL: " + aURL);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' aURL.getPort(): " + aURL.getPort());
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strRedirURI: " + strRedirURI);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strAuthorizationServerTokenEndpoint: " + strAuthorizationServerTokenEndpoint);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' client_id: " + strClientId);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' client_secret: " + authCase.getPropertyValue("client_secret"));

String strAuthentication = authCase.getPropertyValue("client_id") + ":" + authCase.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

// Sample valid Access Token Authorization Code Request query parameters
//strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;

int iTestID = 0;

while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "";
	String strToken = token;
	 
	int iRespCode = 0;
	int iExpectedRespCode = 0;

	switch(iTestID) {
		case 0:
			strTestName = "Access Token Request Authorization No Authorization Header";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;
			strToken = "";				
			iExpectedRespCode = 401;
			break;
		case 1:
			strTestName = "Access Token Request Authorization Invalid Authorization Header";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;
			strToken = "bad value";				
			iExpectedRespCode = 401;
			break;			
		case 2:
			strTestName = "Malformed Authorization Code Grant Access Token Request (No grant_type field-value pair)";
			strQryParams = "?code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;	
		case 3:
			strTestName = "Malformed Authorization Code Grant Access Token Request (No code field-value pair)";
			strQryParams = "?grant_type=authorization_code" + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;
		case 4:
			strTestName = "Malformed Authorization Code Grant Access Token Request (No redirect_uri field-value pair)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue;				
			iExpectedRespCode = 400;
			break;
		case 5:
			strTestName = "Malformed Authorization Code Grant Access Token Request (Contains  HTTP BASIC Authorization header and client_id field-value pair)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI + "?client_id=" + strClientId;				
			iExpectedRespCode = 400;
			break;
		case 6:
			strTestName = "Invalid Authorization Code Grant Access Token Request (redirect_uri field-value pair doess not match the redirect_uri field-value pair in the Authorization Code Request)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=https://services.greenbuttondata.org";				
			iExpectedRespCode = 400;
			break;
		case 7:
//			strTestName = "Invalid Authorization Code Grant Access Token Request (code field-value pair contains an authorization code issued to another client)";
//			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;			
//			iExpectedRespCode = 400;
//			iExpectedRespCode = 0;
//			break;
//		case 8:
			strTestName = "Invalid Authorization Code Grant Access Token Request (code field-value pair contains an invalid authorization code)";
			strQryParams = "?grant_type=authorization_code" + "&code=badauthorizationcode" + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;
//		case 9:
		case 8:
			def ui = com.eviware.soapui.support.UISupport;
			strMessage = project.getPropertyValue("CMDTestStep") + "\n\nThe following test will take 6 minutes to complete. SoapUI may appear inactive. Click OK and please be patient..."
//			result = ui.getDialogs().showInfoMessage("The following test will take 6 minutes to complete. SoapUI may appear inactive. Please click OK now and please be patient...", "");
               result = ui.getDialogs().showInfoMessage(strMessage, "");
			Thread.sleep(360000);
			strTestName = "Invalid Authorization Code Grant Access Token Request (code field-value pair contains a valid authorization code issued 6 minutes prior)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;
		default:
			break;
	}

	// 0 indicates skip test
	if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");
		log.info("Testing: " + strTestName);
		log.info("Expected Response Code: " + iExpectedRespCode);
		iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);
		
		if(iRespCode != iExpectedRespCode) {
			log.error("Failed malformed token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			testRunner.fail("Failed malformed token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			return;						
		}		
	} else {
		log.info("skipping: " + strTestName);
	}	

	iTestID++;
//	if(iTestID > 9){
	if(iTestID > 8){

		break;
	}
}	

assert true;

]]></script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}
log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>quexi</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"06430590-2897-422a-9316-95fccb60e96d","token_type":"bearer","refresh_token":"1d8e2070-73ee-40f8-9549-dad626ead16a","expires_in":31535999,"scope":"FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13","resourceURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5","authorizationURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5"}
</con:value></con:property><con:property><con:name>access_token</con:name><con:value>06430590-2897-422a-9316-95fccb60e96d</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>1d8e2070-73ee-40f8-9549-dad626ead16a</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>31535999</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD004 [NEG] Invalid Authorization Code Grant Access Token Request (code field-value pair contains a previously used authorization code)" searchProperties="true" id="b15099c2-2c8e-4569-b4ed-8e6be0ff849a"><con:description/><con:settings/><con:testStep type="groovy" name="Issue GET OAuth Token requests" id="51d52d0a-0580-4f35-a5c9-a52fb5bf3d83"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

int issueGET(String targetURL,String strToken){

	log.info("Issuing malformed GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();
			
		log.info "Response Code = " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "Response = " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

String strOAuthCodeReceivedValue = authCase.getPropertyValue("OAuthCodeReceivedValue");
String strRedirURI = authCase.getPropertyValue("redirect_uri");

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- aURL: " + aURL);
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- aURL.getPort(): " + aURL.getPort());
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strRedirURI: " + strRedirURI);
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strOAuthCodeReceivedValue: " + strOAuthCodeReceivedValue);

String strAuthentication = authCase.getPropertyValue("client_id") + ":" + authCase.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

String strQryParams = "?redirect_uri=" + strRedirURI + "&amp;code=" + strOAuthCodeReceivedValue + "&amp;grant_type=authorization_code";
String strToken = token;

log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strToken: " + strToken);
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strQryParams: " + strQryParams);

int iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);


if(iRespCode != 400) {
	log.error("Token request expected result code 400 but received:" + iRespCode);
	testRunner.fail("Token request expected result code 400 but received:" + iRespCode);
	return;						
}		


assert true;

</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>OrBApu</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"06430590-2897-422a-9316-95fccb60e96d","token_type":"bearer","refresh_token":"1d8e2070-73ee-40f8-9549-dad626ead16a","expires_in":31535999,"scope":"FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13","resourceURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5","authorizationURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5"}
</con:value></con:property><con:property><con:name>access_token</con:name><con:value>06430590-2897-422a-9316-95fccb60e96d</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>1d8e2070-73ee-40f8-9549-dad626ead16a</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>31535999</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD005 [POS] Successful Access Token Request" searchProperties="true" id="e85a65a3-3c40-4d23-9720-1830d5cb4b6f"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="3aa46c2c-0c87-4cd6-824d-66f6c8acfcc0"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD005 [POS] Successful Access Token Request: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD005 [POS]");</script></con:config></con:testStep><con:testStep type="groovy" name="Ask User To expire Authorization" id="f2811d3d-f416-498d-8151-7e44d5c6d40b"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"

//String strDialog = "If the Data Custodian supports changing the default authorization expiration period, request the \
strMessage = strMessage + "If the Data Custodian supports changing the default authorization expiration period, request the \
Data Custodian to set the default period to a short duration (i.e. one or two minutes).\r\n\
After the expiration period has been changed note the new authorization expiration period used and proceed.  Otherwise \
the Data Custodian will be requested to forcefully expire \r\n\
the authorization about to be created later in the test.\r\n\
\r\n\
If you do not wish to proceed, click No.\r\n\
To proceed, click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- (OAD005 [POS] Successful Access Token Request) Testing terminated by user.");
	testRunner.fail("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- (OAD005 [POS] Successful Access Token Request) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="f0cc43a0-62df-45b2-b96f-5d7f7f01c4c5"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG B tests Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	log.error("OAD005 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("OAD005 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify Oauth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("OAD005 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="ab7ffe93-8159-4cda-b254-49f10f937a72"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="f314f733-b26a-4313-b984-1a3a448afb36"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String parseBaseUrlFromURI(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    if(aURL.getPort().equals(-1))
    {
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost());
	    return aURL.getProtocol() + "://" +  aURL.getHost();
    }
    else
    {
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort());
	    return aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort();
    }
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- strResource: " + aURL.getPath());
    return aURL.getPath();
}

String strBaseUrl = parseBaseUrlFromURI(strScopeSelURI);
String strResource = parseResource(strScopeSelURI);

log.info "OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- Scope select URI: " + strScopeSelURI;

DriverHelper driver = new DriverHelper(strBaseUrl,strResource,"",log);

context["driver"] = driver;

driver.get(strScopeSelURI);</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="ed4146e3-f783-4c9b-bee7-ef0245827d1b"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.";

//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");

context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="3680cc6f-388e-4274-bac8-6321c1b3eb11"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="aff70ca0-bd71-4f8b-99da-59d6cfd36c24"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="d8107c28-154b-4432-a46b-1ae2ebc3b6b9"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Issue Successful GET Authorization Code" id="a533e4a2-4e1c-4aad-8de8-a60b607fa8d9"><con:settings/><con:config><script>import java.net.*;
import java.io.*;
import groovy.json.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;

import groovyx.net.http.HTTPBuilder;
import static groovyx.net.http.Method.POST;
import static groovyx.net.http.ContentType.TEXT;


//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//	Create addressability to project variables
def project = testRunner.testCase.testSuite.project;
/*
int issueGET(String targetURL,String strToken){

	log.info("Issuing GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	String strTmpResp = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();

		strTmpResp = response.toString();
		log.info "ResponseCode = " + connection.getResponseCode();
		log.info "Response = " + strTmpResp;
		

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "ResponseCode = " + connection.getResponseCode();
			log.info "Response = " + strTmpResp;
			testRunner.testCase.setPropertyValue("tokenResponse",strTmpResp);
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}
*/
String parseEndpointFromURI(String strURI) throws Exception {

    URL aURL = new URL(strURI);

    // return with proxy port

    log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' parseEndpointFromURI routine");
    log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' returned Endpoint: http://" + aURL.getHost() + ":" + context.mockService.getPropertyValue("proxyOutPort"));
    return "http://" +  aURL.getHost() + ":" + context.mockService.getPropertyValue("proxyOutPort");
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);
    return aURL.getPath();
}

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doPOST(String strBaseEndpoint,String href, String token,Map&lt;String, Serializable> params) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' doPOST");
		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Request URL: " + strBaseEndpoint + "/" + href + "?" + params);

try{
		http.request( strBaseEndpoint, POST, TEXT ) { req ->
			uri.path = href
			uri.query = params
		     headers.Authorization = 'Basic ' + token
			headers.Accept = 'application/json, application/*+json'
			
			response.failure = { resp ->
				log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: " + resp.statusLine);
				return null;
			}  

			response.success = { resp, reader ->
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeded: " + resp.statusLine);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeded len: " + resp.headers['Content-Length']?.value);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeded type: " + resp.headers['Content-Type']?.value);
				
				String jsonResponse = (reader.readLines().join() as String);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Response Body: " + jsonResponse);
				_strResponseBody = jsonResponse;
				//_strResponseBody = reader.getText();
			}
		}
}
catch(Exception e)
{
 log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: Exception Occurred:" + e.getMessage());

}
		return _strResponseBody;
	}	
}


String strRedirURI = authCase.getPropertyValue("redirect_uri");

// Retrieve received Authorization Code and save it globally
String strOAuthCodeReceivedValue = context.mockService.getPropertyValue("OAuthCodeReceivedValue");
authCase.setPropertyValue("OAuthCodeReceivedValue",strOAuthCodeReceivedValue);

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.debug("OAD005 [POS] Successful GET Authorization Code -- aURL: " + aURL);
log.debug("OAD005 [POS] Successful GET Authorization Code -- aURL.getPort(): " + aURL.getPort());
log.debug("OAD005 [POS] Successful GET Authorization Code -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
//strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();
strAuthorizationServerTokenEndpoint = authCase.getPropertyValue("authorizationServerTokenEndpoint");

log.info("OAD005 [POS] Successful GET Authorization Code -- strRedirURI: " + strRedirURI);
log.info("OAD005 [POS] Successful GET Authorization Code -- strOAuthCodeReceivedValue: " + strOAuthCodeReceivedValue);

String strAuthentication = authCase.getPropertyValue("client_id") + ":" + authCase.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

String strQryParams = "?redirect_uri=" + strRedirURI + "&amp;code=" + strOAuthCodeReceivedValue + "&amp;grant_type=authorization_code";
String strToken = token;
/*
iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);

if(iRespCode != 200) {
	log.error("Failed GET Token request: response code:" + iRespCode);
	testRunner.fail("Failed GET Token request: response code:" + iRespCode);
	return;						
}	
*/


ResourceTester resourceTester = new ResourceTester(log);

String strHost = parseEndpointFromURI(strAuthorizationServerTokenEndpoint);
String strResource = parseResource(strAuthorizationServerTokenEndpoint);
Map params = [redirect_uri: authCase.getPropertyValue("redirect_uri"), code: strOAuthCodeReceivedValue,grant_type:'authorization_code'];
log.info("Issue POST");
String strGetResponseBody = resourceTester.doPOST(strHost,strResource,token,params);
log.info("Issued POST response:" + strGetResponseBody);

if(strGetResponseBody==null) {
	log.error("Failed POST Token request");
	testRunner.fail("Failed POST Token request");
	return;						
}

testRunner.testCase.setPropertyValue("tokenResponse",strGetResponseBody);



String strTokenResponse = testRunner.testCase.getPropertyValue("tokenResponse");

if((strTokenResponse==null)||(strTokenResponse=="")){
	log.error("Failed POST Token request response body empty");
	testRunner.fail("Failed POST Token request response body empty");
	return;
}

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(strTokenResponse);
def headers = new StringToStringMap()

log.info("OAD005 [POS] Successful GET Authorization Code -- access_token: " + tokenResponse.access_token);
log.info("OAD005 [POS] Successful GET Authorization Code -- token_type: " + tokenResponse.token_type);
log.info("OAD005 [POS] Successful GET Authorization Code -- refresh_token: " + tokenResponse.refresh_token);
log.info("OAD005 [POS] Successful GET Authorization Code -- expires_in: " + tokenResponse.expires_in);
log.info("OAD005 [POS] Successful GET Authorization Code -- scope: " + tokenResponse.scope);
log.info("OAD005 [POS] Successful GET Authorization Code -- resourceURI: " + tokenResponse.resourceURI);
log.info("OAD005 [POS] Successful GET Authorization Code -- authorizationURI: " + tokenResponse.authorizationURI);

if(tokenResponse.access_token==""){
	log.error("token response missing access_token");
	testRunner.fail("token response missing access_token");
	return;	
}
if(tokenResponse.token_type==""){
	log.error("token response missing token_type");
	testRunner.fail("token response missing token_type");
	return;	
}
if(tokenResponse.refresh_token==""){
	log.error("token response missing refresh_token");
	testRunner.fail("token response missing refresh_token");
	return;	
}
if(tokenResponse.expires_in==0){
	log.error("token response missing expires_in");
	testRunner.fail("token response missing expires_in");
	return;	
}
if(tokenResponse.scope==""){
	log.error("token response missing scope");
	testRunner.fail("token response missing scope");
	return;	
}
if(tokenResponse.resourceURI==""){
	log.error("token response missing resourceURI");
	testRunner.fail("token response missing resourceURI");
	return;	
}
if(tokenResponse.authorizationURI==""){
	log.error("token response missing authorizationURI");
	testRunner.fail("token response missing authorizationURI");
	return;	
}

authCase.setPropertyValue("access_token",tokenResponse.access_token);
authCase.setPropertyValue("token_type",tokenResponse.token_type);
authCase.setPropertyValue("refresh_token",tokenResponse.refresh_token);
authCase.setPropertyValue("expires_in",tokenResponse.expires_in.toString());
authCase.setPropertyValue("scope",tokenResponse.scope);
//authCase.setPropertyValue("resourceURI",tokenResponse.resourceURI);
//authCase.setPropertyValue("authorizationURI",tokenResponse.authorizationURI);

URI uriResource = new URI(tokenResponse.resourceURI);
URI uriAuthorization = new URI(tokenResponse.authorizationURI); 

authCase.setPropertyValue("resourceURI","http://" + uriResource?.getHost() + ":" + testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getPropertyValue("mockPort") + uriResource.path);
authCase.setPropertyValue("authorizationURI","http://" + uriAuthorization?.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + uriAuthorization.path);


project.setPropertyValue("access_token",tokenResponse.access_token);

log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('access_token'): " + authCase.getPropertyValue("access_token"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('token_type'): " + authCase.getPropertyValue("token_type"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('refresh_token'): " + authCase.getPropertyValue("refresh_token"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('expires_in'): " + authCase.getPropertyValue("expires_in"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('scope'): " + authCase.getPropertyValue("scope"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('resourceURI'): " + authCase.getPropertyValue("resourceURI"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('authorizationURI'): " + authCase.getPropertyValue("authorizationURI"));

log.info("OAD005 [POS] Successful GET Authorization Code -- project.getPropertyValue('access_token'): " + project.getPropertyValue("access_token"));

assert true;

</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}

log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>8TmRz3</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{    "access_token": "eyJyZWZyZXNoX2lkIjogIkRFTU9fQWFGZUpLa3NNOFlnc21oSjhKZ3ZyYk5FQjc1IiwgImF1dGhfaWRzIjogWzExOTQ5NV0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVS3BvOjRfRVZtRDgteHhORWJGTW9nbmZ0S3hleGluWQ",     "authorizationURI": "https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119495",     "expires_in": 3600,     "refresh_token": "DEMO_AaFeJKksM8YgsmhJ8JgvrbNEB75USDV147WMegssa5VmuZSes2FQvPcQJy8p3aw5DxZnwyRQKYWH4zsx8DrJZtqp2gEGfW4Xz5x6hdTVXSU45QDEUc1v4Uvyxg3GVeBB",     "resourceURI": "https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495",     "scope": "FB=1_3_4_13_14",     "token_type": "Bearer"}</con:value></con:property><con:property><con:name>access_token</con:name><con:value>039121fb-af73-4669-b972-4b4f9fd2281a</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>d7ba0b90-70ea-41a1-82dc-3e9b6e8361c8</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>119</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://testgb.mooo.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/9</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://testgb.mooo.com:null/DataCustodian/espi/1_1/resource/Authorization/9</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD006 [NEG] Invalid Access Token Requests for ApplicationInformation" searchProperties="true" id="12b61b3f-7940-4953-8d46-715534e8ee86"><con:settings/><con:testStep type="restrequest" name="GET ApplicationInformation with incorrect Access Token &quot;client_access_token&quot;" id="462ea7ae-1c68-4eef-8f9c-94930aad47e5"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation with incorrect Access Token &quot;client_access_token&quot;" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">

					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="64003a3b-dd47-4e86-b288-b37c6f895346"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation with incorrect Access Token &quot;access_token&quot;" id="27620b0f-aa63-440a-94de-2ebd5f1dff54"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation with incorrect Access Token &quot;access_token&quot;" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="dd48c35c-050b-4f30-860d-58a9d623198d"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation with no Authorization Header" id="9b3d3fa6-6f00-4aa7-acde-8276a6996ab4"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation with no Authorization Header" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="76a2af73-43bb-4162-bd51-f2a62b70ba81"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD007 [NEG] Invalid Access Token Requests for Authorization entry" searchProperties="true" id="ae7b834c-2b03-465a-b13c-8208ae0528c0"><con:settings/><con:testStep type="groovy" name="Extract information from authorization for (registration_access_token)" id="1f5603e2-479a-4bc7-a522-3c4e416fee1a"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id with incorrect access token (registration_access_token)");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
headers.put("Authorization","Bearer " + project.getPropertyValue("registration_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id with incorrect access token (registration_access_token)" id="d8793d81-46e1-467c-9325-53c55c251790"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id with incorrect access token (registration_access_token)" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWxhdGVkX2lkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInR5cGUiOiAiZ2JjX3JlZyIsICJpZCI6ICJyZWdpc3RyYXRpb25fREVNT19nYmF0ZXN0c3VpdGVfaWQiLCAidXNlciI6IDQ1NjQ0fToxZ1VLZ2Y6WUYwVW9UcjB1Y0NqNjVaZUxxR3NrcGdUb3hZ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization for (access_token)" id="74d1c1fd-b0b2-4c41-b72c-bc508cd4932a"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id with incorrect access token (access_token)");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id with incorrect access token (access_token)" id="3d6566ad-7313-4c95-8f0c-5a5d6707378c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id with incorrect access token (access_token)" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fQWFGZUpLa3NNOFlnc21oSjhKZ3ZyYk5FQjc1IiwgImF1dGhfaWRzIjogWzExOTQ5NV0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVS3BvOjRfRVZtRDgteHhORWJGTW9nbmZ0S3hleGluWQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization no Authorization Header" id="0f8b0734-894b-4228-aedb-803ec02a24e1"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id with no Authorization Header");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id with no Authorization Header" id="e39b7c71-6a79-42bf-80e4-76823f9e2987"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id with no Authorization Header" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="Application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD008 [NEG] Invalid Access Token Requests for Authorization feed" searchProperties="true" id="b02ab7a7-d7ef-4b00-8f1c-f136da1e81bb"><con:settings/><con:testStep type="restrequest" name="GET Authorization Feed with incorrect access token &quot;registration_access_token&quot;" id="e0d056c2-8d60-41fa-a7ab-24d1dd9fd04b"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed with incorrect access token &quot;registration_access_token&quot;" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="562409c6-b85e-4186-8765-2b740c0cbe39"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization Feed with incorrect access token &quot;access_token&quot;" id="4e62c878-964c-4311-add1-90321e9c7665"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed with incorrect access token &quot;access_token&quot;" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c647ddda-72ef-493a-851b-a4dc9d2a2fd6"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization Feed with no Authorization Header" id="0e8e63e0-49bb-47d1-89ea-c40be2bbf76b"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed with no Authorization Header" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f540bf18-371d-4bda-9b2e-3f182e02d372"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD009 [NEG] Invalid Access Token Request (GET RESTful Batch/Subscription request contains registration_access_token)" searchProperties="true" id="f07529bb-9d3e-4f0f-a4aa-60be839b6702"><con:settings/><con:testStep type="groovy" name="Extract information from authorization for registration access token" id="cffeef24-4c55-497a-9480-97dc2f280b4d"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid token - registration_access_token");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with invalid token - registration_access_token" id="1f7a25f2-5942-442e-8cd4-d794bf02dbcb"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with invalid token - registration_access_token" id="7e0ce768-b7c3-4761-89a3-3ef6c6b514bd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWxhdGVkX2lkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInR5cGUiOiAiZ2JjX3JlZyIsICJpZCI6ICJyZWdpc3RyYXRpb25fREVNT19nYmF0ZXN0c3VpdGVfaWQiLCAidXNlciI6IDQ1NjQ0fToxZ1VLZ2Y6WUYwVW9UcjB1Y0NqNjVaZUxxR3NrcGdUb3hZ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b7d6602d-3abf-4ef6-9551-432d1d99748b"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization for client access token" id="c354976a-44ca-4f45-b9fc-dc570dd167b7"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid token - client_access_token");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with invalid token - client_access_token" id="290b25d3-4f23-4749-b71d-bc1ebb20242c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with invalid token - client_access_token" id="0f6fd866-deee-40a4-abc0-8e5e03a7a6a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VLZ2Y6QmV0N004bWZFQmpYdGV6ZE9ZRXBUVDNzdVpz"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0da9db86-144d-43c6-bd69-73d6a296d0bf"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization no Authorization Header" id="3cebf954-a715-427b-9d52-a61c62a4e9ff"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid no Authorization Header");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with invalid no Authorization Header" id="3b093be8-4658-414b-88ed-0933be1debcf"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with invalid no Authorization Header" id="41a41664-70df-4b61-9766-4a4985321b39" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="Application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="43e11d14-daf7-4f80-8f97-d377a030b928"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD010 [NEG] Invalid Access Token Request (GET RESTful ReadServiceStatus request contain invalid access tokens)" searchProperties="true" id="2b179321-2f69-48d8-928d-daf4a9914977"><con:settings/><con:testStep type="restrequest" name="GET ServiceStatus with incorrect access token registration_access_token" id="45031e99-3602-42dd-bd9e-188413e48413">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET ServiceStatus with incorrect access token registration_access_token" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="859581ec-35e0-499b-b44f-94d8e16a8fb1">
			<con:configuration><codes>403,401</codes></con:configuration>
		</con:assertion>
		
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="GET ServiceStatus with incorrect access token access_token" id="0443c063-202e-4f51-9a3f-d644913a3227">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET ServiceStatus with incorrect access token access_token" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e4048da7-f9ed-4ec4-8b22-ce843e0edb7c">
			<con:configuration><codes>403,401</codes></con:configuration>
		</con:assertion>
		
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="GET ServiceStatus with no Authorization Header" id="d28ef7fc-ae7a-49fe-b73c-149f876aaa14">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET ServiceStatus with no Authorization Header" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="caf7f84c-e98e-42ea-9ed5-ecaaeaaae131">
			<con:configuration><codes>403,401</codes></con:configuration>
		</con:assertion>
		
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD011 [NEG] Malformed Refresh Token Requests" searchProperties="true" id="ded1c582-6be2-4ca4-b85a-9dbfc56183b3"><con:settings/><con:testStep type="groovy" name="Issue malformed refresh token requests" id="4a4ca5ca-aa85-4749-9881-e31cb613c77f"><con:settings/><con:config><script><![CDATA[import java.net.*;
import java.io.*;

//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project
//def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

int issuePOST(String targetURL,String urlParameters,String strToken){

	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Issuing malformed oauth/token POST targetURL: " + targetURL);
	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Issuing malformed oauth/token POST urlParameters: " + urlParameters);
	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Issuing malformed oauth/token POST Authorization: Basic " + strToken);
	
	int iRespCode = 0;
	byte[] postData = urlParameters.getBytes();
	int postDataLength = postData.length;
//	String urlParameters = "";
	
//	URL url;
	
//	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		URL url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setDoOutput(true);
		connection.setInstanceFollowRedirects(false);
//		connection.setRequestMethod("GET");
		connection.setRequestMethod("POST");
//		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
//		connection.setRequestProperty("Content-Length", "" + Integer.toString(data.getBytes().length));
		connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		connection.setRequestProperty("charset", "utf-8");
		connection.setRequestProperty("Content-Length", Integer.toString(postDataLength));

		OutputStream os = connection.getOutputStream();
		os.write(urlParameters.getBytes("UTF-8"));
		os.close();
		connection.connect();
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			log.info("Response line: " + line);
			response.append(line);
			response.append('\r');
		}
		rd.close();
		
		log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Issue malformed POST Response code: " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Issue malformed POST Exception: " + e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Issue malformed POST Response code: " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}
//   ****************************************************************************************************************************
//   *
//   *    Initialize test step variables
//   *
//   ****************************************************************************************************************************

//String strScope = authCase.getPropertyValue("scope");
//String strRefreshToken = authCase.getPropertyValue("refresh_token");
//String strClientId= authCase.getPropertyValue("client_id");
//String strClientSecret = authCase.getPropertyValue("client_secret");
String strScope = project.getPropertyValue("scope");
String strRefreshToken = project.getPropertyValue("refresh_token");
String strClientId= project.getPropertyValue("client_id");
String strClientSecret = project.getPropertyValue("client_secret");


if (strRefreshToken == null || strRefreshToken == "") {
	log.error("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Failed 'Malformed Refresh Token Request: refresh_token is null or blank");
	testRunner.fail("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Failed 'Malformed Refresh Token Request: refresh_token is null or blank");
	return;	
}

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
//URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));
URL aURL = new URL(project.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- aURL: " + aURL);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- aURL.getPort(): " + aURL.getPort());
//log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
//strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + project.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + project.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- client_id: " + strClientId);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- client_secret: " + strClientSecret);

String strAuthentication = strClientId + ":" + strClientSecret;

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Original Authentication: " + strAuthentication);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD011 [NEG] Malformed Refresh Token Request) -- Base 64 Encoded Authentication: " + strToken);

// Sample Refresh Token Request valid query parameter
//String strQryParams = "?grant_type=refresh_token" + "&refresho_token=" + strRefreshToken + "&scope=" + strScope;

int iTestID= 0;
while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "?grant_type=refresh_token" + "&refresh_token=" + strRefreshToken + "&scope=" + strScope;

	int iRespCode = 0;
	int iExpectedRespCode = 0;

	switch(iTestID) {
		case 0:
			strTestName = "Malformed Refresh Token Request (No grant_type= field-value pair)";
			strQryParams = "?refresh_token=" + strRefreshToken + "&scope=" + strScope;			
			iExpectedRespCode = 400;
			break;
		case 1:
			strTestName = "Malformed Refresh Token Request (No refresh_token= field-value pair)";
			strQryParams = "?grant_type=refresh_token" + "&scope=" + strScope;			
			iExpectedRespCode = 400;
			break;
		case 2:
			strTestName = "Invalid Refresh Token Request (Contents of scope= field-value pair does not match 'scope=' used in original access token request)";
			strQryParams = "?grant_type=refresh_token" + "&refresh_token=" + strRefreshToken + "&scope=Read/Write";			
			iExpectedRespCode = 400;
			break;
		default:
			break;
	}

	// 0 indicates skip test
	if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");		
		log.info("testing: " + strTestName);
//		iRespCode = iRespCode = issuePOST(strAuthorizationServerTokenEndpoint + strQryParams,strToken);
		iRespCode = iRespCode = issuePOST(strAuthorizationServerTokenEndpoint,strQryParams,strToken);
		
		if(iRespCode != iExpectedRespCode) {
			log.error("Failed malformed refresh token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			testRunner.fail("Failed malformed refresh token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
		}		
	} else {
		log.info("skipping: " + strTestName);
	}	

	iTestID++;
	if(iTestID > 2){
		break;
	}
}	

assert true;

]]></script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD012 [POS] Valid refresh_token request" searchProperties="true" id="f45a7dc4-3dab-4615-99c3-42b6153fdea3"><con:settings/><con:testStep type="groovy" name="Save old access token" id="b5ea7c6d-15a3-4439-a7bb-21d230bb2f7c"><con:settings/><con:config><script>
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propCreateAuthResults.setPropertyValue("old_access_token",propCreateAuthResults.getPropertyValue("access_token"));</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer properties to Request" id="56ed3dd2-9912-4d08-90ec-7d3b5e9eee9d"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//String strAuthorizationServerTokenEndpoint = propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint");
URI uriAuthorizationServer = new URI(propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint"));

String strRefreshToken = propCreateAuthResults.getPropertyValue("refresh_token");
String strScope = propCreateAuthResults.getPropertyValue("scope");
String strQryParams = "?grant_type=refresh_token" + "&amp;refresh_token=" + strRefreshToken + "&amp;scope=" + strScope;

propTestStep = context.testCase.getTestStepByName("Issue Refresh Token Request");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint","http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path + strQryParams);

String strAuthentication = propCreateAuthResults.getPropertyValue("client_id") + ":" + propCreateAuthResults.getPropertyValue("client_secret");

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("Original Authentication: " + strAuthentication);
log.info("Base 64 Encoded Authentication: " + strToken);

headers.put("Authorization","Basic " + strToken);
headers.put("Accept","application/json, application/*+json");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="Issue Refresh Token Request" id="1262fb12-8637-4f01-9ddb-1c30c90bacca"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Issue Refresh Token Request" id="ac1c3c99-f244-4c0b-80f1-9a625c9dc566" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic REVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW46Z2Jhc2VjcmV0MTIz"/>
  &lt;con:entry key="Accept" value="application/json, application/*+json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/demo/oauth/token?grant_type=refresh_token&amp;refresh_token=DEMO_AaFeJKksM8YgsmhJ8JgvrbNEB75USDV147WMegssa5VmuZSes2FQvPcQJy8p3aw5DxZnwyRQKYWH4zsx8DrJZtqp2gEGfW4Xz5x6hdTVXSU45QDEUc1v4Uvyxg3GVeBB&amp;scope=FB=1_3_4_13_14</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe43d96e-8045-4ffa-b07c-0b6cf3bf04a2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="74425cd7-ff3f-4642-8f4d-c7905142c2a2"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.response.contentAsString;

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(response);

log.info("access_token = " + tokenResponse.access_token);
log.info("token_type = " + tokenResponse.token_type);
log.info("refresh_token = " + tokenResponse.refresh_token);
log.info("expires_in = " + tokenResponse.expires_in);
log.info("scope = " + tokenResponse.scope);
log.info("resourceURI = " + tokenResponse.resourceURI);
log.info("authorizationURI = " + tokenResponse.authorizationURI);

if(tokenResponse.access_token==null){
	assert false;
}

if(tokenResponse.token_type==null){
	assert false;
}

if(tokenResponse.refresh_token==null){
	assert false;
}

if(tokenResponse.expires_in==null){
	assert false;
}

if(tokenResponse.scope==null){
	assert false;
}

if(tokenResponse.resourceURI==null){
	assert false;
}

if(tokenResponse.authorizationURI==null){
	assert false;
}


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="extract and save authorization information" id="1df59688-d3ed-4510-ad08-f52d4f01dd8f"><con:settings/><con:config><script>
import groovy.json.JsonSlurper;

def ResponseMessage = testRunner.testCase.testSteps["Issue Refresh Token Request"].testRequest.response.contentAsString;


def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(ResponseMessage);


def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];


log.info("OAD012 [POS] Valid refresh_token request -- access_token: " + tokenResponse.access_token);
log.info("OAD012 [POS] Valid refresh_token request -- token_type: " + tokenResponse.token_type);
log.info("OAD012 [POS] Valid refresh_token request -- refresh_token: " + tokenResponse.refresh_token);
log.info("OAD012 [POS] Valid refresh_token request -- expires_in: " + tokenResponse.expires_in);
log.info("OAD012 [POS] Valid refresh_token request -- scope: " + tokenResponse.scope);
log.info("OAD012 [POS] Valid refresh_token request -- resourceURI: " + tokenResponse.resourceURI);
log.info("OAD012 [POS] Valid refresh_token request -- authorizationURI: " + tokenResponse.authorizationURI);

propCreateAuthResults.setPropertyValue("access_token",tokenResponse.access_token);
propCreateAuthResults.setPropertyValue("token_type",tokenResponse.token_type);
propCreateAuthResults.setPropertyValue("refresh_token",tokenResponse.refresh_token);
propCreateAuthResults.setPropertyValue("expires_in",tokenResponse.expires_in.toString());
propCreateAuthResults.setPropertyValue("scope",tokenResponse.scope);
//propCreateAuthResults.setPropertyValue("resourceURI",tokenResponse.resourceURI);
//propCreateAuthResults.setPropertyValue("authorizationURI",tokenResponse.authorizationURI);

URI uriResource = new URI(tokenResponse.resourceURI);
URI uriAuthorization = new URI(tokenResponse.authorizationURI); 

//testRunner.testCase.setPropertyValue("resourceURI","http://" + uriResource.host + ":" + testRunner.testCase.getPropertyValue("proxyOutPort") + uriResource.path);
testRunner.testCase.setPropertyValue("resourceURI","http://" + uriResource?.getHost() + ":" + testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getPropertyValue("mockPort") + uriResource.path);
testRunner.testCase.setPropertyValue("authorizationURI","http://" + uriAuthorization?.getHost() + ":" + testRunner.testCase.getPropertyValue("proxyOutPort") + uriAuthorization.path);

</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119495</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD013 [NEG][old A] Valid refresh_token request invalidates prior access_token" searchProperties="true" id="4f1a20e4-8937-4a72-a4d3-35956e1559e0"><con:description/><con:settings/><con:testStep type="groovy" name="Extract information from authorization" id="5593dc25-aef2-493d-972e-e912cfe19188"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("old_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="696a3a5b-eca2-455b-a640-c9fb7771b160"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="906e45eb-c342-4057-b30a-6e9dee28e1e2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer null"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6858de9d-d648-4132-bb21-fd727a59a1e1"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()

testRunner.testCase.setPropertyValue("testsPerformed","");

def mapFBsTested = [:];
context.mapFBsTested = mapFBsTested;
</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>extracted_scope_sel_uri</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>testsPerformed</con:name><con:value/></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests" searchProperties="true" id="6124850c-a445-466c-9453-4616b31220d9"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="dc87d144-9740-4736-a4e0-0ef3382fdb97"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD014 [NEG] Malforned Client Credentials Grant Access Token Requests: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD014 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Issue malformed client credentials access token requests" id="ac82382c-7750-44b6-afcb-9bb1ae661227"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

//	Create addressability to global project variables
def project = testRunner.testCase.testSuite.project
//def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//int issueGET(String targetURL,String strToken){
int issuePOST(String targetURL,String urlParameters,String strToken){

	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST targetURL: " + targetURL);
	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST urlParameters: " + urlParameters);
	log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST Authorization: Basic " + strToken);
	
	int iRespCode = 0;
	byte[] postData = urlParameters.getBytes();
	int postDataLength = postData.length;
	
	try {
		//Create connection
		URL url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setDoOutput(true);
		connection.setInstanceFollowRedirects(false);
//		connection.setRequestMethod("GET");
		connection.setRequestMethod("POST");
//		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		connection.setRequestProperty("charset", "utf-8");
		connection.setRequestProperty("Content-Length", Integer.toString(postDataLength));

		OutputStream os = connection.getOutputStream();
		os.write(urlParameters.getBytes("UTF-8"));
		os.close();
		connection.connect();
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			log.info("Response line: " + line);
			response.append(line);
			response.append('\r');
		}
		rd.close();
		//log.info response.toString();
		
//		log.info "Response = " + connection.getResponseCode();
		log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST Response code: " + connection.getResponseCode();

//		strRespLoc = connection.getHeaderField("Location");
//		log.info "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST Response Location: " + strRespLoc;

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
//		log.info e.getMessage();
		log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST Exception: " + e.getMessage());
		return 0;
	} finally {
		if(connection != null) {
//			log.info "Response = " + connection.getResponseCode();
			log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Issue malformed oauth/token POST Response: " + connection.getResponseCode());
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}
//   ****************************************************************************************************************************
//   *
//   *    Initialize test step variables
//   *
//   ****************************************************************************************************************************

String strClientId = project.getPropertyValue("client_id");
String strClientSecret = project.getPropertyValue("client_secret");

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(project.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- aURL: " + aURL);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- aURL.getPort(): " + aURL.getPort());
//log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
//strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + project.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + project.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- client_id: " + strClientId);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- client_secret: " + strClientSecret);

String strAuthentication = strClientId + ":" + strClientSecret;

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Original Authentication: " + strAuthentication);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests) -- Base 64 Encoded Authentication: " + strToken);

// Sample good Access Token Client Credentials Request query parameter
//String strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=34_35";

int iTestID= 0;
while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=34_35";
	 
	int iRespCode = 0;
	int iExpectedRespCode = 0;

	switch(iTestID) {
		case 0:
			strTestName = "Malformed Client Credentials Grant Access Token Request (No grant_type= field-value pair)";
			strQryParams = "?scope=FB=34_35";			
			iExpectedRespCode = 400;
			break;
		case 1:
			strTestName = "Malformed Client Credentials Grant Access Token Request (contents of scope= field-value pair does not match contents of Application Information structure 'scope' field)";
			strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=read/write";			
			iExpectedRespCode = 400;
			break;
		default:
			break;
	}

	// 0 indicates skip test
	if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");		
		log.info("testing: " + strTestName);
//		iRespCode = iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);
		iRespCode = iRespCode = issuePOST(strAuthorizationServerTokenEndpoint,strQryParams,strToken);
		
		if(iRespCode != iExpectedRespCode) {
			log.info("Data Custodian implementation does not properly implement OAuth 2.0 Authorization Framework [RFC6749] Section 5.2 Error Response");

			if (iTestID == 0) {
				log.info("Section 5.2 Error Response requires an HTTP 400 (Bad Request) status code and includes a JSON response containing the following parameters:");
				log.info('     "error":"invalid_grant"');
			} else {
				if (iTestID == 1) {
					log.info("Section 5.2 Error Response requires an HTTP 400 (Bad Request) status code and includes a JSON response containing the following parameters:");
					log.info('     "error":"invalid_scope"');					
				}
			}
			log.error("Failed malformed client credential grant access token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			testRunner.fail("Failed malformed client credential grant access token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
//			return;						
		}		
	} else {
		log.info("skipping: " + strTestName);
	}	

	iTestID++;
	if(iTestID > 1){
		break;
	}
}	

assert true;

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation and verify grant_types" id="01073163-cbf9-47c3-ad91-3cfef316ee31"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation and verify grant_types" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="78acb532-523c-45f9-853b-a88a286b8919"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema validation" id="488b7ada-04f2-43bd-9413-3d566e13534b"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="ApplicationInformation must contains fields" id="f62f6af4-6d66-47a4-982c-9ebbb8eaec89"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianId and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianApplicationStatus and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyNotifyUri and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerAuthorizationEndpoint and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerTokenEndpoint and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianBulkRequestURI and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianResourceEndpoint and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyScopeSelectionScreenURI and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyUserPortalScreenURI and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_secret and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_name and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_uri and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_id and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:software_id and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:software_version and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_id_issued_at and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_secret_expires_at and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:token_endpoint_auth_method and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:scope,grant_types and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:response_types and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:registration_client_uri and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:registration_access_token and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianScopeSelectionScreen</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="grant_types must contain a value of client_credentials" id="4a5fab15-c9c0-4207-ae96-f65e79ca68ce"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:grant_types='client_credentials')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>grant_types</con:name><con:value>refresh_token</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD015 [POS] Validate JSON structure returned for Client_Credentials Grant Access Token Request" searchProperties="true" id="a8ca9692-6570-4cdb-ab51-31f9fcb43659"><con:settings/><con:testStep type="groovy" name="Transfer authorization properties" id="b663ad08-ae05-41bf-b6b3-839902dd0717"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//String strAuthorizationServerTokenEndpoint = propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint");
URI uriAuthorizationServer = new URI(propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint"));
//String strScope = propCreateAuthResults.getPropertyValue("scope");
//String strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=34_35";

String strQryParams = "?grant_type=client_credentials" + "&amp;FB=4_5_15;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13"

propTestStep = context.testCase.getTestStepByName("Issue Client_Credentials Token Request");
def headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",strAuthorizationServerTokenEndpoint + strQryParams);
propTestStep.setPropertyValue("Endpoint","http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path + strQryParams);


//String strAuthentication = propCreateAuthResults.getPropertyValue("client_id") + "_admin:" + propCreateAuthResults.getPropertyValue("client_secret");
String strAuthentication = propCreateAuthResults.getPropertyValue("client_access_token_client_id") + ":" + propCreateAuthResults.getPropertyValue("client_access_token_secret");

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("Original Authentication: " + strAuthentication);
log.info("Base 64 Encoded Authentication: " + strToken);

log.info("AuthorizationServerTokenEndpoing: " + "http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path);
log.info("Query Parameters: " + strQryParams);

headers.put("Authorization","Basic " + strToken);
headers.put("Accept","application/json, application/*+json");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="Issue Client_Credentials Token Request" id="04674335-b5c1-4fb2-be9e-109fd0fe29dc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Issue Client_Credentials Token Request" id="ac1c3c99-f244-4c0b-80f1-9a625c9dc566" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic REVNT19nYmF0ZXN0c3VpdGVfaWQ6Z2Jhc2VjcmV0MTIz"/>
  &lt;con:entry key="Accept" value="application/json, application/*+json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/demo/oauth/token?grant_type=client_credentials&amp;FB=4_5_15;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe43d96e-8045-4ffa-b07c-0b6cf3bf04a2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="74425cd7-ff3f-4642-8f4d-c7905142c2a2"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.response.contentAsString;

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(response);

log.info("access_token = " + tokenResponse.access_token);
log.info("token_type = " + tokenResponse.token_type);
log.info("refresh_token = " + tokenResponse.refresh_token);
log.info("expires_in = " + tokenResponse.expires_in);
log.info("scope = " + tokenResponse.scope);
log.info("resourceURI = " + tokenResponse.resourceURI);
log.info("authorizationURI = " + tokenResponse.authorizationURI);

if(tokenResponse.access_token == null){
	assert false;
}

if(tokenResponse.token_type == null){
	assert false;
}

if(tokenResponse.refresh_token != null){
	assert false;
}

if(tokenResponse.expires_in == null){
	assert false;
}

if(tokenResponse.scope == null){
	assert false;
}

if(tokenResponse.resourceURI == null){
	assert false;
}

if(tokenResponse.authorizationURI == null){
	assert false;
}


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired)" searchProperties="true" id="7e5de04b-965c-47be-a2b7-b4ee577ba4fd"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="51488c04-92eb-4347-957f-b5a17c4026bc"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired): Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD016 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Ask User To expire Authorization" id="6dc016a5-0479-44bc-8bb9-5a093696fd4f"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;

def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
//String strDialog = "If the previously created authorization has been set to expire please wait for the expiration period before continuing.\r\n\
strMessage = strMessage + "If the previously created authorization has been set to expire please wait for the expiration period before continuing.\r\n\
Otherwise please instruct the test applicant to cause the authorization to expire now and continue testing after this has been performed.\r\n\
\r\n\
If you do not wish to proceed click No.\r\n\
To proceed click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("[FB_14] Authorization and Authentication (OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired) Testing terminated by user.");
	testRunner.fail("[FB_14] Authorization and Authentication (OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization for access_token" id="84909737-fd1d-41f7-af0e-ab3a1fdc9426"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="7833b236-0569-4845-a351-1e6e154ee057"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="91e703ef-4710-480e-bfad-da8a2bc3cf6a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9feEtValF5UHVXRHFzRVNQMXpqS0tGUlE1RmdnIiwgInVzZXIiOiA0NTY0NCwgInNjb3BlIjogIkZCPTFfM180XzEzXzE0IiwgInR5cGUiOiAiZ2JjX2F1dGgiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAiYXV0aF9pZHMiOiBbMTE5NDk1XX06MWdVS3BvOmdsVzhTbGtOYWVmWE9mcGJ5d1ZrSVhwXy1HUQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119495</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="797c5efb-fa4e-482e-b8ea-e9dc2e9e94f4"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Indicate Authorization is Required" id="27bfe92d-764c-40b1-b59f-cb91c1f50666"><con:settings/><con:config><script>//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project;

// Force a new Authorization request
project.setPropertyValue("authorizationId","");</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite>
<con:testSuite id="586693d3-87af-400f-b868-90ab2bb152db" name="[FUTURE]*[FB_18] Multiple UsagePoints"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0c492266-94f8-48a0-bff6-3866a6d3bd11" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_18] Multiple UsagePoints" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FUTURE]*[FB_19] Partial Update Data" id="d27adaf9-fad4-4ebd-b4dd-2d7af1a11f65">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_19] Partial Update Data" searchProperties="true" id="395adfd8-27de-4152-ac79-a898f5305634">
		<con:settings/>
		<con:properties/>
	</con:testCase>
	<con:properties/>
</con:testSuite>
<con:testSuite name="[FUTURE]*[FB_31] Authorization and Authentication w/o Pre-Negotiated Scope" id="01a19521-b2c6-412f-a01e-0be37af4ec1b">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD001 [NEG] Malformed Authorization Code Requests" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e8df71c7-3b64-4389-935c-b038cd40b3b0"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="cf527385-240f-4192-9ade-3a0e46f68db2"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD001 [NEG] Malforned Authorization Code Request: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD001 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="e02d8b5c-4a1a-4165-8007-c786c74a90a2"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
context.mockService =  testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG A tests Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockPort variable is blank or null: " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockPort variable is blank or null: " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) proxyOutPort variable is blank or null: " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) proxyOutPort variable is blank or null: " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify OAuth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Redirect URI Endpoint variable is blank or null: " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Redirect URI variable is blank or null: " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Token Endpoint variable is blank or null: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client ID variable is blank or null: " + authCase.getPropertyValue("client_id"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client ID variable is blank or null: " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client Secret variable is blank or null: " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client Secret variable is blank or null: " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Data Custodian Scope Selection Screen URI variable is blank or null: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("GotFirstRedirect","FALSE");
context.mockService.setPropertyValue("GotScopeSelPOST","FALSE");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("client_secret",authCase.getPropertyValue("client_secret"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());

log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockService starting");

def runner = context.mockService.start();

log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Start Mock Service -- Start Mock Service) mockService: " + runner + " started");

context.mockRunner = runner;
return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="1844488d-9cb1-41f5-88b0-5db67b69dce8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="520606eb-5da4-4627-906b-64eb6bde14f0"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String parseBaseUrlFromURI(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    if(aURL.getPort().equals(-1))
    {
	    log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) aURL.getPort(): " + aURL.getPort());
	    log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost());
	    return aURL.getProtocol() + "://" +  aURL.getHost();
    }
    else
    {
	    log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) aURL.getPort(): " + aURL.getPort());
	    log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort());
	    return aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort();
    }
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) strResource: " + aURL.getPath());
    return aURL.getPath();
}

String strBaseUrl = parseBaseUrlFromURI(strScopeSelURI);
String strResource = parseResource(strScopeSelURI);

log.info "[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) Scope select URI: " + strScopeSelURI;

DriverHelper driver = new DriverHelper(strBaseUrl,strResource,"",log);

log.info "[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Request -- Script will bring up browser to DC Scope selection screen) driver: " + driver;

context["driver"] = driver;

driver.get(strScopeSelURI);
</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="866f0321-e3f2-461f-9c1e-4e5e513d4136"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian and select a scope option'.\n\nWhen they are done, take back Keyboard Control and click OK.";
//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian and select a scope option'.\n\nWhen they are done, take back Keyboard Control and click OK.", "");
result=ui.getDialogs()showInfoMessage(strMessage, "");

context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Mock Service to receive TP scope sel POST" id="be7a5409-c1b8-45b6-a8ec-55bb95556a1b"><con:settings/><con:config><script>
int cnt=20;

while(cnt>0){
	log.info("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Requests) Script waiting for TP scope selection POST");
	if(context.mockService.getPropertyValue("GotScopeSelPOST").equals("TRUE")){
		assert true;
		return;
	}
	Thread.sleep(1000);
	cnt--;
}

log.error("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Requests) No scope selection POST received");
testRunner.fail("[FB_14] Authorization and Authentication (OAD001 [NEG] Malformed Authorization Code Requests) No scope selection POST received.");
</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="89c20aff-462e-4231-bf0a-671decfcd54f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Issue malformed oauth/authorize GETs" id="352578e1-3b40-47c3-adb1-9e6738b1e856"><con:settings/><con:config><script><![CDATA[import java.net.HttpUrlConnection.*;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

public class codeLocation {
	
	private int iRespCode;
	private String strRespLoc;

	public codeLocation (int c, String l) {
		iRespCode = c;
		strRespLoc = l;
	}


	/******************************
	 * Return Response Code
	 ******************************/
	 public int getCode() {
	 	return iRespCode;
	 }


	/******************************
	 * Return Response Location
	 ******************************/
	 public String getLocation() {
	 	return strRespLoc;
	 }
}

int issueGET(String targetURL,String strSessionID){

	log.info("targetURL: " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Cookie", "JSESSIONID=" + strSessionID);
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			log.info("Response line: " + line);
			response.append(line);
			response.append('\r');
		}
		rd.close();

		log.info "Response code = " + connection.getResponseCode();

		strRespLoc = connection.getHeaderField("Location");
		log.info "Response Location: " + strRespLoc;
		
		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info("Exception: " + e.getMessage());
		return 0;
	} finally {
		if(connection != null) {
			log.info("Response: " + connection.getResponseCode());
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

//   ****************************************************************************************************************************
//   *
//   *    Verify Browser SessionID variable is valid
//   *
//   ****************************************************************************************************************************

// Verify Browser Session variable is valid
if (testRunner.testCase.getPropertyValue("browserSession") == "" || testRunner.testCase.getPropertyValue("browserSession") == null) {

	log.error("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Browser SessionID variable is blank or null -- " + testRunner.testCase.getPropertyValue("browserSession"));
	testRunner.fail("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Browser Session variable is blank or null -- " + testRunner.testCase.getPropertyValue("browserSession"));
	return;
	
	} else {
		log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) Browser Session variable: " + testRunner.testCase.getPropertyValue("browserSession"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize test step variables
//   *
//   ****************************************************************************************************************************

String strSessionID = testRunner.testCase.getPropertyValue("browserSession");
String strSelectedScope = context.mockService.getPropertyValue("SelectedScope").replace("scope=","");
String strRedirURI = authCase.getPropertyValue("redirect_uri");
String strClientId = authCase.getPropertyValue("client_id");
String strRespLocation;

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) aURL: " + aURL);
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) aURL.getPort(): " + aURL.getPort());
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) strAuthEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();
log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) strAuthEndpoint: " + strAuthEndpoint);

log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope (OAD001 [NEG] Malformed Authorization Code Requests -- Issue malformed oauth/authorize GETs) strRedirURI: " + strRedirURI);

// Sample Authorization Code Grant request valid query string:
//strQryParams = "?response_type=code" + "&client_id=third_party" + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018"; 

int iTestID= 0;
while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "";
	int iRespCode = 0;
	int iExpectedRespCode = 0;

/*

 no authorization code in the response 

 */

	switch(iTestID) {
		case 0:
			strTestName = "Malformed Authorization Code Request (No response_type field-value pair)";
			strQryParams = "?client_id=" + strClientId + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018"; 
  			//iExpectedRespCode = 302;	
			// PASS is response code=302 and the body contains error=
 			break;
		case 1:
			strTestName = "Malformed Authorization Code Request (No client_id field-value pair)";
			strQryParams = "?response_type=code" + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";  
  			//iExpectedRespCode = 401;	
  			// PASS is response code=401 						
			break;
		case 2:
			strTestName = "Malformed Authorization Code Request (Invalid response_type field-value pair)";
			strQryParams = "?response_type=badresponsetype&client_id=" + strClientId + "&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
  			//iExpectedRespCode = 302;	
  			// PASS is response code=302 and the body contains error=
			break;
		case 3:
			strTestName = "Authorization Code Request (Invalid client_id field-value pair)";
			strQryParams = "?response_type=code&client_id=invalid_third_party&redirect_uri=" + strRedirURI + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
			//iExpectedRespCode = 401;
			// PASS is response code=401 		
			break;
		case 4:
			strTestName = "Authorization Code Request (Invalid redirect_uri field-value pair)";
			strQryParams = "?response_type=code&client_id=" + strClientId + "&redirect_uri=" + "https://services.greenbuttondata.org" + "&scope=" + strSelectedScope + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
			//iExpectedRespCode = 400;	
			// PASS is response code=400 or 403		
			break;
		case 5:
			strTestName = "Authorization Code Request (Invalid scope field-value pair)";
			strQryParams = "?response_type=code&client_id=" + strClientId + "&redirect_uri=" + strRedirURI + "&&scope=" + "FB=????" + "&state=ee148ec2-9892-466e-a013-4dedf1eb3018";
			//iExpectedRespCode = 302;
			// PASS is response code=302 and the body contains error=
			break;
		default:
			break;
	}


	// 0 indicates skip test
	//if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");		
		log.info("Testing: " + strTestName);
		//log.info("Expected Response Code: " + iExpectedRespCode);
		iRespCode = issueGET(strAuthEndpoint + strQryParams,strSessionID);


		switch(iTestID){
			// PASS is response code=302 and the body contains error=
			case 0:
			case 2:
			case 5: 
				if((iRespCode==302) && (strRespLoc != null) && (strRespLoc.indexOf("error=") != -1) && (strRespLoc.indexOf("code=") == -1)){
					// success 
				} else {
					if(iRespCode!=302){
						strRespLoc="empty";
					}
					
					log.error("Failed malformed Authorization request: " + strTestName + " Expected 302 with error= response. Received response code: " + iRespCode + " response body-'" + strRespLoc + "'");
					testRunner.fail("Failed malformed Authorization request: " + strTestName + " Expected 302 with error= response. Response code: " + iRespCode + " response body-'" + strRespLoc + "'");		
				}
			
				break;
			// PASS is response code=401 		
			case 1:
			case 3: 
				if(iRespCode!=401) {
					log.error("Failed malformed Authorization request: " + strTestName + " expected response code: 401 but received response code: " + iRespCode);
					testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: 401 but received response code: " + iRespCode);					
				}
				break;
			// PASS is response code=400 or 403
			case 4: 
				if(iRespCode!=400 && iRespCode!=403) {
					log.error("Failed malformed Authorization request: " + strTestName + " expected response code: 401 or 403 but received response code: " + iRespCode);
					testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: 401 or 403 but received response code: " + iRespCode);					
				}			
				break;
			default:
				log.error("Failed malformed Authorization request: " + strTestName + " invalid testID");
				testRunner.fail("Failed malformed Authorization request: " + strTestName + " invalid testID");		
				break;
		}
		/*
		switch(iRespCode) {
			
			case 302:
				// A 302 Redirect Response Code with a "code=" parameter is NOT valid
				if (strRespLoc != null) {
					if (strRespLoc.indexOf("code=") != -1) {
						log.error("Failed malformed Authorization request: " + strTestName + " expected response code: " + iExpectedRespCode + " but received response code: " + iRespCode);
						testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: " + iExpectedRespCode + " but received response code: " + iRespCode);
					}
				}
				break;

			case 200:
				// if we get 200, this means they are progressing the dialog instead of rejecting the request, so this is a failure
				log.error("Failed malformed Authorization request: " + strTestName + " the data custodian progressed rather than rejected the request");
				testRunner.fail("Failed malformed Authorization request: " + strTestName + " the data custodian progressed rather than rejected the request");
				break;

			default:
				// We received a non-expected response code
				log.error("Failed malformed Authorization request: " + strTestName + " expected response code: " + iExpectedRespCode + " but received response code: " + iRespCode);
				testRunner.fail("Failed malformed Authorization request: " + strTestName + " expected response code: " + iExpectedRespCode + " but received response code: " + iRespCode);
				break;
		}	*/			
		
	//} else {
	//	log.info("skipping: " + strTestName);
	//}


	iTestID++;
	if(iTestID > 5){
		break;
	}
}

assert true;]]></script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="34f704d8-f551-4fb1-a224-d233b4fac180"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="2e9ea918-b912-4dcd-9435-a6146e589a50"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}

log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();
</con:tearDownScript><con:properties><con:property><con:name>extracted_scope_sel_uri</con:name><con:value/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://localhost:8444/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>browserSession</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BFB4C3B6604951B5665C8C660CE84BCA</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD002 [NEG] Authorization Code Request (Retail Customer Passes Authentication and DENIES access)" searchProperties="true" id="182ba172-5e89-45a8-a429-0a74540b0379"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="34ce89ca-7cf7-4f5b-ac09-8c5765fe199a"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD002 [NEG] Authorization CodeRequest(Retail Customer Passes Authentication and DENIES access): Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD002 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="6db2c140-9430-4c93-b359-d7ee63c2cadd"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	log.error("OAD002 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("OAD002 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify Oauth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("OAD002 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.info("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("OAD002 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("error","");
context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="568e9246-6f93-4717-97ea-248a91bd165f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="dc5cada2-950c-4b55-86ae-14aecb950680"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String parseBaseUrlFromURI(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    if(aURL.getPort().equals(-1))
    {
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost());
	    return aURL.getProtocol() + "://" +  aURL.getHost();
    }
    else
    {
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort());
	    return aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort();
    }
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strResource: " + aURL.getPath());
    return aURL.getPath();
}

String strBaseUrl = parseBaseUrlFromURI(strScopeSelURI);
String strResource = parseResource(strScopeSelURI);

log.info "OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- Scope select URI: " + strScopeSelURI;

DriverHelper driver = new DriverHelper(strBaseUrl,strResource,"",log);

context["driver"] = driver;

driver.get(strScopeSelURI);
</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="5d448fe2-f84a-423f-8df5-9f0bb2584130"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'DENY the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK."
//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'DENY the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");


context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="f0a7669e-eda6-455d-8a2e-11af085c3ede"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="b469a5f0-6180-493f-acb3-e026a3cd0b0b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="4aa05cbe-1347-416c-ae86-463499f4b236"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Check access denied" id="35c3bda2-3791-4e9e-8b5c-5e1de72e8a9f"><con:settings/><con:config><script>
String strError =  context.mockService.getPropertyValue("error");

if(!strError.contains("error=access_denied"))
{
	log.error("OAD002 [NEG] Authorization Code Request (Retail Customer Passes Authentication and DENIES access) Authorization Server did not respond with expected error:" + strError);
	testRunner.fail("OAD002 [NEG] Authorization Code Request (Retail Customer Passes Authentication and DENIES access) Authorization Server did not respond with expected error:" + strError);

	return
}
</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}
log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();
</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://localhost:8443/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://localhost:8444/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://localhost:8443/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>LAaB0X</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"275ff15a-8902-445e-b4fd-f12fd00f9092","token_type":"bearer","refresh_token":"1b0b86ee-3508-4349-afff-0d87c1d004c9","expires_in":31535999,"scope":"FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13","resourceURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5","authorizationURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5"}
</con:value></con:property><con:property><con:name>access_token</con:name><con:value>275ff15a-8902-445e-b4fd-f12fd00f9092</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>1b0b86ee-3508-4349-afff-0d87c1d004c9</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>31535999</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>client_id</con:name><con:value>third_party</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD003 [NEG] Access Token Request Authorization Header and malformed Access Token Authorization Code Request Rejection" searchProperties="true" id="e94ac507-aa09-4551-b3df-5a1ca3bec42a"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="8d3a685a-641e-4428-9053-14f2a6df780b"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD003 [NEG] Access Token Request Authorization Header and malformed Access Token Authorization Code Request Rejection: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD003 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="0c4b3b23-0c3e-4059-9467-bc07765df004"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG B tests Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	log.error("OAD003 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("OAD003 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify OAuth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("OAD003 [NEG] Start Mock Service -- OAuth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- OAauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("OAD003 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("OAD003 [NEG] Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.info("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("OAD003 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************


context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("client_secret",authCase.getPropertyValue("client_secret"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="fa62a5ba-1e13-4ef6-9033-eef94bc3a86a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="78b52202-565a-4101-aaf8-88eba9d55777"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String strHost = "";

//	Does URI start with http://
if (strScopeSelURI.substring("http://".length()) == -1) {	// Yes, extract baseURI value
	
	strHost = strScopeSelURI.substring("http://".length());
	log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strHost: " + strHost);
	
} else {	// No, extract baseURI value using https://

	strHost = strScopeSelURI.substring("https://".length());
	log.info("OAD002 [NEG] Script will bring up browser to DC Scope selection screen -- strHost: " + strHost);
	
}

String strResource = strHost.substring(strHost.indexOf("/"));
strHost = strScopeSelURI.substring(0,strScopeSelURI.indexOf(strResource));

DriverHelper driver = new DriverHelper(strHost,strResource,"",log);

context["driver"] = driver;

driver.get(strScopeSelURI);</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="63757494-d8de-4757-b76a-37857143ca3c"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.\n";
//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.\n", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");

context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="1ae4f6cb-e7d6-4531-b781-a8028ff4838c"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="9d22969f-9aad-470a-bdd7-30d7854258a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="cd8a4a4d-7921-4fa0-a6c2-1e1e4dd172e6"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Issue Malformed GET OAuth Token requests" id="7aa96cc7-c88a-4656-a235-094154fdbf27"><con:settings/><con:config><script><![CDATA[import java.net.*;
import java.io.*;

//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project;
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

int issueGET(String targetURL,String strToken){

	log.info("Issuing malformed GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();
			
		log.info "Response Code = " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "Response = " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

String strOAuthCodeReceivedValue = context.mockService.getPropertyValue("OAuthCodeReceivedValue");
String strRedirURI = authCase.getPropertyValue("redirect_uri");
String strClientId = authCase.getPropertyValue("client_id");

// Save Received Authorization Code for later tests
authCase.setPropertyValue("OAuthCodeReceivedValue",strOAuthCodeReceivedValue);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strOAuthCodeReceivedValue: " + strOAuthCodeReceivedValue);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' Saved strOAuthCodeReceivedValue: " + authCase.getPropertyValue("OAuthCodeReceivedValue"));

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' aURL: " + aURL);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' aURL.getPort(): " + aURL.getPort());
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strRedirURI: " + strRedirURI);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' strAuthorizationServerTokenEndpoint: " + strAuthorizationServerTokenEndpoint);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' client_id: " + strClientId);
log.info("OAD003 [NEG] Access Token Request malformed Access Token Request Rejection -- 'Issue Malformed GET OAuth Token Request' client_secret: " + authCase.getPropertyValue("client_secret"));

String strAuthentication = authCase.getPropertyValue("client_id") + ":" + authCase.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

// Sample valid Access Token Authorization Code Request query parameters
//strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;

int iTestID = 0;

while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "";
	String strToken = token;
	 
	int iRespCode = 0;
	int iExpectedRespCode = 0;

	switch(iTestID) {
		case 0:
			strTestName = "Access Token Request Authorization No Authorization Header";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;
			strToken = "";				
			iExpectedRespCode = 401;
			break;
		case 1:
			strTestName = "Access Token Request Authorization Invalid Authorization Header";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;
			strToken = "bad value";				
			iExpectedRespCode = 401;
			break;			
		case 2:
			strTestName = "Malformed Authorization Code Grant Access Token Request (No grant_type field-value pair)";
			strQryParams = "?code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;	
		case 3:
			strTestName = "Malformed Authorization Code Grant Access Token Request (No code field-value pair)";
			strQryParams = "?grant_type=authorization_code" + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;
		case 4:
			strTestName = "Malformed Authorization Code Grant Access Token Request (No redirect_uri field-value pair)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue;				
			iExpectedRespCode = 400;
			break;
		case 5:
			strTestName = "Malformed Authorization Code Grant Access Token Request (Contains  HTTP BASIC Authorization header and client_id field-value pair)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI + "?client_id=" + strClientId;				
			iExpectedRespCode = 400;
			break;
		case 6:
			strTestName = "Invalid Authorization Code Grant Access Token Request (redirect_uri field-value pair doess not match the redirect_uri field-value pair in the Authorization Code Request)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=https://services.greenbuttondata.org";				
			iExpectedRespCode = 400;
			break;
		case 7:
			strTestName = "Invalid Authorization Code Grant Access Token Request (code field-value pair contains an authorization code issued to another client)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;			
			iExpectedRespCode = 400;
			break;
		case 8:
			strTestName = "Invalid Authorization Code Grant Access Token Request (code field-value pair contains an invalid authorization code)";
			strQryParams = "?grant_type=authorization_code" + "&code=badauthorizationcode" + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;
		case 9:
			def ui = com.eviware.soapui.support.UISupport;
			strMessage = project.getPropertyValue("CMDTestStep") + "\n\nThe following test will take 6 minutes to complete. SoapUI may appear inactive. Please click OK now and please be patient..."
//			result = ui.getDialogs().showInfoMessage("The following test will take 6 minutes to complete. SoapUI may appear inactive. Please click OK now and please be patient...", "");
               result = ui.getDialogs().showInfoMessage(strMessage, "");
			Thread.sleep(360000);
			strTestName = "Invalid Authorization Code Grant Access Token Request (code field-value pair contains a valid authorization code issued 6 minutes prior)";
			strQryParams = "?grant_type=authorization_code" + "&code=" + strOAuthCodeReceivedValue + "&redirect_uri=" + strRedirURI;				
			iExpectedRespCode = 400;
			break;
		default:
			break;
	}

	// 0 indicates skip test
	if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");
		log.info("Testing: " + strTestName);
		log.info("Expected Response Code: " + iExpectedRespCode);
		iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);
		
		if(iRespCode != iExpectedRespCode) {
			log.error("Failed malformed token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			testRunner.fail("Failed malformed token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			return;						
		}		
	} else {
		log.info("skipping: " + strTestName);
	}	

	iTestID++;
	if(iTestID > 9){
		break;
	}
}	

assert true;

]]></script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}
log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>quexi</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"06430590-2897-422a-9316-95fccb60e96d","token_type":"bearer","refresh_token":"1d8e2070-73ee-40f8-9549-dad626ead16a","expires_in":31535999,"scope":"FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13","resourceURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5","authorizationURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5"}
</con:value></con:property><con:property><con:name>access_token</con:name><con:value>06430590-2897-422a-9316-95fccb60e96d</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>1d8e2070-73ee-40f8-9549-dad626ead16a</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>31535999</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD004 [NEG] Invalid Authorization Code Grant Access Token Request (code field-value pair contains a previously used authorization code)" searchProperties="true" id="2c7bb27f-e06c-4c54-8931-ed380c3680d6"><con:description/><con:settings/><con:testStep type="groovy" name="Issue GET OAuth Token requests" id="5bb00a76-2d45-4d5e-b605-af13682e8e76"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

int issueGET(String targetURL,String strToken){

	log.info("Issuing malformed GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();
			
		log.info "Response Code = " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "Response = " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

String strOAuthCodeReceivedValue = authCase.getPropertyValue("OAuthCodeReceivedValue");
String strRedirURI = authCase.getPropertyValue("redirect_uri");

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- aURL: " + aURL);
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- aURL.getPort(): " + aURL.getPort());
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strRedirURI: " + strRedirURI);
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strOAuthCodeReceivedValue: " + strOAuthCodeReceivedValue);

String strAuthentication = authCase.getPropertyValue("client_id") + ":" + authCase.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

String strQryParams = "?redirect_uri=" + strRedirURI + "&amp;code=" + strOAuthCodeReceivedValue + "&amp;grant_type=authorization_code";
String strToken = token;

log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strToken: " + strToken);
log.info("OAD004 [NEG] Invalid Authorization Code Grant Access Token Request -- strQryParams: " + strQryParams);

int iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);


if(iRespCode != 400) {
	log.error("Token request expected result code 400 but received:" + iRespCode);
	testRunner.fail("Token request expected result code 400 but received:" + iRespCode);
	return;						
}		


assert true;

</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>OrBApu</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"06430590-2897-422a-9316-95fccb60e96d","token_type":"bearer","refresh_token":"1d8e2070-73ee-40f8-9549-dad626ead16a","expires_in":31535999,"scope":"FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13","resourceURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5","authorizationURI":"http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5"}
</con:value></con:property><con:property><con:name>access_token</con:name><con:value>06430590-2897-422a-9316-95fccb60e96d</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>1d8e2070-73ee-40f8-9549-dad626ead16a</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>31535999</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/Authorization/5</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD005 [POS] Successful Access Token Request" searchProperties="true" id="551bb555-033d-4d4e-b349-4876f4916857"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="dd79e7cb-1049-43cf-afde-3c7b1a1537a6"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD005 [POS] Successful Access Token Request: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD005 [POS]");</script></con:config></con:testStep><con:testStep type="groovy" name="Ask User To expire Authorization" id="b46591fa-c637-4732-8ccb-ac7e134de616"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"

//String strDialog = "If the Data Custodian supports changing the default authorization expiration period, request the \
strMessage = strMessage + "If the Data Custodian supports changing the default authorization expiration period, request the \
Data Custodian to set the default period to a short duration (i.e. one or two minutes).\r\n\
After the expiration period has been changed note the new authorization expiration period used and proceed.  Otherwise \
the Data Custodian will be requested to forcefully expire \r\n\
the authorization about to be created later in the test.\r\n\
\r\n\
If you do not wish to proceed, click No.\r\n\
To proceed, click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- (OAD005 [POS] Successful Access Token Request) Testing terminated by user.");
	testRunner.fail("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- (OAD005 [POS] Successful Access Token Request) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="0e8b6926-406d-4ca2-8cd0-fe1210815639"><con:settings/><con:config><script>//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

context.mockService = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty NEG B tests Authorization Mock Service");

//   ****************************************************************************************************************************
//   *
//   *    Verify all mock service global variables are valid
//   *
//   ****************************************************************************************************************************

// Verify mockPort variable is valid
if (authCase.getPropertyValue("mockPort") == "" || authCase.getPropertyValue("mockPort") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	log.error("OAD005 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- mockPort variable is blank or null -- " + authCase.getPropertyValue("mockPort"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- mockPort variable: " + authCase.getPropertyValue("mockPort"));
	}

// Verify proxyOutPort variable is valid
if (authCase.getPropertyValue("proxyOutPort") == "" || authCase.getPropertyValue("proxyOutPort") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	log.error("OAD005 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- proxyOutPort variable is blank or null -- " + authCase.getPropertyValue("proxyOutPort"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- proxyOutPort variable: " + authCase.getPropertyValue("proxyOutPort"));
	}

// Verify Oauth Authorization Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == "" || authCase.getPropertyValue("authorizationServerAuthorizationEndpoint") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	log.error("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- Oauth Authorization Endpoint variable: " + authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
	}

// Verify OAuth Authorization Redirect URI variable is valid
if (authCase.getPropertyValue("redirect_uri") == "" || authCase.getPropertyValue("redirect_uri") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	log.error("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI Endpoint variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable is blank or null -- " + authCase.getPropertyValue("redirect_uri"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Redirect URI variable: " + authCase.getPropertyValue("redirect_uri"));
	}

// Verify OAuth Authorization Token Endpoint variable is valid
if (authCase.getPropertyValue("authorizationServerTokenEndpoint") == "" || authCase.getPropertyValue("authorizationServerTokenEndpoint") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	log.error("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable is blank or null -- " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- OAuth Authorization Token Endpoint variable: " + authCase.getPropertyValue("authorizationServerTokenEndpoint"));
	}

// Verify Client ID variable is valid
if (authCase.getPropertyValue("client_id") == "" || authCase.getPropertyValue("client_id") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	log.error("OAD005 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- Client ID variable is blank or null -- " + authCase.getPropertyValue("client_id"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- Client ID variable: " + authCase.getPropertyValue("client_id"));
	}

// Verify Client Secret variable is valid
if (authCase.getPropertyValue("client_secret") == "" || authCase.getPropertyValue("client_secret") == null) {

	log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	log.error("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	testRunner.fail("Create Authorization and extract all information Start Mock Service -- Client Secret variable is blank or null -- " + authCase.getPropertyValue("client_secret"));
	return;
	
	} else {
		log.info("Create Authorization and extract all information Start Mock Service -- Client Secret variable: " + authCase.getPropertyValue("client_secret"));
	}

// Verify Data Custodian Scope Selection Screen URI is valid
if (authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == "" || authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI") == null) {

	log.info("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	log.error("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	testRunner.fail("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable is blank or null -- " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	return;
	
	} else {
		log.info("OAD005 [NEG] Start Mock Service -- Data Custodian Scope Selection Screen URI variable: " + authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));
	}

//   ****************************************************************************************************************************
//   *
//   *    Initialize mock service variables
//   *
//   ****************************************************************************************************************************

context.mockService.setPropertyValue("tokenResponse","");
context.mockService.setPropertyValue("authorizationServerAuthorizationEndpoint",authCase.getPropertyValue("authorizationServerAuthorizationEndpoint"));
context.mockService.setPropertyValue("redirect_uri",authCase.getPropertyValue("redirect_uri"));
context.mockService.setPropertyValue("authorizationServerTokenEndpoint",authCase.getPropertyValue("authorizationServerTokenEndpoint"));
context.mockService.setPropertyValue("client_id",authCase.getPropertyValue("client_id"));
context.mockService.setPropertyValue("dataCustodianScopeSelectionScreenURI",authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI"));

context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def runner = context.mockService.start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="calltestcase" name="OriginalHostsFile" id="a75d97bf-0940-427e-8b87-804cf759d0a3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3755e6db-4149-4c29-bc8d-a4b0abd15bf4</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Script will bring up browser to DC Scope selection screen" id="09bfc7e5-3800-4d48-ba55-78afe6003bc2"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.DriverHelper;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

String strScopeSelURI = authCase.getPropertyValue("dataCustodianScopeSelectionScreenURI");

String parseBaseUrlFromURI(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    if(aURL.getPort().equals(-1))
    {
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost());
	    return aURL.getProtocol() + "://" +  aURL.getHost();
    }
    else
    {
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- aURL.getPort(): " + aURL.getPort());
	    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- strBaseUrl: " + aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort());
	    return aURL.getProtocol() + "://" +  aURL.getHost() + ":" + aURL.getPort();
    }
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);

    log.info("OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- strResource: " + aURL.getPath());
    return aURL.getPath();
}

String strBaseUrl = parseBaseUrlFromURI(strScopeSelURI);
String strResource = parseResource(strScopeSelURI);

log.info "OAD005 [NEG] Script will bring up browser to DC Scope selection screen -- Scope select URI: " + strScopeSelURI;

DriverHelper driver = new DriverHelper(strBaseUrl,strResource,"",log);

context["driver"] = driver;

driver.get(strScopeSelURI);</script></con:config></con:testStep><con:testStep type="groovy" name="Wait for Authorization to Complete and End Browser session" id="3aed40e9-305b-4d84-89fb-1f258edbf4c2"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\nGive Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.";

//result = ui.getDialogs().showInfoMessage("Give Keyboard Control to the test applicant.\n\nAsk them to 'Login to the Data Custodian', 'Select a scope option', and 'APPROVE the authorization request'.\n\nWhen they are done, take back Keyboard Control and click OK.", "");
result = ui.getDialogs().showInfoMessage(strMessage, "");

context["driver"].quit();</script></con:config></con:testStep><con:testStep type="groovy" name="End Browser session" id="f255a891-705f-4b6f-8f5e-7ca9b1fbc0f5"><con:settings/><con:config><script>context["driver"].quit();
context["driver"] = null;</script></con:config></con:testStep><con:testStep type="calltestcase" name="StunnelHostsFile" id="4be37375-bdff-4c61-bbbc-e8b331c26199"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>acec55ea-8ed5-4b45-ad50-6a546d29ea99</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="eba141a0-652e-4482-bed9-d047ce1774d2"><con:settings/><con:config><script>context.mockRunner.stop();
context.mockRunner = null;
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Issue Successful GET Authorization Code" id="64b5b8c3-51e8-4c8b-a87a-e1a81723866f"><con:settings/><con:config><script>import java.net.*;
import java.io.*;
import groovy.json.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;

import groovyx.net.http.HTTPBuilder;
import static groovyx.net.http.Method.POST;
import static groovyx.net.http.ContentType.TEXT;


//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//	Create addressability to project variables
def project = testRunner.testCase.testSuite.project;
/*
int issueGET(String targetURL,String strToken){

	log.info("Issuing GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	String strTmpResp = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();

		strTmpResp = response.toString();
		log.info "ResponseCode = " + connection.getResponseCode();
		log.info "Response = " + strTmpResp;
		

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "ResponseCode = " + connection.getResponseCode();
			log.info "Response = " + strTmpResp;
			testRunner.testCase.setPropertyValue("tokenResponse",strTmpResp);
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}
*/
String parseEndpointFromURI(String strURI) throws Exception {

    URL aURL = new URL(strURI);

    // return with proxy port

    log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' parseEndpointFromURI routine");
    log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' returned Endpoint: http://" + aURL.getHost() + ":" + context.mockService.getPropertyValue("proxyOutPort"));
    return "http://" +  aURL.getHost() + ":" + context.mockService.getPropertyValue("proxyOutPort");
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);
    return aURL.getPath();
}

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doPOST(String strBaseEndpoint,String href, String token,Map&lt;String, Serializable> params) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' doPOST");
		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Request URL: " + strBaseEndpoint + "/" + href + "?" + params);

try{
		http.request( strBaseEndpoint, POST, TEXT ) { req ->
			uri.path = href
			uri.query = params
		     headers.Authorization = 'Basic ' + token
			headers.Accept = 'application/json, application/*+json'
			
			response.failure = { resp ->
				log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: " + resp.statusLine);
				return null;
			}  

			response.success = { resp, reader ->
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeded: " + resp.statusLine);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeded len: " + resp.headers['Content-Length']?.value);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeded type: " + resp.headers['Content-Type']?.value);
				
				String jsonResponse = (reader.readLines().join() as String);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Response Body: " + jsonResponse);
				_strResponseBody = jsonResponse;
				//_strResponseBody = reader.getText();
			}
		}
}
catch(Exception e)
{
 log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: Exception Occurred:" + e.getMessage());

}
		return _strResponseBody;
	}	
}


String strRedirURI = authCase.getPropertyValue("redirect_uri");

// Retrieve received Authorization Code and save it globally
String strOAuthCodeReceivedValue = context.mockService.getPropertyValue("OAuthCodeReceivedValue");
authCase.setPropertyValue("OAuthCodeReceivedValue",strOAuthCodeReceivedValue);

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.debug("OAD005 [POS] Successful GET Authorization Code -- aURL: " + aURL);
log.debug("OAD005 [POS] Successful GET Authorization Code -- aURL.getPort(): " + aURL.getPort());
log.debug("OAD005 [POS] Successful GET Authorization Code -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
//strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();
strAuthorizationServerTokenEndpoint = authCase.getPropertyValue("authorizationServerTokenEndpoint");

log.info("OAD005 [POS] Successful GET Authorization Code -- strRedirURI: " + strRedirURI);
log.info("OAD005 [POS] Successful GET Authorization Code -- strOAuthCodeReceivedValue: " + strOAuthCodeReceivedValue);

String strAuthentication = authCase.getPropertyValue("client_id") + ":" + authCase.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

String strQryParams = "?redirect_uri=" + strRedirURI + "&amp;code=" + strOAuthCodeReceivedValue + "&amp;grant_type=authorization_code";
String strToken = token;
/*
iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);

if(iRespCode != 200) {
	log.error("Failed GET Token request: response code:" + iRespCode);
	testRunner.fail("Failed GET Token request: response code:" + iRespCode);
	return;						
}	
*/


ResourceTester resourceTester = new ResourceTester(log);

String strHost = parseEndpointFromURI(strAuthorizationServerTokenEndpoint);
String strResource = parseResource(strAuthorizationServerTokenEndpoint);
Map params = [redirect_uri: authCase.getPropertyValue("redirect_uri"), code: strOAuthCodeReceivedValue,grant_type:'authorization_code'];
log.info("Issue POST");
String strGetResponseBody = resourceTester.doPOST(strHost,strResource,token,params);
log.info("Issued POST response:" + strGetResponseBody);

if(strGetResponseBody==null) {
	log.error("Failed POST Token request");
	testRunner.fail("Failed POST Token request");
	return;						
}

testRunner.testCase.setPropertyValue("tokenResponse",strGetResponseBody);



String strTokenResponse = testRunner.testCase.getPropertyValue("tokenResponse");

if((strTokenResponse==null)||(strTokenResponse=="")){
	log.error("Failed POST Token request response body empty");
	testRunner.fail("Failed POST Token request response body empty");
	return;
}

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(strTokenResponse);
def headers = new StringToStringMap()

log.info("OAD005 [POS] Successful GET Authorization Code -- access_token: " + tokenResponse.access_token);
log.info("OAD005 [POS] Successful GET Authorization Code -- token_type: " + tokenResponse.token_type);
log.info("OAD005 [POS] Successful GET Authorization Code -- refresh_token: " + tokenResponse.refresh_token);
log.info("OAD005 [POS] Successful GET Authorization Code -- expires_in: " + tokenResponse.expires_in);
log.info("OAD005 [POS] Successful GET Authorization Code -- scope: " + tokenResponse.scope);
log.info("OAD005 [POS] Successful GET Authorization Code -- resourceURI: " + tokenResponse.resourceURI);
log.info("OAD005 [POS] Successful GET Authorization Code -- authorizationURI: " + tokenResponse.authorizationURI);

if(tokenResponse.access_token==""){
	log.error("token response missing access_token");
	testRunner.fail("token response missing access_token");
	return;	
}
if(tokenResponse.token_type==""){
	log.error("token response missing token_type");
	testRunner.fail("token response missing token_type");
	return;	
}
if(tokenResponse.refresh_token==""){
	log.error("token response missing refresh_token");
	testRunner.fail("token response missing refresh_token");
	return;	
}
if(tokenResponse.expires_in==0){
	log.error("token response missing expires_in");
	testRunner.fail("token response missing expires_in");
	return;	
}
if(tokenResponse.scope==""){
	log.error("token response missing scope");
	testRunner.fail("token response missing scope");
	return;	
}
if(tokenResponse.resourceURI==""){
	log.error("token response missing resourceURI");
	testRunner.fail("token response missing resourceURI");
	return;	
}
if(tokenResponse.authorizationURI==""){
	log.error("token response missing authorizationURI");
	testRunner.fail("token response missing authorizationURI");
	return;	
}

authCase.setPropertyValue("access_token",tokenResponse.access_token);
authCase.setPropertyValue("token_type",tokenResponse.token_type);
authCase.setPropertyValue("refresh_token",tokenResponse.refresh_token);
authCase.setPropertyValue("expires_in",tokenResponse.expires_in.toString());
authCase.setPropertyValue("scope",tokenResponse.scope);
//authCase.setPropertyValue("resourceURI",tokenResponse.resourceURI);
//authCase.setPropertyValue("authorizationURI",tokenResponse.authorizationURI);

URI uriResource = new URI(tokenResponse.resourceURI);
URI uriAuthorization = new URI(tokenResponse.authorizationURI); 

authCase.setPropertyValue("resourceURI","http://" + uriResource?.getHost() + ":" + testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getPropertyValue("mockPort") + uriResource.path);
authCase.setPropertyValue("authorizationURI","http://" + uriAuthorization?.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + uriAuthorization.path);


project.setPropertyValue("access_token",tokenResponse.access_token);

log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('access_token'): " + authCase.getPropertyValue("access_token"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('token_type'): " + authCase.getPropertyValue("token_type"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('refresh_token'): " + authCase.getPropertyValue("refresh_token"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('expires_in'): " + authCase.getPropertyValue("expires_in"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('scope'): " + authCase.getPropertyValue("scope"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('resourceURI'): " + authCase.getPropertyValue("resourceURI"));
log.info("OAD005 [POS] Successful GET Authorization Code -- authCase.getPropertyValue('authorizationURI'): " + authCase.getPropertyValue("authorizationURI"));

log.info("OAD005 [POS] Successful GET Authorization Code -- project.getPropertyValue('access_token'): " + project.getPropertyValue("access_token"));

assert true;

</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>if(context.mockRunner != null){
	context.mockRunner.stop();
	context.mockRunner = null;
}

if(context["driver"] != null){
	context["driver"].quit();
	context["driver"] = null;	
}

log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>8TmRz3</con:value></con:property><con:property><con:name>tokenResponse</con:name><con:value>{"access_token":"de37fffe-94cd-4de3-a000-daea89a6ee45","token_type":"bearer","refresh_token":"5fe6eaa9-8970-40f8-b510-0116a2904dc2","expires_in":86399996,"scope":"FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13","resourceURI":"https://api.londonhydro.com/espi/1_1/resource/Batch/Subscription/1000000755","authorizationURI":"https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000793"}</con:value></con:property><con:property><con:name>access_token</con:name><con:value>039121fb-af73-4669-b972-4b4f9fd2281a</con:value></con:property><con:property><con:name>token_type</con:name><con:value>bearer</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>d7ba0b90-70ea-41a1-82dc-3e9b6e8361c8</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>119</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://testgb.mooo.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/9</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://testgb.mooo.com:null/DataCustodian/espi/1_1/resource/Authorization/9</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD006 [NEG] Invalid Access Token Requests for ApplicationInformation" searchProperties="true" id="f666a02d-1182-4771-b4c8-f2f6cbabd765"><con:settings/><con:testStep type="restrequest" name="GET ApplicationInformation with incorrect Access Token &quot;client_access_token&quot;" id="d31c99b7-aa02-49ce-98a8-f24f0892e912"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation with incorrect Access Token &quot;client_access_token&quot;" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">

					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="64003a3b-dd47-4e86-b288-b37c6f895346"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation with incorrect Access Token &quot;access_token&quot;" id="8c06227b-8651-46e5-aa6f-beaa3117bf90"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation with incorrect Access Token &quot;access_token&quot;" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="dd48c35c-050b-4f30-860d-58a9d623198d"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation with no Authorization Header" id="9b5469e9-1d61-4d0c-b966-7a1fdcc00635"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation with no Authorization Header" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="76a2af73-43bb-4162-bd51-f2a62b70ba81"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD007 [NEG] Invalid Access Token Requests for Authorization entry" searchProperties="true" id="5044094b-21e0-43a4-a52b-57b750402509"><con:settings/><con:testStep type="groovy" name="Extract information from authorization for (registration_access_token)" id="11eb201c-a104-4ced-87da-39e1c4ca7c5b"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id with incorrect access token (registration_access_token)");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
headers.put("Authorization","Bearer " + project.getPropertyValue("registration_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id with incorrect access token (registration_access_token)" id="8fb4af43-3913-4373-bd5f-d273b3315bcc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id with incorrect access token (registration_access_token)" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer 682f6064-a28b-42b8-b693-5bdbe8f06bce"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://api.londonhydro.com:8080/espi/1_1/resource/Authorization/1000000793</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization for (access_token)" id="ca528888-3f8a-4c7a-b98c-3ec9fceea411"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id with incorrect access token (access_token)");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id with incorrect access token (access_token)" id="cc4320f1-6ed3-41da-b814-83b78216d0a4"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id with incorrect access token (access_token)" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer de37fffe-94cd-4de3-a000-daea89a6ee45"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://api.londonhydro.com:8080/espi/1_1/resource/Authorization/1000000793</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization no Authorization Header" id="27cee341-fdf9-4be3-ab85-f953ef77b0ef"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def project = testRunner.testCase.testSuite.project
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Authorization by Id with no Authorization Header");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

//propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
//headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("authorizationURI"));
//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
//headers.put("Content-Type","Application/atom+xml");
//propTestStep.testRequest.setRequestHeaders(headers);
 </script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id with no Authorization Header" id="942b729f-e68b-4307-8199-f5cbbe65b2ac"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Authorization by Id with no Authorization Header" id="4c065077-eff3-4431-8201-a501b8acd7a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="Application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://api.londonhydro.com:8080/espi/1_1/resource/Authorization/1000000793</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10ded9d8-6ec9-476d-8438-75d0c7c8cdba"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD008 [NEG] Invalid Access Token Requests for Authorization feed" searchProperties="true" id="fc4e1a1e-23f2-49d1-84b6-b998cccc6910"><con:settings/><con:testStep type="restrequest" name="GET Authorization Feed with incorrect access token &quot;registration_access_token&quot;" id="c453ae38-b402-4dc4-b973-ad5b54ceca71"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed with incorrect access token &quot;registration_access_token&quot;" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="562409c6-b85e-4186-8765-2b740c0cbe39"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization Feed with incorrect access token &quot;access_token&quot;" id="6807bce6-d07e-4328-8e7b-1129d363971b"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed with incorrect access token &quot;access_token&quot;" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c647ddda-72ef-493a-851b-a4dc9d2a2fd6"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization Feed with no Authorization Header" id="9c19b127-5514-403f-a94e-ad817d777992"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed with no Authorization Header" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f540bf18-371d-4bda-9b2e-3f182e02d372"><con:configuration><codes>403,401</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD009 [NEG] Invalid Access Token Request (GET RESTful Batch/Subscription request contains registration_access_token)" searchProperties="true" id="8020eb7e-d5fb-40ec-978f-59f2c5f47890"><con:settings/><con:testStep type="groovy" name="Extract information from authorization for registration access token" id="f9949a14-d5a4-418f-bf01-b22e76731aaa"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid token - registration_access_token");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with invalid token - registration_access_token" id="64302161-7b7b-49c8-9320-9bae33ecafc3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with invalid token - registration_access_token" id="7e0ce768-b7c3-4761-89a3-3ef6c6b514bd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer 682f6064-a28b-42b8-b693-5bdbe8f06bce"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/espi/1_1/resource/Batch/Subscription/1000000755</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b7d6602d-3abf-4ef6-9551-432d1d99748b"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization for client access token" id="d3e738e6-6d5d-45a8-b70b-43cd6ccffadb"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid token - client_access_token");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with invalid token - client_access_token" id="4bce21b5-8060-49bf-9fd2-68f0841535f5"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with invalid token - client_access_token" id="0f6fd866-deee-40a4-abc0-8e5e03a7a6a6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer 62b91ef0-e8fc-42a6-8faf-db3f7fd4dd0f"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/espi/1_1/resource/Batch/Subscription/1000000755</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0da9db86-144d-43c6-bd69-73d6a296d0bf"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization no Authorization Header" id="01e55249-6a41-4f7f-8e01-28dffc074ac7"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI with invalid no Authorization Header");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

//headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("client_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with invalid no Authorization Header" id="dbdd1965-cde6-49ab-be48-7ec81adcad9e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with invalid no Authorization Header" id="41a41664-70df-4b61-9766-4a4985321b39" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="Application/atom+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:8086/espi/1_1/resource/Batch/Subscription/1000000755</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="43e11d14-daf7-4f80-8f97-d377a030b928"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD010 [NEG] Invalid Access Token Request (GET RESTful ReadServiceStatus request contain invalid access tokens)" searchProperties="true" id="bee7d54f-ea9c-4d3c-8718-5f5b084a37e8"><con:settings/><con:testStep type="restrequest" name="GET ServiceStatus with incorrect access token registration_access_token" id="80d9e496-df46-4a1a-9eb6-b629d2fde53e">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET ServiceStatus with incorrect access token registration_access_token" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="859581ec-35e0-499b-b44f-94d8e16a8fb1">
			<con:configuration><codes>403,401</codes></con:configuration>
		</con:assertion>
		
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="GET ServiceStatus with incorrect access token access_token" id="10a284d2-d003-4d79-9f2a-d62c1c3bb06c">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET ServiceStatus with incorrect access token access_token" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e4048da7-f9ed-4ec4-8b22-ce843e0edb7c">
			<con:configuration><codes>403,401</codes></con:configuration>
		</con:assertion>
		
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="GET ServiceStatus with no Authorization Header" id="bd3a5195-9303-49f2-b0cb-a959117b77c1">
		<con:settings/>
		<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:restRequest name="GET ServiceStatus with no Authorization Header" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="caf7f84c-e98e-42ea-9ed5-ecaaeaaae131">
			<con:configuration><codes>403,401</codes></con:configuration>
		</con:assertion>
		
		<con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest>
</con:config>
</con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD011 [NEG] Malformed Refresh Token Requests" searchProperties="true" id="258e39b3-1c62-44c9-a632-056619aaf9bb"><con:settings/><con:testStep type="groovy" name="Issue malformed refresh token requests" id="10b64d7e-05f8-466c-b63c-5dbe0497fd9c"><con:settings/><con:config><script><![CDATA[import java.net.*;
import java.io.*;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

int issueGET(String targetURL,String strToken){

	log.info("OAD011 [NEG] Malformed Refresh Token Request -- Issuing malformed GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();
		//log.info response.toString();
		
		log.info "Response = " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "Response = " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

String strScope = authCase.getPropertyValue("scope");
String strRefreshToken = authCase.getPropertyValue("refresh_token");
String strClientId= authCase.getPropertyValue("client_id");
String strClientSecret = authCase.getPropertyValue("client_secret");


if (strRefreshToken == null || strRefreshToken == "") {
	log.error("Failed 'Malformed Refresh Token Request: refresh_token is null or blank");
	testRunner.fail("Failed 'Malformed Refresh Token Request: refresh_token is null or blank");
	return;	
}

// Convert Authorization Token Endpoint to use stunnel proxy
String strAuthorizationServerTokenEndpoint = "";
URL aURL = new URL(authCase.getPropertyValue("authorizationServerTokenEndpoint"));

log.info("OAD011 [NEG] Malformed Refresh Token Request -- aURL: " + aURL);
log.info("OAD011 [NEG] Malformed Refresh Token Request -- aURL.getPort(): " + aURL.getPort());
log.info("OAD011 [NEG] Malformed Refresh Token Request -- strAuthorizationServerTokenEndpoint: " + "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath());
strAuthorizationServerTokenEndpoint = "http://" +  aURL.getHost() + ":" + authCase.getPropertyValue("proxyOutPort") + aURL.getPath();

log.info("OAD011 [NEG] Malformed Refresh Token Request -- strAuthorizationServerTokenEndpoint: " + strAuthorizationServerTokenEndpoint);
log.info("OAD011 [NEG] Malformed Refresh Token Request -- client_id: " + strClientId);
log.info("OAD011 [NEG] Malformed Refresh Token Request -- client_secret: " + strClientSecret);

String strAuthentication = strClientId + ":" + strClientSecret;

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("OAD011 [NEG] Malformed Refresh Token Request -- Original Authentication: " + strAuthentication);
log.info("OAD011 [NEG] Malformed Refresh Token Request -- Base 64 Encoded Authentication: " + strToken);

// Sample Refresh Token Request valid query parameter
//String strQryParams = "?grant_type=refresh_token" + "&refresho_token=" + strRefreshToken + "&scope=" + strScope;

int iTestID= 0;
while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "?grant_type=refresh_token" + "&refresh_token=" + strRefreshToken + "&scope=" + strScope;

	int iRespCode = 0;
	int iExpectedRespCode = 0;

	switch(iTestID) {
		case 0:
			strTestName = "Malformed Refresh Token Request (No grant_type= field-value pair)";
			strQryParams = "?refresh_token=" + strRefreshToken + "&scope=" + strScope;			
			iExpectedRespCode = 400;
			break;
		case 1:
			strTestName = "Malformed Refresh Token Request (No refresh_token= field-value pair)";
			strQryParams = "?grant_type=refresh_token" + "&scope=" + strScope;			
			iExpectedRespCode = 400;
			break;
		case 2:
			strTestName = "Invalid Refresh Token Request (Contents of scope= field-value pair does not match 'scope=' used in original access token request)";
			strQryParams = "?grant_type=refresh_token" + "&refresh_token=" + strRefreshToken + "&scope=Read/Write";			
			iExpectedRespCode = 400;
			break;
		default:
			break;
	}

	// 0 indicates skip test
	if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");		
		log.info("testing: " + strTestName);
		iRespCode = iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);
		
		if(iRespCode != iExpectedRespCode) {
			log.error("Failed malformed refresh token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			testRunner.fail("Failed malformed refresh token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			return;						
		}		
	} else {
		log.info("OAD011 [NEG] Malformed Refresh Token Request -- skipping: " + strTestName);
	}	

	iTestID++;
	if(iTestID > 2){
		break;
	}
}	



assert true;

]]></script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD012 [POS] Valid refresh_token request" searchProperties="true" id="e60657b4-22e3-4221-aa86-93692aa69ba0"><con:settings/><con:testStep type="groovy" name="Save old access token" id="ef09c087-5166-4b1c-b817-89500efee960"><con:settings/><con:config><script>
def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propCreateAuthResults.setPropertyValue("old_access_token",propCreateAuthResults.getPropertyValue("access_token"));</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer properties to Request" id="704afddc-45c5-492f-846f-31f341ccec58"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//String strAuthorizationServerTokenEndpoint = propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint");
URI uriAuthorizationServer = new URI(propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint"));

String strRefreshToken = propCreateAuthResults.getPropertyValue("refresh_token");
String strScope = propCreateAuthResults.getPropertyValue("scope");
String strQryParams = "?grant_type=refresh_token" + "&amp;refresh_token=" + strRefreshToken + "&amp;scope=" + strScope;

propTestStep = context.testCase.getTestStepByName("Issue Refresh Token Request");
def headers = new StringToStringMap();

propTestStep.setPropertyValue("Endpoint","http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path + strQryParams);

String strAuthentication = propCreateAuthResults.getPropertyValue("client_id") + ":" + propCreateAuthResults.getPropertyValue("client_secret");

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("Original Authentication: " + strAuthentication);
log.info("Base 64 Encoded Authentication: " + strToken);

headers.put("Authorization","Basic " + strToken);
headers.put("Accept","application/json, application/*+json");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="Issue Refresh Token Request" id="253a488e-7934-4164-8677-975540af745d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Issue Refresh Token Request" id="ac1c3c99-f244-4c0b-80f1-9a625c9dc566" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic dGhpcmRfcGFydHk6R2lndDJDYW9EeXJwVng3"/>
  &lt;con:entry key="Accept" value="application/json, application/*+json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://greenbutton.londonhydro.com:8082/oauth/token?grant_type=refresh_token&amp;refresh_token=5fe6eaa9-8970-40f8-b510-0116a2904dc2&amp;scope=FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe43d96e-8045-4ffa-b07c-0b6cf3bf04a2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="74425cd7-ff3f-4642-8f4d-c7905142c2a2"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.response.contentAsString;

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(response);

log.info("access_token = " + tokenResponse.access_token);
log.info("token_type = " + tokenResponse.token_type);
log.info("refresh_token = " + tokenResponse.refresh_token);
log.info("expires_in = " + tokenResponse.expires_in);
log.info("scope = " + tokenResponse.scope);
log.info("resourceURI = " + tokenResponse.resourceURI);
log.info("authorizationURI = " + tokenResponse.authorizationURI);

if(tokenResponse.access_token==null){
	assert false;
}

if(tokenResponse.token_type==null){
	assert false;
}

if(tokenResponse.refresh_token==null){
	assert false;
}

if(tokenResponse.expires_in==null){
	assert false;
}

if(tokenResponse.scope==null){
	assert false;
}

if(tokenResponse.resourceURI==null){
	assert false;
}

if(tokenResponse.authorizationURI==null){
	assert false;
}


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="extract and save authorization information" id="ab21f146-3e29-454c-97c1-6c2eefa613dd"><con:settings/><con:config><script>
import groovy.json.JsonSlurper;

def ResponseMessage = testRunner.testCase.testSteps["Issue Refresh Token Request"].testRequest.response.contentAsString;


def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(ResponseMessage);


def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];


log.info("OAD012 [POS] Valid refresh_token request -- access_token: " + tokenResponse.access_token);
log.info("OAD012 [POS] Valid refresh_token request -- token_type: " + tokenResponse.token_type);
log.info("OAD012 [POS] Valid refresh_token request -- refresh_token: " + tokenResponse.refresh_token);
log.info("OAD012 [POS] Valid refresh_token request -- expires_in: " + tokenResponse.expires_in);
log.info("OAD012 [POS] Valid refresh_token request -- scope: " + tokenResponse.scope);
log.info("OAD012 [POS] Valid refresh_token request -- resourceURI: " + tokenResponse.resourceURI);
log.info("OAD012 [POS] Valid refresh_token request -- authorizationURI: " + tokenResponse.authorizationURI);

propCreateAuthResults.setPropertyValue("access_token",tokenResponse.access_token);
propCreateAuthResults.setPropertyValue("token_type",tokenResponse.token_type);
propCreateAuthResults.setPropertyValue("refresh_token",tokenResponse.refresh_token);
propCreateAuthResults.setPropertyValue("expires_in",tokenResponse.expires_in.toString());
propCreateAuthResults.setPropertyValue("scope",tokenResponse.scope);
//propCreateAuthResults.setPropertyValue("resourceURI",tokenResponse.resourceURI);
//propCreateAuthResults.setPropertyValue("authorizationURI",tokenResponse.authorizationURI);

URI uriResource = new URI(tokenResponse.resourceURI);
URI uriAuthorization = new URI(tokenResponse.authorizationURI); 

//testRunner.testCase.setPropertyValue("resourceURI","http://" + uriResource.host + ":" + testRunner.testCase.getPropertyValue("proxyOutPort") + uriResource.path);
testRunner.testCase.setPropertyValue("resourceURI","http://" + uriResource?.getHost() + ":" + testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService").getPropertyValue("mockPort") + uriResource.path);
testRunner.testCase.setPropertyValue("authorizationURI","http://" + uriAuthorization?.getHost() + ":" + testRunner.testCase.getPropertyValue("proxyOutPort") + uriAuthorization.path);

</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>resourceURI</con:name><con:value>http://api.londonhydro.com:8086/espi/1_1/resource/Batch/Subscription/1000000755</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value>http://api.londonhydro.com:8080/espi/1_1/resource/Authorization/1000000793</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD013 [NEG][old A] Valid refresh_token request invalidates prior access_token" searchProperties="true" id="8f7446ee-4d9e-4180-96e8-39983c4af9a2"><con:description/><con:settings/><con:testStep type="groovy" name="Extract information from authorization" id="5eeb35b0-0665-4ff6-a2e5-45ae26823c38"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("old_access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="2cac3e39-0b75-4926-b1a4-87116796e51e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="906e45eb-c342-4057-b30a-6e9dee28e1e2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer null"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/espi/1_1/resource/Batch/Subscription/1000000755</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6858de9d-d648-4132-bb21-fd727a59a1e1"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()

testRunner.testCase.setPropertyValue("testsPerformed","");

def mapFBsTested = [:];
context.mapFBsTested = mapFBsTested;
</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>extracted_scope_sel_uri</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>testsPerformed</con:name><con:value/></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD014 [NEG] Malformed Client Credentials Grant Access Token Requests" searchProperties="true" id="6916a4cc-ec9a-4a66-96a3-922b787a6b72"><con:settings/><con:testStep type="groovy" name="Issue malformed client credentials access token requests" id="bd18e092-882d-4192-80dc-b99f6a4590bd"><con:settings/><con:config><script>import java.net.*;
import java.io.*;

int issueGET(String targetURL,String strToken){

	log.info("Issuing malformed GET " + targetURL);
	int iRespCode = 0;
	String urlParameters = "";
	
	URL url;
	
	HttpURLConnection connection = null;  
	
	try {
		//Create connection
		url = new URL(targetURL);
		connection = (HttpURLConnection)url.openConnection();
		connection.setRequestMethod("GET");
		connection.setInstanceFollowRedirects(false);
		connection.setRequestProperty("Authorization", "Basic " + strToken);
		connection.setRequestProperty("Accept", "application/json, application/*+json");
		
		//Get Response    
		InputStream is = connection.getInputStream();
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		String line;
		StringBuffer response = new StringBuffer(); 
		while((line = rd.readLine()) != null) {
			response.append(line);
			response.append('\r');
		}
		rd.close();
		//log.info response.toString();
		
		log.info "Response = " + connection.getResponseCode();

		iRespCode = connection.getResponseCode();
	
	} catch (Exception e) {
		log.info e.getMessage();
		return 0;
	} finally {
		if(connection != null) {
			log.info "Response = " + connection.getResponseCode();
			iRespCode = connection.getResponseCode();		
			connection.disconnect(); 
		}

		return iRespCode;
	}	
}

def project = testRunner.testCase.testSuite.project;

String strAuthorizationServerTokenEndpoint = testRunner.testCase.getPropertyValue("authorizationServerTokenEndpoint");
String strScope = testRunner.testCase.getPropertyValue("scope");

log.info ("authorizationServerTokenEndpoint: " + strAuthorizationServerTokenEndpoint);
log.info ("scope: " + strScope);

// Sample good Access Token Client Credentials Request query parameter
//String strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=34_35";

int iTestID= 0;
while(true) {
	// loop through different malformation tests
	String strTestName = "";
	String strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=34_35";
//	String strToken = "dGhpcmRfcGFydHk6c2VjcmV0";

// change to user client_access_token_client_id/secret
	String strAuthentication = project.getPropertyValue("client_id") + ":" + project.getPropertyValue("client_secret");

	// Encode byte array into Base 64
	String strToken = strAuthentication.bytes.encodeBase64().toString();

	log.info("Original Authentication: " + strAuthentication);
	log.info("Base 64 Encoded Authentication: " + strToken);
	 
	int iRespCode = 0;
	int iExpectedRespCode = 0;

	switch(iTestID) {
		case 0:
			strTestName = "Malformed Client Credentials Grant Access Token Request (No grant_type= field-value pair)";
			strQryParams = "?scope=FB=34_35";			
			iExpectedRespCode = 400;
			break;
		case 0:
			strTestName = "Malformed Client Credentials Grant Access Token Request (contents of scope= field-value pair does not match contents of Application Information structure 'scope' field)";
			strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=read/write";			
			iExpectedRespCode = 400;
			break;
		default:
			break;
	}

	// 0 indicates skip test
	if(iExpectedRespCode != 0) {
		log.info("==================================================================================================================");		
		log.info("testing: " + strTestName);
		iRespCode = iRespCode = issueGET(strAuthorizationServerTokenEndpoint + strQryParams,strToken);
		
		if(iRespCode != iExpectedRespCode) {
			log.error("Failed malformed client credential grant access token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			testRunner.fail("Failed malformed client credential grant access token request: " + strTestName + " expected response code:" + iExpectedRespCode + " but received:" + iRespCode);
			return;						
		}		
	} else {
		log.info("skipping: " + strTestName);
	}	

	iTestID++;
	if(iTestID > 1){
		break;
	}
}	



assert true;

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET ApplicationInformation and verify grant_types" id="ff4a5925-ba44-4aba-a162-4af0d3281cbf"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation and verify grant_types" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="78acb532-523c-45f9-853b-a88a286b8919"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema validation" id="488b7ada-04f2-43bd-9413-3d566e13534b"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="ApplicationInformation must contains fields" id="f62f6af4-6d66-47a4-982c-9ebbb8eaec89"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianId and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianApplicationStatus and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyNotifyUri and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerAuthorizationEndpoint and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:authorizationServerTokenEndpoint and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianBulkRequestURI and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianResourceEndpoint and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyScopeSelectionScreenURI and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:thirdPartyUserPortalScreenURI and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_secret and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_name and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_uri and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_id and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:software_id and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:software_version and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_id_issued_at and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:client_secret_expires_at and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:token_endpoint_auth_method and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:scope,grant_types and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:response_types and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:registration_client_uri and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:registration_access_token and
/ns3:entry/ns3:content/espi:ApplicationInformation/espi:dataCustodianScopeSelectionScreen</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="grant_types must contain a value of client_credentials" id="4a5fab15-c9c0-4207-ae96-f65e79ca68ce"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
(/ns3:entry/ns3:content/espi:ApplicationInformation/espi:grant_types='client_credentials')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>grant_types</con:name><con:value>refresh_token</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD015 [POS] Validate JSON structure returned for Client_Credentials Grant Access Token Request" searchProperties="true" id="ad787070-cbaa-4c60-892f-f7a8cfd6394c"><con:settings/><con:testStep type="groovy" name="Transfer authorization properties" id="b797eb13-e4a4-4539-b554-fcff7fe8bed5"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

//String strAuthorizationServerTokenEndpoint = propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint");
URI uriAuthorizationServer = new URI(propCreateAuthResults.getPropertyValue("authorizationServerTokenEndpoint"));
//String strScope = propCreateAuthResults.getPropertyValue("scope");
//String strQryParams = "?grant_type=client_credentials" + "&amp;scope=FB=34_35";

String strQryParams = "?grant_type=client_credentials" + "&amp;FB=4_5_15;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13"

propTestStep = context.testCase.getTestStepByName("Issue Client_Credentials Token Request");
def headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",strAuthorizationServerTokenEndpoint + strQryParams);
propTestStep.setPropertyValue("Endpoint","http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path + strQryParams);


String strAuthentication = propCreateAuthResults.getPropertyValue("client_id") + "_admin:" + propCreateAuthResults.getPropertyValue("client_secret");
//String strAuthentication = propCreateAuthResults.getPropertyValue("client_access_token_client_id") + ":" + propCreateAuthResults.getPropertyValue("client_access_token_secret");

// Encode byte array into Base 64
String strToken = strAuthentication.bytes.encodeBase64().toString();

log.info("Original Authentication: " + strAuthentication);
log.info("Base 64 Encoded Authentication: " + strToken);

log.info("AuthorizationServerTokenEndpoing: " + "http://" + uriAuthorizationServer.host + ":" + testRunner.testCase.testSuite.project.getPropertyValue("proxyOutPort1") + uriAuthorizationServer.path);
log.info("Query Parameters: " + strQryParams);

headers.put("Authorization","Basic " + strToken);
headers.put("Accept","application/json, application/*+json");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="Issue Client_Credentials Token Request" id="d6aad63e-502b-4bde-8872-4dc8d43e741e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Issue Client_Credentials Token Request" id="ac1c3c99-f244-4c0b-80f1-9a625c9dc566" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic dGhpcmRfcGFydHlfYWRtaW46R2lndDJDYW9EeXJwVng3"/>
  &lt;con:entry key="Accept" value="application/json, application/*+json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://greenbutton.londonhydro.com:8082/oauth/token?grant_type=client_credentials&amp;FB=4_5_15;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe43d96e-8045-4ffa-b07c-0b6cf3bf04a2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="74425cd7-ff3f-4642-8f4d-c7905142c2a2"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.response.contentAsString;

def slurper = new JsonSlurper();
def tokenResponse = slurper.parseText(response);

log.info("access_token = " + tokenResponse.access_token);
log.info("token_type = " + tokenResponse.token_type);
log.info("refresh_token = " + tokenResponse.refresh_token);
log.info("expires_in = " + tokenResponse.expires_in);
log.info("scope = " + tokenResponse.scope);
log.info("resourceURI = " + tokenResponse.resourceURI);
log.info("authorizationURI = " + tokenResponse.authorizationURI);

if(tokenResponse.access_token == null){
	assert false;
}

if(tokenResponse.token_type == null){
	assert false;
}

if(tokenResponse.refresh_token != null){
	assert false;
}

if(tokenResponse.expires_in == null){
	assert false;
}

if(tokenResponse.scope == null){
	assert false;
}

if(tokenResponse.resourceURI == null){
	assert false;
}

if(tokenResponse.authorizationURI == null){
	assert false;
}


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>scope</con:name><con:value>FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired)" searchProperties="true" id="34d35217-388f-4627-87c4-3348dba51a04"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="197ccf1c-ea53-4f2d-83e2-96ff8a43a304"><con:settings/><con:config><script>log.info("[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired): Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_14] Authorization and Authentication w/ Pre-Negotiated Scope -- OAD016 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Ask User To expire Authorization" id="5b36d068-781e-4b08-81e3-7a3f3e872b59"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;

def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
//String strDialog = "If the previously created authorization has been set to expire please wait for the expiration period before continuing.\r\n\
strMessage = strMessage + "If the previously created authorization has been set to expire please wait for the expiration period before continuing.\r\n\
Otherwise please instruct the test applicant to cause the authorization to expire now and continue testing after this has been performed.\r\n\
\r\n\
If you do not wish to proceed click No.\r\n\
To proceed click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("[FB_14] Authorization and Authentication (OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired) Testing terminated by user.");
	testRunner.fail("[FB_14] Authorization and Authentication (OAD016 [NEG] Invalid Access Token Request (Access Token contained in the Authorization Header has expired) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization for access_token" id="1e3c57ef-6f77-41c0-8692-1b1d168e68f1"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def authResourceURI;
def genericGetMockServerURI;
def headers = new StringToStringMap();
def project = testRunner.testCase.testSuite.project
def propCreateAuthResults = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def resourceURI;

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
service = testRunner.testCase.testSuite.project.getRestMockServiceByName("GenericGetService");
genericGetServiceMockPort = service.getPropertyValue("mockPort");

// Convert URL to proxy version
public String GetProxiedUrl(String uri, String proxy)
{
	def project = testRunner.testCase.testSuite.project;
	URL aURL = new URL(uri);
	String urlproxy="";

	// check for valid url -- at least protocol and host
	if ( (aURL.getProtocol() == null) || (aURL.getHost()==null ))
	{
		testRunner.fail("unparsable url: "+ uri);	
	}
	else
	{
		//String proxyOutPort = project.getPropertyValue("proxyOutPort");
		log.info "Port = " + aURL.getPort();
		if (aURL.getQuery() != null) {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath() + "?"+ aURL.getQuery();
		}
		else {
			urlproxy = "http://" +  "localhost" + ":"+proxy + aURL.getPath();
		}
		log.info "Converted = " + urlproxy;
	}

	return urlproxy;
}

/////////////////////////////////////////////////////////
//
// 	Main Script
//
/////////////////////////////////////////////////////////

// Convert Resource URI to use GenericGetMockServer proxy
resourceURI = propCreateAuthResults.getPropertyValue("resourceURI");
log.info("Data Custodian Resource URI: " + resourceURI);
tempResourceURI = resourceURI;
i = tempResourceURI.indexOf("espi/1_1/resource");
if (i>0) {
	// Strip off everything up to the resource
	tempResourceURI = tempResourceURI.substring(0,i-1);
	log.info("Data Custodian Service Endpoint: " + tempResourceURI);

	genericGetMockServerURI = GetProxiedUrl(tempResourceURI, genericGetServiceMockPort);
//	project.setPropertyValue("ServiceEndpoint",tempResourceURI);
	log.info("genericGetMockServerURI: " + genericGetMockServerURI);

	tempResourceURI = resourceURI;
	authResourceURI = tempResourceURI.substring(tempResourceURI.indexOf("espi/1_1/resource"), tempResourceURI.length());
//	project.setPropertyValue("resourceUri",tempResourceURI);
	log.info("authResourceURI: " + authResourceURI);	
	
} else {
	// Resource URI is improperly formed
	log.error("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
	testRunner.fail("Data Custodian Authorization Resource URI is improperly formed: " + resourceURI);
}

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
propTestStep.setPropertyValue("Endpoint",genericGetMockServerURI + "/" + authResourceURI);
log.info("TestStep Endpoint: " + propTestStep.getPropertyValue("Endpoint"));

headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="a75719c5-da1e-4b00-8914-e18d40cdcd51"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="91e703ef-4710-480e-bfad-da8a2bc3cf6a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer aa220cd8-5c0e-42b4-8373-90ca8e11ff9f"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:8086/espi/1_1/resource/Batch/Subscription/1000000755</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="797c5efb-fa4e-482e-b8ea-e9dc2e9e94f4"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property></con:properties></con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite>
<con:testSuite id="97b5e042-e911-49da-870e-961c2e88d4c6" name="[FUTURE]*[FB_32] Resource Level REST"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="77078e96-26d2-4f47-aa20-b3c7607b6d05" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_32] Resource Level REST" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FUTURE]*[FB_33] Management REST Services" id="4f33442c-daf6-4730-bcbc-8c5c5f134962">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_33] Management REST Services" searchProperties="true" id="cc324d40-14aa-43de-b544-f43d12e6d022">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="962f783c-467f-46bb-b54c-e4c5616ca99a"><con:settings/><con:config><script>log.info("[FB_33] Management Interface -- XXXnnn {Title}: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_33] Management Interface -- XXXnnn");</script></con:config></con:testStep>
		<con:testStep type="groovy" name="Feature: DC Admin Access" id="fb282fdd-4dca-4228-b853-b0db7a3b1642">
			<con:settings/>
			<con:config>
				<script>//******************************************************************************************************************
					//******************************************************************************************************************
					log.info("Feature: DC Admin Access");
					//******************************************************************************************************************
					//******************************************************************************************************************
				</script>
			</con:config>
		</con:testStep><con:properties/>
	</con:testCase>
	<con:properties/>
</con:testSuite>
<con:testSuite name="[FB_34] SFTP for Bulk" id="403ba35c-d11c-4173-bf0f-2eaaf4d73b93">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SFTP001 [POS] SFTP for BULK notification" searchProperties="true" id="da90c8ed-9f6c-48c8-980a-60508be6c8f0">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="806a6e60-7b4f-4000-8353-f356585facff"><con:settings/><con:config><script>log.info("[FB_34] SFTP for Bulk -- SFTP001 [POS] SFTP for BULK notification: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_34] SFTP for Bulk -- SFTP001 [POS]");</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization Feed" id="c7193edc-62be-442b-a071-6e0a014805d3"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="495a6224-bce0-415a-9c51-37232d811861"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="16a03f52-958d-42e3-9827-9a88349df910"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_34] SFTP for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_34] SFTP for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();

context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to Issue a Notification message with Batch/Bulk information" id="7ae2146f-5145-4803-a2b1-287eb7867a94"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"

//String strDialog = "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("SFTP001 [POS] SFTP for BULK notification (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="3bf4597e-4be1-41d2-b9da-25226da0afd4"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification" id="53db505d-7657-4c7e-8205-3361a765ff45"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("SFTP001 [POS] SFTP for BULK notification -- notification Body: " + strNotificationBody);

if(!strNotificationBody) {
	log.error("SFTP001 [POS] SFTP for BULK notification -- No notification received or empty notification body.");
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification -- No notification received or empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("SFTP001 [POS] SFTP for BULK notification -- Invalid notification body:" + e.toString());
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification -- Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("SFTP001 [POS] SFTP for BULK notification -- notification URI: " + strNotificationURI);

if(!strNotificationURI) {
	log.error("SFTP001 [POS] SFTP for BULK notification -- Invalid URI supplied in the notification.");
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification -- Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")){
	
//	String strHost = strNotificationURI.substring("http://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//	context.strResource = strResource;
	log.error("SFTP001 [POS] SFTP for BULK notification -- Notification must be an SFTP resource.");
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification -- Notification must be an SFTP resource.");
	return;
	
} else if(strNotificationURI.startsWith("https://")){

//	String strHost = strNotificationURI.substring("https://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//	context.strResource = strResource;
	log.error("SFTP001 [POS] SFTP for BULK notification -- Notification must be an SFTP resource.");
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification -- Notification must be an SFTP resource.");
	return;
	
} else if(strNotificationURI.startsWith("sftp://")){
	
	String strHost = strNotificationURI.substring("sftp://".length());
	String strResource = strHost.substring(strHost.indexOf("/"));
	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
	strHost = strHost.substring("sftp://".length());
	context.strHost = strHost;
	context.strResource = strResource;
		
} else {
	log.error("SFTP001 [POS] SFTP for BULK notification -- Invalid URI supplied in the notification.");
	testRunner.fail("SFTP001 [POS] SFTP for BULK notification -- Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue SFTP get" id="10879b9c-15de-4e61-9514-f81f1437274d"><con:settings/><con:config><script>import groovy.io.FileType;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

public boolean RunCommand(String cmd)
{
	def doCmd;

	log.info("exec: " + cmd);
	log.info("os  : " + System.properties['os.name']);
	
	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute();
	} else {
		doCmd = ["bash", "-c",cmd].execute();
	}
	
	doCmd.waitFor();
	
	if(doCmd.exitValue()!=0) {
		
		log.error "return code: ${ doCmd.exitValue()}"
		log.error "stderr: ${doCmd.err.text}"
		log.error "stdout: ${doCmd.in.text}"
	
		return false;
	}
	return true;
}

transferDir = groovyUtils.projectPath + "/../transferred";

def list = []
def dir = new File(transferDir);
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

if(list.size()>0){
	
	cmdRm = 'rm ' + transferDir +  '/*';
	
	if(RunCommand(cmdRm) != true) {
		log.error("could not clear transfer directory");
		testRunner.fail("could not clear transfer directory");
		return;
	} 
}

cmdGet = 'sftp ' + context.strHost + ':' + context.strResource + ' ' + transferDir;

if(RunCommand(cmdGet) != true) {
	log.error("could not issue sftp get");
	testRunner.fail("could not issue sftp get");
	return;
}

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate retrieved files against schema" id="e0e394b8-8b5f-4a0e-a470-96154dee176c"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");

def list = []
def dir = new File(groovyUtils.projectPath + "/../transferred")
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

boolean bFailed = false;
list.each {
	log.info "Validating:" + it.path;

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(new File(it.path).text);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body: " + e.toString());
		bFailed = true;
	}

	holder.declareNamespace( 'espi', 'http://naesb.org/espi');
	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body. Cannot query response: " +  e.toString());
		bFailed = true;
	}

	if(strCount.toInteger()!=1){
		log.error("Response does not contain one feed.");
		bFailed = true;
	}
	
	strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:entry)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body. Cannot query response: " +  e.toString());
		bFailed = true;
	}

	if(strCount.toInteger()&lt;1){
		log.error("Response does not contain at least one entry.");
		bFailed = true;
	}
	
	Source instanceDocument = new StreamSource(new FileReader(it.path));
	
	SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
	Schema s = sf.newSchema(schemaDocuments);
	Validator v = s.newValidator();

	try {
		v.validate(instanceDocument);
	} catch(org.xml.sax.SAXParseException e) {
		log.error e.toString();
		bFailed = true;
	}
}

if(bFailed) {
	testRunner.fail("One or more response files failed validation. See script log for details.");
}

return;
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate data received" id="1c9b6270-ee04-4b12-b1c5-254e33be23eb"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
import com.eviware.soapui.support.XmlHolder;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)


def Authorizations;
try{
	Authorizations = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["GET Authorization Feed"].testRequest.response.responseContent);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("could not obtain Authorizations XML " + e.toString());
	testRunner.fail("One or more response files failed validation. See script log for details.");
	return;
}

Authorizations.declareNamespace( 'espi', 'http://naesb.org/espi');
Authorizations.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

def nodesAuthResource = Authorizations.getDomNodes("//atom:entry");


def list = []
def dir = new File(groovyUtils.projectPath + "/../transferred")
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

int iEntryCnt = 0;
boolean bFailed = false;
list.each {
	log.info "Validating:" + it.path;

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(new File(it.path).text);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body: " + e.toString());
		bFailed = true;
	}

	holder.declareNamespace( 'espi', 'http://naesb.org/espi');
	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:entry)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body. Cannot query response: " +  e.toString());
		bFailed = true;
	}

	//loop through each entry
	boolean bFailedAuthCheck = false;
	def entryNodes = holder.getDomNodes("//atom:entry");
	for(entryNode in entryNodes) {
		iEntryCnt++;
		def nodeHolder = new XmlHolder(entryNode);
		nodeHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
		nodeHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');
		
		if(nodeHolder.getDomNodes("//atom:content/espi:ReadingType").length>0) {
			log.info("Skipping ReadingType entry");
		} else if(nodeHolder.getDomNodes("//atom:content/espi:LocalTimeParameters").length>0) {
			log.info("Skipping LocalTimeParameters entry");
		} else if(nodeHolder.getDomNodes("//atom:content/espi:Authorization").length>0) {
			log.info("processing entry:"+ nodeHolder.getDomNode("//atom:content/*").getNodeName());
			String strEntrySelfLink = nodeHolder.getDomNode("//atom:link[@rel='self']/@href").getNodeValue();

			boolean bMatchFound = false;
			for(nodeAuthResource in nodesAuthResource){
				
				def nodeAuthHolder = new XmlHolder(nodeAuthResource);
				nodeAuthHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
				nodeAuthHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

				String strAuthURI =  nodeAuthHolder.getDomNode("//espi:authorizationURI").getFirstChild().getNodeValue();
				if(strEntrySelfLink.equals(strAuthURI)) {
					bMatchFound = true;
					break;
				}
			}

			if(!bMatchFound){
				log.error("No matching authorization for: " + strEntrySelfLink);
				bFailedAuthCheck = true;
			}
			
		} else if(nodeHolder.getDomNodes("//atom:content/espi:ApplicationInformation").length>0) {
			log.info("processing entry:"+ nodeHolder.getDomNode("//atom:content/*").getNodeName());
			String strEntrySelfLink = nodeHolder.getDomNode("//atom:link[@rel='self']/@href").getNodeValue();

			String strAppInfoURI = testRunner.testCase.testSuite.project.getPropertyValue("ServiceEndpoint") + "/" + testRunner.testCase.testSuite.project.getPropertyValue("resourceUri") + "/ApplicationInformation/" + testRunner.testCase.testSuite.project.getPropertyValue("applicationInformationId");
			if(!strEntrySelfLink.equals(strAppInfoURI)){
				log.error("Self link does not match AppplicationInformation URI. Self link=" + strEntrySelfLink);
				bFailed = true;
			}
			
		} else {
			log.info("processing entry:"+ nodeHolder.getDomNode("//atom:content/*").getNodeName());
			String strEntrySelfLink = nodeHolder.getDomNode("//atom:link[@rel='self']/@href").getNodeValue();

			boolean bMatchFound = false;
			for(nodeAuthResource in nodesAuthResource){
				
				def nodeAuthHolder = new XmlHolder(nodeAuthResource);
				nodeAuthHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
				nodeAuthHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

				String strAuthResourceURI =  nodeAuthHolder.getDomNode("//espi:resourceURI").getFirstChild().getNodeValue();
				strAuthResourceURI = strAuthResourceURI.replace("/Batch","");
				if(strEntrySelfLink.startsWith(strAuthResourceURI)) {
					bMatchFound = true;
					break;
				}
			}

			if(!bMatchFound){
				log.error("No matching authorization for: " + strEntrySelfLink);
				bFailedAuthCheck = true;
			}
		}
	}

	if(bFailedAuthCheck) { 
		bFailed = true;
		log.error("The list of authorizations follows:");
		for(nodeAuthResource in nodesAuthResource){
			
			def nodeAuthHolder = new XmlHolder(nodeAuthResource);
			nodeAuthHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
			nodeAuthHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');
		
			String strAuthResourceURI =  nodeAuthHolder.getDomNode("//espi:resourceURI").getFirstChild().getNodeValue();
			log.error("check Auth ResURI:" + strAuthResourceURI);
		}
	}
}

if(bFailed) {
	testRunner.fail("One or more response files failed validation. See script log for details.");
}

if(iEntryCnt==0) {
	testRunner.fail("Batch/bulk feed must contain at least one entry but the response contains none.");
}

return;
</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite>
<con:testSuite name="[FB_35] REST for Bulk" id="902b2534-ffb3-4f52-ad3b-e15e9874bd3d">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RBK001 [POS] REST for BULK notification - authorized GET access" searchProperties="true" id="cc94e3e8-ec2d-4d2b-b464-92c12ef24449">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="60b2315f-4ede-4f1d-8eba-2b2451abcf5e"><con:settings/><con:config><script>log.info("[FB_35] REST for Bulk -- RBK001 [POS] REST for BULK notification -- authorized GET access: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_35] REST for Bulk -- RBK001 [POS]");</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization Feed" id="dc9b4f80-c933-472e-9573-db6b6bc60403"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		<con:setting id="AutoInferSchemas">false</con:setting></con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8cde049e-bd0a-426b-babc-096f57cfb98e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="ccbed0cd-1972-46cc-b566-ee56a141bb4e"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_34] SFTP for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_34] SFTP for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to Issue a Notification message with Batch/Bulk information" id="d49f682e-b375-44c1-aed9-91d8a59558c9"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"

//String strDialog = "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="05af9309-ea0c-45a6-8fd2-ca30afe7e725"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification" id="b434360f-a30a-4f31-ba44-5d61211fe1e9"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) notification Body: " + strNotificationBody);

if(!strNotificationBody) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) No notification received or empty notification body.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) No notification received or empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) Invalid notification body: " + e.toString());
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) notification URI: " + strNotificationURI);

if(!strNotificationURI) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) Invalid URI supplied in the notification.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")){
	
//	String strHost = strNotificationURI.substring("http://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//	context.strResource = strResource;
//	testRunner.gotoStepByName("Issue GET");

	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) notification must be for a Secured REST resource.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) notification must be for a Secured REST resource.");	
	return;	
	
} else if(strNotificationURI.startsWith("https://")){

	String strHost = strNotificationURI.substring("https://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//	context.strResource = strResource;
     context.strResource = strNotificationURI.substring("https://".length()).substring(strHost.indexOf("/"));
     context.strHost = project.getPropertyValue("ServiceEndpoint");

     propTestStep = context.testCase.getTestStepByName("GET Bulk by Id");
	propTestStep.setPropertyValue("Endpoint",context.strHost + context.strResource);

	def headers = new StringToStringMap();
	headers.put("Content-Type","Application/atom+xml");
	String access_token = project.getPropertyValue("client_access_token");
	
	headers.put("Authorization","Bearer " + access_token);
	propTestStep.testRequest.setRequestHeaders(headers);

	log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) GET Request Body: " + context.strHost + context.strResource);

	testRunner.gotoStepByName("GET Bulk by Id");
	
} else if(strNotificationURI.startsWith("sftp://")){

//	String strHost = strNotificationURI.substring("sftp://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	strHost = strHost.substring("sftp://".length());
//	context.strHost = strHost;
//	context.strResource = strResource;
	
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) notification must be for a REST resource.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) notification must be for a REST resource.");	
	return;	

	
} else {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) Invalid URI supplied in the notification.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate notification) Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue GET" id="4b1064b1-2de9-4cfd-8139-7ea0d0dc9dad" disabled="true"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doGET(String strBaseEndpoint,String href, String token) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		http.request( strBaseEndpoint, GET, TEXT ) { req ->
			uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				_strResponseBody = reader.text;				
			}		
										
			response.failure = { resp ->
				log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Issue GET) GET Failed: " + resp.statusLine);
				return null;
			}  
		}
		return _strResponseBody;
	}	
}

String access_token = testRunner.testCase.testSuite.project.getPropertyValue("client_access_token");

ResourceTester resourceTester = new ResourceTester(log);

String strGetResponseBody = resourceTester.doGET(context.strHost,context.strResource,access_token);

if(strGetResponseBody==null) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Issue GET) GET request failed.");
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Issue GET) GET request failed.");
	return;	
}

context.ResponseBody = strGetResponseBody;

return;
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Bulk by Id" id="fcf3235c-9934-456d-8940-103341518eaf"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="bb29b3ce-929d-49b4-8b68-d807dc96bdac" name="GET Bulk by Id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Bulk/S_119506</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Validate response against schema" id="9ee75394-446f-4e01-a4fa-535d94ebbf15"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

propTestStep = testRunner.testCase.testSteps["GET Bulk by Id"];
context.ResponseBody = propTestStep.testRequest.response.responseContent;

log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate response against schema) validating: " + context.ResponseBody);

def holder;
try{
	holder = groovyUtils.getXmlHolder(context.ResponseBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate response against schema) Invalid response body: " + e.toString());
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate response against schema) Invalid response body.");
	return;
}


StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");
Source instanceDocument = new StreamSource(new StringReader(context.ResponseBody));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try {
	v.validate(instanceDocument);
} catch(org.xml.sax.SAXParseException e) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate response against schema) Response failed schema validation: " + e.toString());
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate response against schema) Response failed schema validation. See script log for details.");
	return;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate received data" id="7e0363bc-cc80-474a-86bc-040ad2040226"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
import com.eviware.soapui.support.XmlHolder;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)


def Authorizations;
try{
	Authorizations = groovyUtils.getXmlHolder(testRunner.testCase.testSteps["GET Authorization Feed"].testRequest.response.responseContent);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Could not obtain Authorizations XML " + e.toString());
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) One or more response files failed validation. See script log for details.");
	return;
}

Authorizations.declareNamespace( 'espi', 'http://naesb.org/espi');
Authorizations.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

def nodesAuthResource = Authorizations.getDomNodes("//atom:entry");


log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Validating data: " + context.ResponseBody);

boolean bFailed = false;

def holder;
try{
	holder = groovyUtils.getXmlHolder(context.ResponseBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Invalid response body: " + e.toString());
	bFailed = true;
}

holder.declareNamespace( 'espi', 'http://naesb.org/espi');
holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

String strCount = "0";
try{
	strCount = holder.getNodeValue("count(//atom:entry)")
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Invalid response body. Cannot query response: " +  e.toString());
	bFailed = true;
}

//loop through each entry
boolean bFailedAuthCheck = false;
int iEntryCnt = 0;
def entryNodes = holder.getDomNodes("//atom:entry");
for(entryNode in entryNodes) {
	iEntryCnt++;
	def nodeHolder = new XmlHolder(entryNode);
	nodeHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
	nodeHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');
	
	if(nodeHolder.getDomNodes("//atom:content/espi:ReadingType").length>0) {
		log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Skipping ReadingType entry");
	} else if(nodeHolder.getDomNodes("//atom:content/espi:LocalTimeParameters").length>0) {
		log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Skipping LocalTimeParameters entry");
	} else if(nodeHolder.getDomNodes("//atom:content/espi:Authorization").length>0) {
		log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Processing entry:"+ nodeHolder.getDomNode("//atom:content/*").getNodeName());
		String strEntrySelfLink = nodeHolder.getDomNode("//atom:link[@rel='self']/@href").getNodeValue();

		boolean bMatchFound = false;
		for(nodeAuthResource in nodesAuthResource){
			
			def nodeAuthHolder = new XmlHolder(nodeAuthResource);
			nodeAuthHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
			nodeAuthHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

			String strAuthURI =  nodeAuthHolder.getDomNode("//espi:authorizationURI").getFirstChild().getNodeValue();
			if(strEntrySelfLink.equals(strAuthURI)) {
				bMatchFound = true;
				break;
			}
		}

		if(!bMatchFound){
			log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) No matching authorization for: " + strEntrySelfLink);
			bFailedAuthCheck = true;
		}
		
	} else if(nodeHolder.getDomNodes("//atom:content/espi:ApplicationInformation").length>0) {
		log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Processing entry:"+ nodeHolder.getDomNode("//atom:content/*").getNodeName());
		String strEntrySelfLink = nodeHolder.getDomNode("//atom:link[@rel='self']/@href").getNodeValue();

		String strAppInfoURI = testRunner.testCase.testSuite.project.getPropertyValue("ServiceEndpoint") + "/" + testRunner.testCase.testSuite.project.getPropertyValue("resourceUri") + "/ApplicationInformation/" + testRunner.testCase.testSuite.project.getPropertyValue("applicationInformationId");
		if(!strEntrySelfLink.equals(strAppInfoURI)){
			log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Self link does not match AppplicationInformation URI. Self link=" + strEntrySelfLink);
			bFailed = true;
		}
		
	} else {
		log.info("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Processing entry:"+ nodeHolder.getDomNode("//atom:content/*").getNodeName());
		String strEntrySelfLink = nodeHolder.getDomNode("//atom:link[@rel='self']/@href").getNodeValue();

		boolean bMatchFound = false;
		for(nodeAuthResource in nodesAuthResource){
			
			def nodeAuthHolder = new XmlHolder(nodeAuthResource);
			nodeAuthHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
			nodeAuthHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

			String strAuthResourceURI =  nodeAuthHolder.getDomNode("//espi:resourceURI").getFirstChild().getNodeValue();
			strAuthResourceURI = strAuthResourceURI.replace("/Batch","");
			if(strEntrySelfLink.startsWith(strAuthResourceURI)) {
				bMatchFound = true;
				break;
			}
		}

		if(!bMatchFound){
			log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) No matching authorization for: " + strEntrySelfLink);
			bFailedAuthCheck = true;
		}
	}
}

if(bFailedAuthCheck) { 
	bFailed = true;
	log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) The list of authorizations follows:");
	for(nodeAuthResource in nodesAuthResource){
		
		def nodeAuthHolder = new XmlHolder(nodeAuthResource);
		nodeAuthHolder.declareNamespace( 'espi', 'http://naesb.org/espi');
		nodeAuthHolder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');
	
		String strAuthResourceURI =  nodeAuthHolder.getDomNode("//espi:resourceURI").getFirstChild().getNodeValue();
		log.error("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Check Auth ResURI:" + strAuthResourceURI);
	}
}

if(bFailed) {
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) One or more response files failed validation. See script log for details.");
}

if(iEntryCnt==0) {
	testRunner.fail("RBK001 [POS] REST for BULK notification - authorized GET access (Validate received data) Batch/bulk feed must contain at least one entry but the response contains none.");
}

return;
</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RBK002 [NEG] REST for BULK notification - GET w/ access_token" searchProperties="true" id="09ac5da0-e425-4e64-b809-a0683d860747">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="7417b24b-7d24-45e7-ad62-50eb8433b330"><con:settings/><con:config><script>log.info("[FB_35] REST for Bulk -- RBK002 [NEG] REST for BULK notification -- GET w/ access_token: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_35] REST for Bulk -- RBK002 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="018a6afb-5ce4-4501-8eab-5a7fdfdbbe09"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_35] REST for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_35] REST for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to Issue a Notification message with Batch/Bulk information" id="1843d72d-adc4-42fc-ad36-31258f1881b1"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
//String strDialog = "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="98839fcf-70e0-43d0-9205-01640cdb83eb"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification" id="30404ab7-cc97-47e3-9bdb-45b1ddc9ad8c"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) notification Body: " + strNotificationBody);

if(!strNotificationBody) {
	log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) No notification received or empty notification body.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) No notification received or empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Invalid notification body: " + e.toString());
	testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Notification URI: " + strNotificationURI);

if(!strNotificationURI) {
	log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Invalid URI supplied in the notification.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")){
	
//	String strHost = strNotificationURI.substring("http://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//	context.strResource = strResource;
//	testRunner.gotoStepByName("Issue GET");

     log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) notification must be for a Secured REST resource.");
     testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) notification must be for a Secured REST resource.");
     return;
	
} else if(strNotificationURI.startsWith("https://")){

	String strHost = strNotificationURI.substring("https://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//   context.strHost = project.getPropertyValue("ServiceEndpoint");
//	context.strResource = strResource;
     context.strResource = strNotificationURI.substring("https://".length()).substring(strHost.indexOf("/"));
     context.strHost = project.getPropertyValue("ServiceEndpoint");

     propTestStep = context.testCase.getTestStepByName("GET Bulk by Id");
	propTestStep.setPropertyValue("Endpoint",context.strHost + context.strResource);

	def headers = new StringToStringMap();
	headers.put("Content-Type","Application/atom+xml");
	String access_token = project.getPropertyValue("access_token");
	
	headers.put("Authorization","Bearer " + access_token);
	propTestStep.testRequest.setRequestHeaders(headers);

	log.info("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) GET Request Body: " + context.strHost + context.strResource);

	testRunner.gotoStepByName("Init Loop");
	
} else if(strNotificationURI.startsWith("sftp://")){

//	String strHost = strNotificationURI.substring("sftp://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	strHost = strHost.substring("sftp://".length());
//	context.strHost = strHost;
//	context.strResource = strResource;
	
	log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Notification must be for a REST resource.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Notification must be for a REST resource.");	
	return;	
	
	
} else {
	log.error("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Invalid URI supplied in the notification.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - GET w/ access_token (Validate notification) Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue GET" id="1d7ae045-0c64-4b1a-a73e-c58beecc19d2" disabled="true"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT

public class ResourceTester {
	Object log;
	int iResp = 0;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public int doGET(String strBaseEndpoint,String href, String token) {

	  	def http = new HTTPBuilder();

		http.request( strBaseEndpoint, GET, TEXT ) { req ->
			uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				iResp = resp.status;
			}		
										
			response.failure = { resp ->
				iResp = resp.status;
			}  
		}
		return iResp;
	}	
}

String access_token = "";
int iResp = 0;

ResourceTester resourceTester = new ResourceTester(log);

access_token = testRunner.testCase.testSuite.project.getPropertyValue("access_token");
iResp = resourceTester.doGET(context.strHost,context.strResource,access_token);
if(iResp!=403) {
	log.error("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for access_token.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for access_token.");
	return;	
}


access_token = testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token");
iResp = resourceTester.doGET(context.strHost,context.strResource,access_token);
if(iResp!=403) {
	log.error("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for registration_access_token.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for registration_access_token.");
	return;	
}

iResp = resourceTester.doGET(context.strHost,context.strResource,"");
if(iResp!=403) {
	log.error("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for empty access token.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for empty access token.");
	return;	
}


return;
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Bulk by Id" id="75bf36e0-5709-40a5-bec4-dc3daaadc252"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="03290fc8-f6a1-4b5e-a832-35c30bdcbff2" name="GET Bulk by Id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fUFY1ZDY2U24xcHRBMThUNlI1UUtiU3VFSmN0IiwgImF1dGhfaWRzIjogWzExOTUwNl0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTkc3OjRTNmxpSUVDWkJ5dUwzcDRHNUkxTzRrQ09rOA"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Bulk/S_119506</con:endpoint><con:request/><con:assertion type="Invalid HTTP Status Codes" id="ba07ba3d-aab6-4984-9cac-09f1b85fc98f" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token" searchProperties="true" id="c3cf3843-f671-47cc-8af6-beeafeb07fd9">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="1904bbc8-16a3-4402-8e42-279eb7442fae"><con:settings/><con:config><script>log.info("[FB_35] REST for Bulk -- RBK003 [NEG] REST for BULK notification -- GET w/ registration_access_token: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_35] REST for Bulk -- RBK003 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="ed88c19e-fd5c-49db-9913-97ba8b835261"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_35] REST for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_35] REST for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to Issue a Notification message with Batch/Bulk information" id="4749466b-0577-4a23-96ff-54cec950e1f0"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
//String strDialog = "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains Batch/Bulk information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Request DataCustodian to issue Notification message with Batch/Bulk information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="92f23d67-152d-46cf-a484-6abfefc165a0"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification" id="e78c5e61-b6ad-4129-bca8-a54f509b4521"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) notification Body: " + strNotificationBody);

if(!strNotificationBody) {
	log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) No notification received or empty notification body.");
	testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) No notification received or empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Invalid notification body: " + e.toString());
	testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Notification URI: " + strNotificationURI);

if(!strNotificationURI) {
	log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Invalid URI supplied in the notification.");
	testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")){
	
//	String strHost = strNotificationURI.substring("http://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//	context.strResource = strResource;
//	testRunner.gotoStepByName("Issue GET");

     log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) notification must be for a Secured REST resource.");
     testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) notification must be for a Secured REST resource.");
     return;
	
} else if(strNotificationURI.startsWith("https://")){

	String strHost = strNotificationURI.substring("https://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	context.strHost = strHost;
//   context.strHost = project.getPropertyValue("ServiceEndpoint");
//	context.strResource = strResource;
     context.strResource = strNotificationURI.substring("https://".length()).substring(strHost.indexOf("/"));
     context.strHost = project.getPropertyValue("ServiceEndpoint");

     propTestStep = context.testCase.getTestStepByName("GET Bulk by Id");
	propTestStep.setPropertyValue("Endpoint",context.strHost + context.strResource);

	def headers = new StringToStringMap();
	headers.put("Content-Type","Application/atom+xml");
	String access_token = project.getPropertyValue("registration_access_token");
	
	headers.put("Authorization","Bearer " + access_token);
	propTestStep.testRequest.setRequestHeaders(headers);

	log.info("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) GET Request Body: " + context.strHost + context.strResource);

	testRunner.gotoStepByName("Init Loop");
	
} else if(strNotificationURI.startsWith("sftp://")){

//	String strHost = strNotificationURI.substring("sftp://".length());
//	String strResource = strHost.substring(strHost.indexOf("/"));
//	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
//	strHost = strHost.substring("sftp://".length());
//	context.strHost = strHost;
//	context.strResource = strResource;
	
	log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Notification must be for a REST resource.");
	testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Notification must be for a REST resource.");	
	return;	
	
	
} else {
	log.error("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Invalid URI supplied in the notification.");
	testRunner.fail("RBK003 [NEG] REST for BULK notification - GET w/ registration_access_token (Validate notification) Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue GET" id="7545718e-850a-4057-955a-7e40388c5a7b" disabled="true"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT

public class ResourceTester {
	Object log;
	int iResp = 0;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public int doGET(String strBaseEndpoint,String href, String token) {

	  	def http = new HTTPBuilder();

		http.request( strBaseEndpoint, GET, TEXT ) { req ->
			uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				iResp = resp.status;
			}		
										
			response.failure = { resp ->
				iResp = resp.status;
			}  
		}
		return iResp;
	}	
}

String access_token = "";
int iResp = 0;

ResourceTester resourceTester = new ResourceTester(log);

access_token = testRunner.testCase.testSuite.project.getPropertyValue("access_token");
iResp = resourceTester.doGET(context.strHost,context.strResource,access_token);
if(iResp!=403) {
	log.error("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for access_token.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for access_token.");
	return;	
}


access_token = testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token");
iResp = resourceTester.doGET(context.strHost,context.strResource,access_token);
if(iResp!=403) {
	log.error("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for registration_access_token.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for registration_access_token.");
	return;	
}

iResp = resourceTester.doGET(context.strHost,context.strResource,"");
if(iResp!=403) {
	log.error("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for empty access token.");
	testRunner.fail("RBK002 [NEG] REST for BULK notification - Forbidden GET access (Issue GET) GET request did not return 403 for empty access token.");
	return;	
}


return;
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Bulk by Id" id="e6f71b48-06d1-4d01-a286-0599dfa0e98b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="03290fc8-f6a1-4b5e-a832-35c30bdcbff2" name="GET Bulk by Id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWxhdGVkX2lkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInR5cGUiOiAiZ2JjX3JlZyIsICJpZCI6ICJyZWdpc3RyYXRpb25fREVNT19nYmF0ZXN0c3VpdGVfaWQiLCAidXNlciI6IDQ1NjQ0fToxZ1VORmc6d0o0d1d4MmVHS21Zbk5VOTdFeDBTTmFVSnFz"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Bulk/S_119506</con:endpoint><con:request/><con:assertion type="Invalid HTTP Status Codes" id="ba07ba3d-aab6-4984-9cac-09f1b85fc98f" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite><con:testSuite id="c60d2487-b1b1-4561-9647-7650bcbf896d" name="[FUTURE]*[FB_36] Third Party Dynamic Registration"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="81232e1c-7101-47c3-ad50-5238c6ae6541" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_36] Third Party Dynamic Registration" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="[FB_37] Query Parameters" id="a0a3badc-2426-4111-9f53-ced14e0fa592">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QRY001 [POS][A] Query Parameters - published-min/max" searchProperties="true" id="3daee975-e73f-4a02-9e49-15262c473322"><con:description/><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="ffbe454b-880f-40fa-90ae-eeec0f76ea54"><con:settings/><con:config><script>log.info("[FB_37] Query Parameters -- QRY001 [POS][A] Query Parameters - published-min/max: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_37] Query Parameters -- QRY001 [POS][A]");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="55b572e1-ed1c-40e1-9b1f-e80d547d5341"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Extract information from authorization" id="725fd908-9d65-4a8b-bc15-3c4b4c1fae5a"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
def headers = new StringToStringMap();


//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI") + "?published-min=2012-03-03T05:00:00Z&amp;published-max=2012-03-04T05:00:00Z");
propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
log.info("[FB_37] Query Parameters (QRY_001 [POS] [A] Query Parameters - published-min-max -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="d0a25ac8-9369-4018-af8c-e36fa4da37e1"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="8c21e275-db8c-4f21-b4a2-1963d06d5599" disabled="true"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;

context.ResponseBody = response;

//log.info("validating: " + response);
log.info("validating: ...");

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="InitializeLoop" id="2f05f5f7-6ec4-4e66-b2d9-9a2b187e0e9f"><con:settings/><con:config><script>context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</script></con:config></con:testStep><con:testStep type="groovy" name="SelectFeedForTest" id="44f8b2ca-69a7-4874-81c2-f0dec41d4e1b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;
import groovy.xml.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath;

int iFeedCount = 0;

if(context.holder==null)
{
	//context.responseParsed = "TRUE";
	def ResponseMessage = testRunner.testCase.testSteps["GET Resource URI"].testRequest.response.contentAsString;
	ResponseMessage = "&lt;dummyroot>" + ResponseMessage + "&lt;/dummyroot>";
//	log.info("resp:" + ResponseMessage);

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(ResponseMessage);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'espi', 'http://naesb.org/espi');
	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	if(strCount.toInteger() &lt; 1){
		log.error("Error processing XML response: response must contain at lease one feed");
		testRunner.fail("Error processing XML response: response must contain at lease one feed");
		return;		
	}

	log.info("Resp contains " + strCount + " feed(s)");
	iFeedCount = strCount.toInteger();
	context.holder = holder;
}

context.currentFeedIndex = 1;

// first try to find feed with >3 interval blocks
while(context.currentFeedIndex &lt; iFeedCount + 1)
{
	log.info("process feed # " + context.currentFeedIndex);
	
	def feedNode = context.holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");
	
	String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
	context.currentFeed = strFeed;
//	log.info("node: " + strFeed);
	
	String strCount = "0";
	try{
		strCount = context.holder.getNodeValue("count(//atom:feed[" + context.currentFeedIndex + "]/atom:entry/atom:content/espi:IntervalBlock)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body: " + e.toString());
		testRunner.fail("Invalid response body. Cannot query response.");
		return;
	}

	log.info("block count=" + strCount);
	if(strCount.toInteger()>2){
		log.info("Using feed # " + context.currentFeedIndex + " has more than 2 interval blocks");
		return;	
	}
	
	context.currentFeedIndex++;
}


// next try to find feed with 1 interval block
context.currentFeedIndex = 1;

while(context.currentFeedIndex &lt; iFeedCount + 1)
{
	log.info("process feed # " + context.currentFeedIndex);
	
	def feedNode = context.holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");
	
	String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
	context.currentFeed = strFeed;
//	log.info("node: " + strFeed);
	
	String strCount = "0";
	try{
		strCount = context.holder.getNodeValue("count(//atom:feed[" + context.currentFeedIndex + "]/atom:entry/atom:content/espi:IntervalBlock)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Invalid response body: " + e.toString());
		testRunner.fail("Invalid response body. Cannot query response.");
		return;
	}

	log.info("block count=" + strCount);
	if(strCount.toInteger()==1){
		log.info("Using feed # " + context.currentFeedIndex + " has 1 interval block");
		return;	
	}
	
	context.currentFeedIndex++;
}


log.error("Resource must contain at least 1 interval block");
testRunner.fail("Resource must contain at least 1 interval block");
return;	
</script></con:config></con:testStep><con:testStep type="groovy" name="SchemaValidation" id="9794e559-5962-4bf0-8161-a4d1797a376a"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = context.currentFeed;
//log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try{
	v.validate(instanceDocument);
} catch(Exception e) {
	log.error("xml schema validation failed: " + e.getMessage());	
	testRunner.fail("xml schema validation failed: " + e.getMessage());	
	return;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Filter Set of Interval Blocks" id="a655037a-485c-4f34-856d-e8a4d8a86f2d"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
import com.eviware.soapui.support.XmlHolder;
import com.eviware.soapui.support.types.StringToStringMap;

import groovy.time.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);

def holder;

log.info("[FB_37] Query Parameters (QRY_001 [POS][A] Query Parameters - published-min/max -- Filter Set of Interval Blocks) Extracting info from: response body ...");

try{
	holder = groovyUtils.getXmlHolder(context.currentFeed);
	
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("Invalid response body: " + e.toString());
	testRunner.fail("Invalid response body.");
	return;
}


holder.declareNamespace( 'espi', 'http://naesb.org/espi');
holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

String strCount = "0";
try{
	strCount = holder.getNodeValue("count(//espi:IntervalBlock)")
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("Invalid response body: " + e.toString());
	testRunner.fail("Invalid response body. Cannot query response.");
	return;
}

String strMin = "";
String strMax = "";


if(strCount.toInteger()>2){
	// 3 or more blocks
	log.info("Using query algorithm for more than 2 interval blocks");
	
//	log.error("Resource must contain at least 3 interval blocks");
//	testRunner.fail("Resource must contain at least 3 interval blocks");
//	return;	

	List listEnds = [];
	List listStartMinus = [];
	List listEndPlus = [];
	
	def entryNodes = holder.getDomNodes("//espi:IntervalBlock/espi:interval/espi:start");
	def publishedNodes = holder.getDomNodes("//espi:IntervalBlock/../../atom:published");
	int iPos = 0;
	
	TimeZone.setDefault(TimeZone.getTimeZone('UTC'));
	def durOneSec = new TimeDuration(0,0,1,0);
	
	
	for(entryNode in entryNodes) {
		String strStart = entryNode.getFirstChild().getNodeValue();
		def intervalNodes = entryNode.getParentNode().getChildNodes();
		String strDuration = "";
		for(intervalNode in intervalNodes) {
			if(intervalNode.getNodeName()=="espi:duration"){
				strDuration = intervalNode.getFirstChild().getNodeValue();
				break;
			}		
		}
		
	//	TimeZone.setDefault(TimeZone.getTimeZone('UTC'));
		Date dateEnd = new Date();
		dateEnd.setTime(((long)strStart.toInteger() + strDuration.toInteger())* 1000L);
	
		String strPublished = "";
	
		strPublished = publishedNodes[iPos].getFirstChild().getNodeValue();
	
	//	log.info "interval start: " + strStart + " interval end Date: " + dateEnd.format("yyyy-MM-dd'T'HH:mm:ss'Z'") + " Published:" + strPublished;
		
		listEnds.add(dateEnd);
	
		Date dateStartMinus = new Date();
		dateStartMinus.setTime(((long)strStart.toInteger())* 1000L);	
		Date dateEndPlus = new Date();
		dateEndPlus.setTime(((long)strStart.toInteger() + strDuration.toInteger())* 1000L);	
		
		listStartMinus.add(dateStartMinus);
		listEndPlus.add(dateEndPlus);
				
		iPos++;
	}
	
	listEnds.sort();
	
	//Date dateMin = listEnds.getAt(1);
	//Date dateMax = listEnds.getAt(listEnds.size-2);
	
	Date dateMin = listStartMinus.getAt(1);
	Date dateMax = listEndPlus.getAt(listEnds.size-2);
	
	strMin = dateMin.format("yyyy-MM-dd'T'HH:mm:ss'Z'");
	strMax = dateMax.format("yyyy-MM-dd'T'HH:mm:ss'Z'");
	
	log.info("Query min: " + strMin + " max: " + strMax);
	
	if(strMin.equals(strMax)){
		log.error("Cannot conduct test as the resource response does not contain a testable range of IntervalBlock start dates.");
		testRunner.fail("Cannot conduct test as the resource response does not contain a testable range of IntervalBlock start dates.");
		return;
	}
	
	context.expectedCount = listEnds.size - 2;
	
	log.info "Expected count=" + (listEnds.size - 2);
} else {
	// 1 block
	log.info("Using query algorithm for 1 interval block");

	def entryNodes = holder.getDomNodes("//espi:IntervalBlock/espi:interval/espi:start");
	int iPos = 0;
	
	TimeZone.setDefault(TimeZone.getTimeZone('UTC'));
	def durOneSec = new TimeDuration(0,0,1,0);
	
	String strStart = "";
	String strDuration = "";

	
	for(entryNode in entryNodes) {
		strStart = entryNode.getFirstChild().getNodeValue();
		
		def intervalNodes = entryNode.getParentNode().getChildNodes();
		
		for(intervalNode in intervalNodes) {
			if(intervalNode.getNodeName()=="espi:duration"){
				strDuration = intervalNode.getFirstChild().getNodeValue();
				break;
			}		
		}
	}

	entryNodes = holder.getDomNodes("//espi:IntervalBlock/espi:interval/espi:duration");
	for(entryNode in entryNodes) {
		strDuration = entryNode.getFirstChild().getNodeValue();
		break;
	}

	log.info("strStart=" + strStart);
	log.info("strDuration=" + strDuration);

	Date dateMin = new Date();
	dateMin.setTime(((long)strStart.toInteger() - strDuration.toInteger())* 1000L);
	Date dateMax = new Date();
	dateMax.setTime(((long)strStart.toInteger() + strDuration.toInteger())* 1000L);

	
	strMin = dateMin.format("yyyy-MM-dd'T'HH:mm:ss'Z'");
	strMax = dateMax.format("yyyy-MM-dd'T'HH:mm:ss'Z'");

	context.expectedCount = 2;
	
	log.info "Expected count=2";
	
}


def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Filtered Resource URI");
def headers = new StringToStringMap();

String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?published-min=" + strMin + "&amp;published-max=" + strMax;

propTestStep.setPropertyValue("Endpoint",strEndpoint);
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);

return

/*
 * TMP: code used to get intervalBlock Time stamps
 * for reference only
 * 
def entryNodes = holder.getDomNodes("//espi:IntervalBlock/espi:interval/espi:start");
for(entryNode in entryNodes) {
	String strStart = entryNode.getFirstChild().getNodeValue();
	def holderParent = new XmlHolder(entryNode.getParentNode());
	holderParent.declareNamespace( 'espi', 'http://naesb.org/espi');
	
	String strDuration = holderParent.getDomNode("//espi:duration").getFirstChild().getNodeValue();
	long lDuration = strDuration.toInteger();
	
	long lEnd = strStart.toInteger() + lDuration;
	Date dateEnd = new Date( ((long)lEnd) * 1000 )
	
	//log.info "start: " + strStart + "Date: " + dateStart.format("yyyy-MM-dd HH:mm:ss.S");
	log.info "end Date: " + dateEnd.format("yyyy-MM-dd HH:mm:ss");
}
*/


</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Filtered Resource URI" id="26b74608-0f80-4bbc-8bc3-670701427bab"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Filtered Resource URI" id="ee75590d-ed36-45dd-b8b0-5f1430de39dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?published-min=2018-11-12T00:00:00Z&amp;published-max=2018-11-30T00:00:00Z</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe93bd64-f25e-47e3-9d79-eaedf4970e58"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="07379694-c59e-4124-a0f6-5980d72ea38e" disabled="true"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;

context.ResponseBody = response;

log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="SchemaValidationFiltered" id="e868cd7b-cc20-4295-978c-20ee8434ad92"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = context.currentFeed;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try{
	v.validate(instanceDocument);
} catch(Exception e) {
	log.error("xml schema validation failed: " + e.getMessage());	
	testRunner.fail("xml schema validation failed: " + e.getMessage());	
	return;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SelectFeedForTestFilter" id="c3d6d5f0-4a99-4d6a-8e40-03fcae7a4466"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder;
import groovy.xml.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def projectPath = groovyUtils.projectPath;

//if(context.holder==null)
//{
	//context.responseParsed = "TRUE";
	//def ResponseMessage = testRunner.testCase.testSteps["GET Filtered Resource URI"].testRequest.response.contentAsString;
	def ResponseMessage = testRunner.testCase.testSteps["GET Filtered Resource URI"].testRequest.response.contentAsString;
	ResponseMessage = "&lt;dummyroot>" + ResponseMessage + "&lt;/dummyroot>";
	log.info("resp:" + ResponseMessage);

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(ResponseMessage);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	holder.declareNamespace( 'espi', 'http://naesb.org/espi');
	holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//atom:feed)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("Error processing XML response: " + e.toString());
		testRunner.fail("Error processing XML response: " + e.toString());
		return;
	}

	if(strCount.toInteger() &lt; 1){
		log.error("Error processing XML response: response must contain at lease one feed");
		testRunner.fail("Error processing XML response: response must contain at lease one feed");
		return;		
	}

	log.info("Resp contains " + strCount + " feed(s)");
	//context.currentFeedIndex = strCount.toInteger();
	//context.holder = holder;
//}

//int iFeedCount = context.currentFeedIndex;

def feedNode = holder.getDomNode("//atom:feed[" + context.currentFeedIndex + "]");
//def feedNode = holder.getDomNode("//atom:feed[" + 1 + "]");

String strFeed = groovy.xml.XmlUtil.serialize(feedNode);
//log.info("node: " + strFeed);
context.currentFeed = strFeed;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Filtered Set of Interval Blocks" id="3ec5cca0-cb41-4756-8821-fb87f7788689"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
import com.eviware.soapui.support.XmlHolder;
import com.eviware.soapui.support.types.StringToStringMap;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);



def holder;

// the following code allows us to temporarily bypass openESPI as a reference implementation
// in order to test the following code, since openESPI currently (1/14/2015) 
// does not handle published and updated time stamps properly
// This code will "bypass" the true response from OpenESPI and will use a test data file

// String strFile = groovyUtils.projectPath + "/sampledata/resource_filteredMinMax.xml";
// holder = groovyUtils.getXmlHolder(new File(strFile).text);


// this code uses the actual retreived response

//log.info("extracting info from: " + context.ResponseBody);
try{
	//holder = groovyUtils.getXmlHolder(context.ResponseBody);
	//holder = groovyUtils.getXmlHolder(testRunner.testCase.getTestStepByName("GET Filtered Resource URI").getPropertyValue("response"));
	holder = groovyUtils.getXmlHolder(context.currentFeed);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("Invalid response body: " + e.toString());
	testRunner.fail("Invalid response body.");
	return;
}

holder.declareNamespace( 'espi', 'http://naesb.org/espi');
holder.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');

String strCount = "0";
try{
	strCount = holder.getNodeValue("count(//espi:IntervalBlock)")
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("Invalid response body: " + e.toString());
	testRunner.fail("Invalid response body. Cannot query response.");
	return;
}

if(strCount.toInteger()&lt;1){
	log.error("Resource must contain at least 1 interval block");
	testRunner.fail("Resource must contain at least 1 interval block");
	return;	
}
/*
 // for logging only
 
List listStarts = [];
def entryNodes = holder.getDomNodes("//espi:IntervalBlock/espi:interval/espi:start");
def publishedNodes = holder.getDomNodes("//espi:IntervalBlock/../../atom:published");
int iPos = 0;
for(entryNode in entryNodes) {
	String strStart = entryNode.getFirstChild().getNodeValue();
	def intervalNodes = entryNode.getParentNode().getChildNodes();
	String strDuration = "";
	for(intervalNode in intervalNodes) {
		if(intervalNode.getNodeName()=="espi:duration"){
			strDuration = intervalNode.getFirstChild().getNodeValue();
			break;
		}
	}
	
	TimeZone.setDefault(TimeZone.getTimeZone('UTC'));
	Date dateStart = new Date();
	dateStart.setTime(((long)strStart.toInteger()+ strDuration.toInteger()) * 1000L);
	String strPublished = publishedNodes[iPos].getFirstChild().getNodeValue();

	log.info "interval start: " + strStart + " Date: " + dateStart.format("yyyy-MM-dd'T'HH:mm:ss'Z'") + " Published:" + strPublished;

	listStarts.add(dateStart);
	iPos++;
}
*/

if(strCount.toInteger()!=context.expectedCount){
	log.error("Filtered response does not contain the expected  number of IntervalBlocks. Expected:" + context.expectedCount + " Actual:" + strCount);
	testRunner.fail("Filtered response does not contain the expected  number of IntervalBlocks. Expected:" + context.expectedCount + " Actual:" + strCount);
} else
{
	log.info("as expected recevied " + context.expectedCount + " interval blocks");
}

return
</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()

//testRunner.testCase.setPropertyValue("testsPerformed","");

//def mapFBsTested = [:];
//context.mapFBsTested = mapFBsTested;

context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();

context.holder =null;
context.currentFeed = null;
context.currentFeedIndex = null;</con:tearDownScript><con:properties><con:property><con:name>extracted_scope_sel_uri</con:name><con:value>http://localhost:8080/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8081/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>testsPerformed</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="e0a0ba6e-7442-4248-803e-c2f50d78e6da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QRY002 [NEG][A] Query Parameters - Verify Query Parameter Contents are Validated" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update Dialog CMD TestStep" id="7817a86a-1f6b-493b-8703-68fd4b055036"><con:settings/><con:config><script>log.info("[FB_37] Query Parameters -- QRY002 [NEG][A] Query Parameters - Verify Query Parameter Contents are Validated: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_37] Query Parameters -- QRY002 [NEG][A]");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Run TestCase Create Authorization" id="4f58f18b-5338-4cb5-98ff-ebc07efac32b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>00812f7a-b4ce-4782-bf13-f27a979f6d00</con:targetTestCase><con:properties><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>redirect_uri</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationURI</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>token_type</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>refresh_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>expires_in</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>scope</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>error</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_id</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>old_access_token</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>client_secret</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>resourceServerProxy</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>proxyOutPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>authorizationServerAuthorizationEndpointProxy</con:name></con:property><con:property><con:name>authorizationServerTokenEndpointProxy</con:name></con:property><con:property><con:name>resourceServer</con:name></con:property><con:property><con:name>registration_access_token</con:name></con:property><con:property><con:name>client_access_token_client_id</con:name></con:property><con:property><con:name>client_access_token_secret</con:name></con:property><con:property><con:name>authorizationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>SINGLETON_AND_WAIT</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha published-min Value" id="14d567df-28e7-476c-8e1d-b3a3324b2422"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha published-min Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?published-min=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha published-min Value" id="f0a0167d-6491-4880-adb5-f97069dd30a3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha published-min Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?published-min=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Invalid Date published-min Value" id="9b655b2e-44a8-464e-83d4-db6cf1cb180b"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Invalid Date published-min Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?published-min=03/01/2016";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Invalid Date published-min Value" id="5fc9ef61-a792-48aa-a71a-e62efad9e37f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Invalid Date published-min Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?published-min=03/01/2016</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha published-max Value" id="bad43d8f-a9c5-46a9-91bd-fcaea306ed58"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha published-max Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?published-max=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha published-max Value" id="ed70ff2d-2ee5-4f14-a864-bf8ea3458bb2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha published-max Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?published-max=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Invalid Date published-max Value" id="c8992c36-5460-499a-b6b7-1dce60032728"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Invalid Date published-max Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?published-max=03/01/2016";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Invalid Date published-max Value" id="6e6f122d-eff0-43e9-a7a8-8293ee4a6a2f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Invalid Date published-max Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?published-max=03/01/2016</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha updated-min Value" id="2b329dab-c450-4527-92a0-0d048862c324"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha updated-min Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?updated-min=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha updated-min Value" id="2c319c68-fb74-43c4-a8b4-d7be04f5e6a8"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha updated-min Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?updated-min=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Invalid Date updated-min Value" id="aa57a780-c12c-424d-aad9-fdba287d7d8e"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Invalid Date updated-min Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?updated-min=03/01/2016";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Invalid Date updated-min Value" id="e4a87e5c-e3d3-49de-9ba0-dd6ef928f598"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Invalid Date updated-min Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?updated-min=03/01/2016</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha updated-max Value" id="d6a18155-b2b2-4f29-8126-4774f799eaef"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha updated-max Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?updated-max=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha updated-max Value" id="53712b51-a4e0-46f8-b85a-808bf8b500ce"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha updated-max Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?updated-max=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Invalid Date updated-max Value" id="0b563ac0-1718-4d17-8bb3-15c2f9bb161c"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Invalid Date updated-max Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?updated-max=03/01/2016";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Invalid Date updated-max Value" id="ceecd4c5-beec-4622-a9bf-eea3d4148d3b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Invalid Date updated-max Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?updated-max=03/01/2016</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha max-results Value" id="1d10c376-2699-4081-994c-6b532cee9519"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha max-results Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?max-results=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha max-results Value" id="6c8f54f5-b8ac-4a96-977c-fc42bc4a0282"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha max-results Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?max-results=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha start-index Value" id="de804fe8-b3e6-4d87-902f-5698977b0a52"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha start-index Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?start-index=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha start-index Value" id="fb4fbf3c-8369-464b-9b4d-fbd8b0529caa"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha start-index Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?start-index=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Create URI Value for GET Resource URI with Alpha depth Value" id="5b51953b-9dd0-48e8-812e-544ea52c5787"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI with Alpha depth Value");
def headers = new StringToStringMap();


String strEndpoint = propCreateAuthResults.getPropertyValue("resourceURI");
strEndpoint = strEndpoint + "?depth=All";

propTestStep.setPropertyValue("Endpoint",strEndpoint);
log.info("[FB_37] Query Parameters (QRY_002 [NEG][A] Query Parameters - Verify Query Paraneter Contents are Verified -- Extract information from authorization) resourceURI: " + propTestStep.getPropertyValue("Endpoint"));
headers.put("Authorization","Bearer " + propCreateAuthResults.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI with Alpha depth Value" id="686e7177-9e6c-432c-941d-b8fcc27db450"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI with Alpha depth Value" id="f7cb0019-d01d-4a23-9d5a-03c0ad1ac907" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498?depth=All</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="242b98a4-e03e-4073-bbc5-6fd0c9077d2a"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite><con:testSuite id="6b7efd0f-8dd4-493b-bbbe-9281e38cace1" name="[FUTURE]*[FB_38] On Demand Requests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a06f3472-83b5-457c-836b-98abf9d93359" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_38] On Demand Requests" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="[FB_39] PUSH Model" id="a41b49ff-f635-4a3f-97a4-388c1818fd1b">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation" searchProperties="true" id="e0524a81-a243-43f7-9705-67aeb6a6699c">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="a9c3fe3f-3545-483b-9966-368b3decc0b3"><con:settings/><con:config><script>log.info("[FB_39] PUSH Model -- PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_39] PUSH Model -- PSH001 [POS]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="ba0adc8e-d92f-4ca2-abce-30c246fe6789"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_34] SFTP for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_34] SFTP for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to issue Notification message with ApplicationInformation Information" id="cc4851f3-ddd2-4685-9ea5-5c08d3c2e79e"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains ApplicationInformation information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

result = ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Request DataCustodian to issue Notification message with ApplicationInformation information) Testing terminated by user.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Request DataCustodian to issue Notification message with ApplicationInformation information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="668ef150-7aad-4d43-8629-f7a8be0356d9"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification and dispatch GET or SFTP step" id="acbacd7e-5f06-4670-aba1-49ecdbf19def"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Notification Body: " + strNotificationBody);

if(!strNotificationBody) {
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) No notification received or received an empty notification body.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) No notification received or received an empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Invalid notification body: " + e.toString());
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) notification URI:" + strNotificationURI);

if(!strNotificationURI) {
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")) {

	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) notification must be for a Secured REST or SFTP resource.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) notification must be for a Secured REST or SFTP resource.");
	return

} else if(strNotificationURI.startsWith("https://")){

	String strHost = strNotificationURI.substring("https://".length());
	context.strResource = strNotificationURI.substring("https://".length()).substring(strHost.indexOf("/"));
	context.strHost = testRunner.testCase.testSuite.project.getPropertyValue("ServiceEndpoint");

	propTestStep = context.testCase.getTestStepByName("GET ApplicationInformation by Id");
	propTestStep.setPropertyValue("Endpoint",context.strHost + context.strResource);

	def headers = new StringToStringMap();
	headers.put("Content-Type","Application/atom+xml");
	String access_token = testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token");
	
	headers.put("Authorization","Bearer " + access_token);
	propTestStep.testRequest.setRequestHeaders(headers);

	log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Get Request Body: " + context.strHost + context.strResource);
	
	testRunner.gotoStepByName("GET ApplicationInformation by Id");
	
} else if(strNotificationURI.startsWith("sftp://")){

	String strHost = strNotificationURI.substring("sftp://".length());
	String strResource = strHost.substring(strHost.indexOf("/"));
	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
	strHost = strHost.substring("sftp://".length());
	context.strHost = strHost;
	context.strResource = strResource;

	log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Get Request Body: " + context.strHost + context.strResource);
		
	testRunner.gotoStepByName("Issue SFTP get");
	
} else {
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 1" id="cd021af2-3b9c-46de-a409-7cc6933258eb"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="delay" name="Delay" id="dc9ce584-9d87-4d63-a7ec-5fa29d453abb"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="groovy" name="Init Loop" id="1507be05-a10f-425f-8a55-c9c6636c8989"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [FB_39] PUSH Model (PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- Init Loop Script");

	context.loopCnt = 0;
	context.passCnt = 0;
	context.results = [];

log.info("**********  END  Execution ********** -- [FB_39] PUSH Model (PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- Init Loop Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Repeat GET up to 5 Times" id="513f9f3a-5fe1-4772-9ad7-412d79cfe870"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [FB_39] PUSH Model (PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- Repeat GET up to 5 Times Script");
	
	if(context.loopCnt&lt;5){
		
		def tStep = testRunner.testCase.testSteps["GET ApplicationInformation by Id"];

		long millisStart = System.currentTimeMillis();

		def result = tStep.run(testRunner, context);

		long millisStop = System.currentTimeMillis();
		long delta = millisStop - millisStart;

		if(result.status.toString().equals("OK")){
			context.passCnt++;
			def strResultA = "PASS: TIME DELTA=" + delta.toString();
			context.results.add(strResultA);

			// Done! stop test case
			context.results.each{strResult -> 
				log.info strResult;
			}
		
			log.info "iterations = " + (context.loopCnt + 1);
			log.info "pass count = " + context.passCnt;
			
			testRunner.gotoStepByName( "Done 2");
			return;
			
		} else {
			def strResult = "FAIL: TIME DELTA=" + delta.toString();
			context.results.add(strResult);
		}
		
		testRunner.gotoStepByName( "Repeat GET up to 5 Times");

		context.loopCnt++;	
	} else {
		context.results.each{strResult -> 
			log.info strResult;
		}
		
		log.info "iterations = " + context.loopCnt;
		log.info "pass count = " + context.passCnt;

		// if we get here we failed 5 times.
		log.error("Failed GET ApplicationInformation by ID");
		testRunner.fail("Failed GET ApplicationInformation by ID");
		
		testRunner.gotoStepByName( "Done 2");
	}

log.info("**********  END  Execution ********** -- [FB_39] PUSH Model (PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- Repeat GET up to 5 Times Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue GET OLD" id="7f85e3d7-da68-48a1-8584-67409f13be33" disabled="true"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doGET(String strBaseEndpoint,String href, String token) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		http.request( strBaseEndpoint, GET, TEXT ) { req ->
			uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				_strResponseBody = reader.text;				
			}		
										
			response.failure = { resp ->
				log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (issue GET) GET Failed: " + resp.statusLine);
				return null;
			}  
		}
		return _strResponseBody;
	}	
}

String access_token = testRunner.testCase.testSuite.project.getPropertyValue("registration_access_token");

ResourceTester resourceTester = new ResourceTester(log);

String strGetResponseBody = resourceTester.doGET(context.strHost,context.strResource,access_token);

if(strGetResponseBody==null) {
	log.info ("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (issue GET) GET request failed.");
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (issue GET) GET request failed.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (issue GET) GET request failed.");
	return;	
}

context.ResponseBody = strGetResponseBody;

	log.info ("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (issue GET) GET response:" + context.ResponseBody);


return;
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET ApplicationInformation by Id" id="73ece16d-877c-4352-8132-0857ff0a0c73"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="d89bab45-9e3c-4fb4-b274-3aa6315f02a6" name="GET ApplicationInformation by Id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWxhdGVkX2lkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInR5cGUiOiAiZ2JjX3JlZyIsICJpZCI6ICJyZWdpc3RyYXRpb25fREVNT19nYmF0ZXN0c3VpdGVfaWQiLCAidXNlciI6IDQ1NjQ0fToxZ1VLZ2Y6WUYwVW9UcjB1Y0NqNjVaZUxxR3NrcGdUb3hZ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/ApplicationInformation/7c8a3cac7855_DEMO_gbatestsuite_id_admin</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="1dd6fec6-8368-4666-9b2a-a3164a4cfa53" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Validate REST GET response resource type and against schema" id="2dc2af30-1f80-4340-8fb4-78f799ba236b"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

propTestStep = testRunner.testCase.testSteps["GET ApplicationInformation by Id"];
context.ResponseBody = propTestStep.testRequest.response.responseContent;

log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) validating: " + context.ResponseBody);

def holder;
try{
	holder = groovyUtils.getXmlHolder(context.ResponseBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.info ("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Invalid response body.");
	return;
}

String strCount = "0";
try{
strCount = holder.getNodeValue("count(//espi:ApplicationInformation)")
} catch(org.apache.xmlbeans.XmlException e) {
	log.info ("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Invalid response body. Cannot query response.");
	return;
}

if(strCount.toInteger()&lt;1){
	log.info ("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Response does not contain at least one ApplicationInformation entry.");
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Response does not contain at least one ApplicationInformation entry.");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Response does not contain at least one ApplicationInformation entry.");
	return;	
}

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");
Source instanceDocument = new StreamSource(new StringReader(context.ResponseBody));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try {
	v.validate(instanceDocument);
} catch(org.xml.sax.SAXParseException e) {
	log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Response failed schema validation: " + e.toString());
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Response failed schema validation: " + e.toString());
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate REST GET response resource type and against schema) Response failed schema validation. See script log for details.");
	return;
}

testRunner.gotoStepByName("Done 2");
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue SFTP get" id="16a0300b-bda7-4ed2-bfc6-d99abda1d82a"><con:settings/><con:config><script>import groovy.io.FileType;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

public boolean RunCommand(String cmd)
{
	def doCmd;

	log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) exec: " + cmd);
	log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) os  : " + System.properties['os.name']);
	
	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute();
	} else {
		doCmd = ["bash", "-c",cmd].execute();
	}
	
	doCmd.waitFor();
	
	if(doCmd.exitValue()!=0) {
				
		log.info "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) return code: ${ doCmd.exitValue()}"
		log.error "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) return code: ${ doCmd.exitValue()}"

		log.info "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) stderr: ${doCmd.err.text}"
		log.error "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) stderr: ${doCmd.err.text}"

		log.info "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) stdout: ${doCmd.in.text}"
		log.error "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) stdout: ${doCmd.in.text}"
	
		return false;
	}
	return true;
}

transferDir = groovyUtils.projectPath + "/../transferred";

def list = []
def dir = new File(transferDir);
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

if(list.size()>0){
	
	cmdRm = 'rm ' + transferDir +  '/*';
	
	if(RunCommand(cmdRm) != true) {
		log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) could not clear transfer directory " + transferDir);
		log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) could not clear transfer directory " + transferDir);
		testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) could not clear transfer directory " + transferDir);
		return;
	} 
}

cmdGet = 'sftp ' + context.strHost + ':' + context.strResource + ' ' + transferDir;

if(RunCommand(cmdGet) != true) {
	log.info("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) could not issue SFTP GET");
	log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) could not issue SFTP GET");
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Issue SFTP GET) could not issue SFTP GET");
	return;
}

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate retrieved files against schema" id="2dc9c764-b0d3-4e22-997e-ed5f585ffc82"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");

def list = []
def dir = new File(groovyUtils.projectPath + "/../transferred")
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

boolean bFailed = false;
list.each {
	log.info "PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate retrieved files against schema) Validating:" + it.path;

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(new File(it.path).text);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate retrieved files against schema) Invalid response body: " + e.toString());
		bFailed = true;
	}
	
	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//espi:ApplicationInformation)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate retrieved files against schema) Invalid response body. Cannot query response: " +  e.toString());
		bFailed = true;
	}

	if(strCount.toInteger()&lt;1){
		log.error("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate retrieved files against schema) Response does not contain at least one ApplicationInformation entry.");
		bFailed = true;
	}
	
	Source instanceDocument = new StreamSource(new FileReader(it.path));
	
	SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
	Schema s = sf.newSchema(schemaDocuments);
	Validator v = s.newValidator();

	try {
		v.validate(instanceDocument);
	} catch(org.xml.sax.SAXParseException e) {
		log.error ("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate retrieved files against schema) SAXParseException occurred: " + e.toString());
		bFailed = true;
	}
}

if(bFailed) {
	testRunner.fail("PSH001 [POS] Notification Push/POST to ThirdParty of ApplicationInformation -- (Validate retrieved files against schema) One or more response files failed validation. See script log for details.");
}

return;
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 2" id="5fb9ba1a-ba6b-4c03-872b-3b459ee23ddc"><con:settings/><con:config><script/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties><con:property><con:name>response</con:name><con:value/></con:property></con:properties>
	</con:testCase>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSH002 [POS] Notification Push/POST to ThirdParty of Authorization" searchProperties="true" id="2f1a77ef-80d6-49ed-9cca-b62f1ba05f02">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="2a5a781f-1aff-4046-b98d-16d20590ae0c"><con:settings/><con:config><script>log.info("[FB_39] PUSH Model -- PSH002 [POS] Notification Push/POST to ThirdParty of Authorization: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_39] PUSH Model -- PSH002 [POS]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="2f13d6a2-ccc7-4daf-b4e2-15442dfa9ff4"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_34] SFTP for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_34] SFTP for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to issue Notification message with Authorization Information" id="4026626f-c83c-49f3-8538-a9b905dd5b28"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains Authorization information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

result= ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Request DataCustodian to issue Notification message with Authorization information) Testing terminated by user.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Request DataCustodian to issue Notification message with Authorization information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="79e3684e-53f1-4fd5-8a56-c9dc78d25f07"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification and dispatch GET or SFTP step" id="a48dc8fb-9e71-4634-8d26-2e035ff3c1f6"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Notification Body:" + strNotificationBody);

if(!strNotificationBody) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) No notification received or empty notification body.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) No notification received or empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Invalid notification body:" + e.toString());
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Notification URI:" + strNotificationURI);

if(!strNotificationURI) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")) {

	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) notification must be for a Secured REST or SFTP resource.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) notification must be for a Secured REST or SFTP resource.");
	return

} else if(strNotificationURI.startsWith("https://")){

	String strHost = strNotificationURI.substring("https://".length());
	context.strResource = strNotificationURI.substring("https://".length()).substring(strHost.indexOf("/"));
	context.strHost = testRunner.testCase.testSuite.project.getPropertyValue("ServiceEndpoint");

	propTestStep = context.testCase.getTestStepByName("GET Authorization by Id");
	propTestStep.setPropertyValue("Endpoint",context.strHost + context.strResource);

	def headers = new StringToStringMap();
	headers.put("Content-Type","Application/atom+xml");
	String access_token = testRunner.testCase.testSuite.project.getPropertyValue("client_access_token");
	
	headers.put("Authorization","Bearer " + access_token);
	propTestStep.testRequest.setRequestHeaders(headers);

	log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Get Request Body: " + context.strHost + context.strResource);
	
	testRunner.gotoStepByName("GET Authorization by Id");
	
	
} else if(strNotificationURI.startsWith("sftp://")){

	String strHost = strNotificationURI.substring("sftp://".length());
	String strResource = strHost.substring(strHost.indexOf("/"));
	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
	strHost = strHost.substring("sftp://".length());
	context.strHost = strHost;
	context.strResource = strResource;

	log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Get Request Body: " + context.strHost + context.strResource);
		
	testRunner.gotoStepByName("Issue SFTP get");
	
} else {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 1" id="217233f0-4c82-47e2-b8d4-478708aeeaf2"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="delay" name="Delay" id="628f85d7-022f-4a7c-9207-3740705a420f"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="groovy" name="Init Loop" id="1454197a-f90b-43fc-b40a-e68f7e109e7f"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [FB_39] PUSH Model (PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- Init Loop Script");

	context.loopCnt = 0;
	context.passCnt = 0;
	context.results = [];

log.info("**********  END  Execution ********** -- [FB_39] PUSH Model (PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- Init Loop Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Repeat GET up to 5 Times" id="0f619aa2-a3b4-475d-9483-38e8919ad342"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [FB_39] PUSH Model (PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- Repeat GET up to 5 Times Script");
	
	if(context.loopCnt&lt;5){
		
		def tStep = testRunner.testCase.testSteps["GET Authorization by Id"];

		long millisStart = System.currentTimeMillis();

		def result = tStep.run(testRunner, context);

		long millisStop = System.currentTimeMillis();
		long delta = millisStop - millisStart;

		if(result.status.toString().equals("OK")){
			context.passCnt++;
			def strResultA = "PASS: TIME DELTA=" + delta.toString();
			context.results.add(strResultA);

			// Done! stop test case
			context.results.each{strResult -> 
				log.info strResult;
			}
		
			log.info "iterations = " + (context.loopCnt + 1);
			log.info "pass count = " + context.passCnt;
			
			testRunner.gotoStepByName( "Done 2");
			return;
			
		} else {
			def strResult = "FAIL: TIME DELTA=" + delta.toString();
			context.results.add(strResult);
		}
		
		testRunner.gotoStepByName( "Repeat GET up to 5 Times");

		context.loopCnt++;	
	} else {
		context.results.each{strResult -> 
			log.info strResult;
		}
		
		log.info "iterations = " + context.loopCnt;
		log.info "pass count = " + context.passCnt;

		// if we get here we failed 5 times.
		log.error("Failed GET Authorization by ID");
		testRunner.fail("Failed GET Authorization by ID");
		
		testRunner.gotoStepByName( "Done 2");
	}

log.info("**********  END  Execution ********** -- [FB_39] PUSH Model (PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- Repeat GET up to 5 Times Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue GET OLD" id="0d37ec79-5f25-49df-8326-6f662ded7500" disabled="true"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doGET(String strBaseEndpoint,String href, String token) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		http.request( strBaseEndpoint, GET, TEXT ) { req ->
			uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				_strResponseBody = reader.text;				
			}		
										
			response.failure = { resp ->
				log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue GET) GET Failed: " + resp.statusLine);
				return null;
			}  
		}
		return _strResponseBody;
	}	
}

String access_token = testRunner.testCase.testSuite.project.getPropertyValue("client_access_token");

ResourceTester resourceTester = new ResourceTester(log);

String strGetResponseBody = resourceTester.doGET(context.strHost,context.strResource,access_token);

if(strGetResponseBody==null) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue GET) GET request failed.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue GET) GET request failed.");
	return;	
}

context.ResponseBody = strGetResponseBody;

return;
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Authorization by Id" id="2915016d-278e-4553-a869-35bc66907dbc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="c2f159c5-20fd-4142-a6b8-a7838348b2ef" name="GET Authorization by Id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VLZ2Y6QmV0N004bWZFQmpYdGV6ZE9ZRXBUVDNzdVpz"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119492</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="60d7c868-ece7-4b80-bfe3-d65defaf330e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Validate REST GET response resource type and against schema" id="9c8331b3-dcce-4d86-8101-148bbc51c439"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

propTestStep = testRunner.testCase.testSteps["GET Authorization by Id"];
context.ResponseBody = propTestStep.testRequest.response.responseContent;

log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Validating: " + context.ResponseBody);

def holder;
try{
	holder = groovyUtils.getXmlHolder(context.ResponseBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Invalid response body.");
	return;
}

String strCount = "0";
try{
strCount = holder.getNodeValue("count(//espi:Authorization)")
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Invalid response body. Cannot query response.");
	return;
}

if(strCount.toInteger()&lt;1){
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Response does not contain at least one Authorization entry.");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Response does not contain at least one Authorization entry.");
	return;	
}

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");
Source instanceDocument = new StreamSource(new StringReader(context.ResponseBody));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try {
	v.validate(instanceDocument);
} catch(org.xml.sax.SAXParseException e) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Response failed schema validation: " + e.toString());
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate REST GET response resource type and against schema) Response failed schema validation. See script log for details.");
	return;
}

testRunner.gotoStepByName("Done 2");
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue SFTP get" id="dd5dad54-5de3-4137-81f8-26e59ea1800a"><con:settings/><con:config><script>import groovy.io.FileType;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

public boolean RunCommand(String cmd)
{
	def doCmd;

	log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) exec: " + cmd);
	log.info("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) os  : " + System.properties['os.name']);
	
	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute();
	} else {
		doCmd = ["bash", "-c",cmd].execute();
	}
	
	doCmd.waitFor();
	
	if(doCmd.exitValue()!=0) {
		
		log.error "PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) return code: ${ doCmd.exitValue()}"
		log.error "PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) stderr: ${doCmd.err.text}"
		log.error "PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) stdout: ${doCmd.in.text}"
	
		return false;
	}
	return true;
}

transferDir = groovyUtils.projectPath + "/../transferred";

def list = []
def dir = new File(transferDir);
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

if(list.size()>0){
	
	cmdRm = 'rm ' + transferDir +  '/*';
	
	if(RunCommand(cmdRm) != true) {
		log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) Could not clear transfer directory" + transferDir);
		testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) Could not clear transfer directory" + transferDir);
		return;
	} 
}

cmdGet = 'sftp ' + context.strHost + ':' + context.strResource + ' ' + transferDir;

if(RunCommand(cmdGet) != true) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) Could not issue SFTP GET");
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Issue SFTP get) Could not issue SFTP GET");
	return;
}

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate retrieved files against schema" id="36500e35-9dc7-4240-a9d1-bc524d2ae99a"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");

def list = []
def dir = new File(groovyUtils.projectPath + "/../transferred")
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

boolean bFailed = false;
list.each {
	log.info "PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) Validating:" + it.path;

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(new File(it.path).text);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) Invalid response body: " + e.toString());
		bFailed = true;
	}
	
	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//espi:Authorization)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) Invalid response body. Cannot query response: " +  e.toString());
		bFailed = true;
	}

	if(strCount.toInteger()&lt;1){
		log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) Response does not contain at least one Authorization entry.");
		bFailed = true;
	}
	
	Source instanceDocument = new StreamSource(new FileReader(it.path));
	
	SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
	Schema s = sf.newSchema(schemaDocuments);
	Validator v = s.newValidator();

	try {
		v.validate(instanceDocument);
	} catch(org.xml.sax.SAXParseException e) {
	log.error("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) Response failed schema validation: " + e.toString());
		bFailed = true;
	}
}

if(bFailed) {
	testRunner.fail("PSH002 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) One or more response files failed validation. See script log for details.");
}

return;
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 2" id="90591cc7-1350-4c9d-8d4a-5831827c38a5"><con:settings/><con:config><script/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSH003 [POS] Notification Push/POST to ThirdParty of Subscription" searchProperties="true" id="cc71647f-cc55-4914-bde1-6adfa59d0e44">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="e9716ee3-5184-41e2-9f0d-9411cbf1f4be"><con:settings/><con:config><script>log.info("[FB_39] PUSH Model -- PSH003 [POS] Notification Push/POST to ThirdParty of Subscription: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_39] PUSH Model -- PSH003 [POS]");</script></con:config></con:testStep><con:testStep type="groovy" name="Start Mock Service" id="96fac0e2-e0ef-4ac0-a9dd-2f3099c1576d"><con:settings/><con:config><script>// Verify BatchListNotification Mock Service is NOT running
if(testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner() != null) {

	log.info("[FB_34] SFTP for bulk (Start Mock Service) BatchListNotification Mock Service is running!");
	log.info("[FB_34] SFTP for bulk (Start Mock Service) Stopping BatchListNotification Mock Service!");
	testRunner.testCase.testSuite.project.getRestMockServiceByName("BatchListNotification").getMockRunner().stop();
	
}

def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");

service.setPropertyValue("rxNotificationBody","");

def runner = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service").start();
context.mockRunner = runner;

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to issue Notification message with Subscription Information" id="b4655dc6-de32-4751-93ea-ff5d374b7982"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;

//	Create addressability to global variables
def authCase = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def project = testRunner.testCase.testSuite.project;

// Extract current Subscription Id value from latest Authorization request resource URI
subscriptionId = authCase.getPropertyValue("resourceURI");
i = subscriptionId.lastIndexOf("/");
subscriptionId = subscriptionId.drop(i + 1);

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification that contains Subscription ID '" + subscriptionId + "' information.\r\n\
\r\n\
If you do not wish to proceed please click No.\r\n\
After the Notification has been issued please click Yes.\r\n";

result= ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Request DataCustodian to issue Notification message with Subscription information) Testing terminated by user.");
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Request DataCustodian to issue Notification message with Subscription information) Testing terminated by user.");
	return;	
}

assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="Stop Mock Service" id="d1ec108d-f5fc-4fe3-8b46-7760f765df70"><con:settings/><con:config><script>context.mockRunner.stop();
return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate notification and dispatch GET or SFTP step" id="e6f199fb-fcef-40a4-9415-74fc8b1adcaa"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def project = testRunner.testCase.testSuite.project;
//def service = testRunner.testCase.testSuite.project.getRestMockServiceByName("ThirdParty Notification Mock Service");
def service = project.getRestMockServiceByName("ThirdParty Notification Mock Service");

String strNotificationBody =  service.getPropertyValue("rxNotificationBody");
log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Notification Body:" + strNotificationBody);

if(!strNotificationBody) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) No notification received or empty notification body.");
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) No notification received or empty notification body.");
	return;	
}

def holder;
try{
	holder = groovyUtils.getXmlHolder(strNotificationBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Invalid notification body:" + e.toString());
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Invalid notification body.");
	return;
}


String strNotificationURI = holder.getNodeValue("//espi:BatchList/espi:resources")
log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Notification URI:" + strNotificationURI);

if(!strNotificationURI) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	return;	
}

if(strNotificationURI.startsWith("http://")) {

	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) notification must be for a Secured REST or SFTP resource.");
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) notification must be for a Secured REST or SFTP resource.");
	return

} else if(strNotificationURI.startsWith("https://")){

	String strHost = strNotificationURI.substring("https://".length());
	context.strResource = strNotificationURI.substring("https://".length()).substring(strHost.indexOf("/"));
	context.strHost = testRunner.testCase.testSuite.project.getPropertyValue("ServiceEndpoint");

	propTestStep = context.testCase.getTestStepByName("GET Subscription by Id");
	propTestStep.setPropertyValue("Endpoint",context.strHost + context.strResource);

	def headers = new StringToStringMap();
	headers.put("Content-Type","Application/atom+xml");
	String access_token = testRunner.testCase.testSuite.project.getPropertyValue("access_token");
	
	headers.put("Authorization","Bearer " + access_token);
	propTestStep.testRequest.setRequestHeaders(headers);

	log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Get Request Body: " + context.strHost + context.strResource);
	
	testRunner.gotoStepByName("GET Subscription by Id");
	
} else if(strNotificationURI.startsWith("sftp://")){

	String strHost = strNotificationURI.substring("sftp://".length());
	String strResource = strHost.substring(strHost.indexOf("/"));
	strHost = strNotificationURI.substring(0,strNotificationURI.indexOf(strResource));
	strHost = strHost.substring("sftp://".length());
	context.strHost = strHost;
	context.strResource = strResource;

	log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Get Request Body: " + context.strHost + context.strResource);
		
	testRunner.gotoStepByName("Issue SFTP get");
	
} else {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate notification and dispatch GET or SFTP step) Invalid URI supplied in the notification.");
	return;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 1" id="589c90c4-b31a-49a6-bbc5-ff83743243c4"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b3093c3f-4966-4426-8c83-9ebc1c4f5de3"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="groovy" name="Init Loop" id="1dc3e07b-7757-486a-9c08-1200850d0910"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [FB_39] PUSH Model (PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- Init Loop Script");

	context.loopCnt = 0;
	context.passCnt = 0;
	context.results = [];

log.info("**********  END  Execution ********** -- [FB_39] PUSH Model (PSH002 [POS] Notification Push/POST to ThirdParty of Subscription -- Init Loop Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Repeat GET up to 5 Times" id="edb7ce4c-3905-4bcc-8585-4237296be430"><con:settings/><con:config><script>log.info("********** START Execution ********** -- [FB_39] PUSH Model (PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- Repeat GET up to 5 Times Script");
	
	if(context.loopCnt&lt;5){
		
		def tStep = testRunner.testCase.testSteps["GET Subscription by Id"];

		long millisStart = System.currentTimeMillis();

		def result = tStep.run(testRunner, context);

		long millisStop = System.currentTimeMillis();
		long delta = millisStop - millisStart;

		if(result.status.toString().equals("OK")){
			context.passCnt++;
			def strResultA = "PASS: TIME DELTA=" + delta.toString();
			context.results.add(strResultA);

			// Done! stop test case
			context.results.each{strResult -> 
				log.info strResult;
			}
		
			log.info "iterations = " + (context.loopCnt + 1);
			log.info "pass count = " + context.passCnt;
			
			testRunner.gotoStepByName( "Done 2");
			return;
			
		} else {
			def strResult = "FAIL: TIME DELTA=" + delta.toString();
			context.results.add(strResult);
		}
		
		testRunner.gotoStepByName( "Repeat GET up to 5 Times");

		context.loopCnt++;	
	} else {
		context.results.each{strResult -> 
			log.info strResult;
		}
		
		log.info "iterations = " + context.loopCnt;
		log.info "pass count = " + context.passCnt;

		// if we get here we failed 5 times.
		log.error("Failed GET Subscription by ID");
		testRunner.fail("Failed GET Subscription by ID");
		
		testRunner.gotoStepByName( "Done 2");
	}

log.info("**********  END  Execution ********** -- [FB_39] PUSH Model (PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- Repeat GET up to 5 Times Script");	
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue GET OLD" id="d1280df2-c655-491b-b2d2-e31bd484b223" disabled="true"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doGET(String strBaseEndpoint,String href, String token) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		http.request( strBaseEndpoint, GET, TEXT ) { req ->
			uri.path = href
		     headers.Authorization = 'Bearer ' + token
			headers.Accept = 'application/atom+xml'
			
			response.success = { resp, reader ->
				_strResponseBody = reader.text;				
			}		
										
			response.failure = { resp ->
				log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue GET) GET Failed: " + resp.statusLine);
				return null;
			}  
		}
		return _strResponseBody;
	}	
}

String access_token = testRunner.testCase.testSuite.project.getPropertyValue("client_access_token");

ResourceTester resourceTester = new ResourceTester(log);

String strGetResponseBody = resourceTester.doGET(context.strHost,context.strResource,access_token);

if(strGetResponseBody==null) {
	log.error("GET request failed.");
	testRunner.fail("GET request failed.");
	return;	
}

context.ResponseBody = strGetResponseBody;

return;
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Subscription by Id" id="14d3a7f5-367f-4ae2-8f82-807ec7db7156"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="5af0e118-8d38-404b-8f1a-323bd9f696d6" name="GET Subscription by Id" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIkRFTU9fTjhTem5RMlBRZ1VIMVczdWgxOEU5bmgzVWc3IiwgImF1dGhfaWRzIjogWzExOTQ5OF0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTDB5Ond3Y0xvZkFYVzJYbVRwT3d4dG12cXVGd0ZWRQ"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8086/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119498</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="7c56d2fa-9281-495b-995a-1b09a7aa6ad8" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="ea60def8-5869-4680-8f72-652d1427850f" name="XPath Match"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
contains(//ns3:feed/ns3:link[@rel='self']/@href,'/Batch/Subscription')</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Validate REST GET response resource type and against schema" id="f71c831e-99ec-46b5-85b9-15f7817ca020"><con:settings/><con:config><script>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

propTestStep = testRunner.testCase.testSteps["GET Subscription by Id"];
context.ResponseBody = propTestStep.testRequest.response.responseContent;

log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate REST GET response resource type and against schema) Validating: " + context.ResponseBody);

def holder;
try{
	holder = groovyUtils.getXmlHolder(context.ResponseBody);
} catch(org.apache.xmlbeans.XmlException e) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate REST GET response resource type and against schema) Invalid response body: " + e.toString());
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate REST GET response resource type and against schema) Invalid response body.");
	return;
}

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");
Source instanceDocument = new StreamSource(new StringReader(context.ResponseBody));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
try {
	v.validate(instanceDocument);
} catch(org.xml.sax.SAXParseException e) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate REST GET response resource type and against schema) Response failed schema validation: " + e.toString());
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate REST GET response resource type and against schema) Response failed schema validation. See script log for details.");
	return;
}

testRunner.gotoStepByName("Done 2");
</script></con:config></con:testStep><con:testStep type="groovy" name="Issue SFTP get" id="a38ec702-d14d-41fb-992d-374b2079c67d"><con:settings/><con:config><script>import groovy.io.FileType;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

public boolean RunCommand(String cmd)
{
	def doCmd;

	log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) exec: " + cmd);
	log.info("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) os  : " + System.properties['os.name']);
	
	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute();
	} else {
		doCmd = ["bash", "-c",cmd].execute();
	}
	
	doCmd.waitFor();
	
	if(doCmd.exitValue()!=0) {
		
		log.error "PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) return code: ${ doCmd.exitValue()}"
		log.error "PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) stderr: ${doCmd.err.text}"
		log.error "PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) stdout: ${doCmd.in.text}"
	
		return false;
	}
	return true;
}

transferDir = groovyUtils.projectPath + "/../transferred";

def list = []
def dir = new File(transferDir);
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

if(list.size()>0){
	
	cmdRm = 'rm ' + transferDir +  '/*';
	
	if(RunCommand(cmdRm) != true) {
		log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) Could not clear transfer directory" + transferDir);
		testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) Could not clear transfer directory" + transferDir);
		return;
	} 
}

cmdGet = 'sftp ' + context.strHost + ':' + context.strResource + ' ' + transferDir;

if(RunCommand(cmdGet) != true) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) Could not issue SFTP GET");
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Issue SFTP get) Could not issue SFTP GET");
	return;
}

return;</script></con:config></con:testStep><con:testStep type="groovy" name="Validate retrieved files against schema" id="1bb28bff-6694-497b-bf5c-d88a8c0c5065"><con:settings/><con:config><script>import groovy.io.FileType;
import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(groovyUtils.projectPath + "/etc/atom.xsd");
schemaDocuments[1] = new StreamSource(groovyUtils.projectPath + "/etc/espiDerived.xsd");

def list = []
def dir = new File(groovyUtils.projectPath + "/../transferred")
dir.eachFileRecurse (FileType.FILES) { file ->
	list &lt;&lt; file
}

boolean bFailed = false;
list.each {
	log.info "PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate retrieved files against schema) Validating:" + it.path;

	def holder;
	try{
		holder = groovyUtils.getXmlHolder(new File(it.path).text);
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate retrieved files against schema) Invalid response body: " + e.toString());
		bFailed = true;
	}
	
	String strCount = "0";
	try{
		strCount = holder.getNodeValue("count(//espi:Subscription)")
	} catch(org.apache.xmlbeans.XmlException e) {
		log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate retrieved files against schema) Invalid response body. Cannot query response: " +  e.toString());
		bFailed = true;
	}

	if(strCount.toInteger()&lt;1){
		log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate retrieved files against schema) Response does not contain at least one Subscription entry.");
		bFailed = true;
	}
	
	Source instanceDocument = new StreamSource(new FileReader(it.path));
	
	SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
	Schema s = sf.newSchema(schemaDocuments);
	Validator v = s.newValidator();

	try {
		v.validate(instanceDocument);
	} catch(org.xml.sax.SAXParseException e) {
	log.error("PSH003 [POS] Notification Push/POST to ThirdParty of Authorization -- (Validate retrieved files against schema) Response failed schema validation: " + e.toString());		bFailed = true;
	}
}

if(bFailed) {
	testRunner.fail("PSH003 [POS] Notification Push/POST to ThirdParty of Subscription -- (Validate retrieved files against schema) One or more response files failed validation. See script log for details.");
}

return;
</script></con:config></con:testStep><con:testStep type="groovy" name="Done 2" id="b612481f-981a-46ca-abee-6e35c51782d2"><con:settings/><con:config><script/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSH004 [NEG] DataCustodian detection of Notification Push/POST failure" searchProperties="true" id="175be4f5-d948-42c4-82f4-151664467366">
		<con:settings/>
		<con:testStep type="groovy" name="Update Dialog CMD TestStep" id="744fba76-9ab6-4a08-8f9c-65abccea0264"><con:settings/><con:config><script>log.info("[FB_39] PUSH Model -- PSH004 [NEG] DataCustodian detection of Notification Push/POST failure: Starting");

def project = testRunner.testCase.testSuite.project;

project.setPropertyValue("CMDTestStep", "[FB_39] PUSH Model -- PSH004 [NEG]");</script></con:config></con:testStep><con:testStep type="groovy" name="Stop stunnel (teardown restarts it)" id="d5a5bdad-0ef2-404d-90ca-05add171e0c7"><con:settings/><con:config><script>//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
//def ui = com.eviware.soapui.support.UISupport;

def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue("authorizationServerPort");
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue("resourceServerPort");
def mockPort = project.getPropertyValue("mockPort");
def proxyOutPort = project.getPropertyValue("proxyOutPort");
def proxyOutPort1 = project.getPropertyValue("proxyOutPort1");


if (System.properties['os.name'].toLowerCase().contains('windows')) {
	crlf = crlf;
} else {
	crlf = "\n";
}


// Stop and restart Stunnel
tc.setPropertyValue("cmd",project.getPropertyValue("StunnelStatusCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000

tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStopCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000;

if(tc.getPropertyValue("returncode").toInteger() > 1) {
	log.error("Stunnel Stop cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
	log.error("Stunnel Stop cmd Error: " + tc.getPropertyValue("stderr"));
	testRunner.fail("Stunnel Stop cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Request DataCustodian to issue Notification message" id="bf3f772d-e742-4727-93f9-8da1b5d46154"><con:settings/><con:config><script>def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project;

strMessage = project.getPropertyValue("CMDTestStep") + "\n\n"
//String strDialog = "Request Data Custodian to manually initiate a Notification.\r\n\
strMessage = strMessage + "Request Data Custodian to manually initiate a Notification.\r\n\
Determine if the Data Custodian detected the Notification failed.\r\n\
\r\n\
If the Data Custodian detected the failure, Click Yes.\r\n\
If the Data Custodian failed to detect the failure, Click No.\r\n";

//result = ui.getDialogs().confirm(strDialog, "Continue Tests");
result= ui.getDialogs().confirm(strMessage, "Continue Tests");

if(result==false) {
	log.error("PSH004 [POS] DataCustodian detection of Notification Push/POST failure -- (Request DataCustodian to issue Notification message) Data Custodian failed to detect the Notification failed.");
	testRunner.fail("PSH004 [POS] DataCustodian detection of Notification Push/POST failure -- (Request DataCustodian to issue Notification message) Data Custodian failed to detect the Notification failed.");
	return;	
}

assert true;</script></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
//def ui = com.eviware.soapui.support.UISupport;

def project = testRunner.testCase.testSuite.project
def tc= testRunner.testCase.testSuite.project.testSuites['Library'].testCases['RunCommand'];

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def authorizationServer = project.getPropertyValue( "authorizationServerIP" ) + ":" + project.getPropertyValue("authorizationServerPort");
def resourceServer = project.getPropertyValue( "resourceServerIP" ) + ":" + project.getPropertyValue("resourceServerPort");
def mockPort = project.getPropertyValue("mockPort");
def proxyOutPort = project.getPropertyValue("proxyOutPort");
def proxyOutPort1 = project.getPropertyValue("proxyOutPort1");


if (System.properties['os.name'].toLowerCase().contains('windows')) {
	crlf = crlf;
} else {
	crlf = "\n";
}




tc.setPropertyValue("cmd",project.getPropertyValue("stunnelStartCmd"));
tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
sleep 3000;

if(tc.getPropertyValue("returncode").toInteger() > 1) {
	log.error("Stunnel Start cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
	log.error("Stunnel Start cmd Error: " + tc.getPropertyValue("stderr"));
	testRunner.fail("Stunnel Start cmd Failed! -- return code: " + tc.getPropertyValue("returncode"));
} else {

	tc.setPropertyValue("cmd",project.getPropertyValue("StunnelStatusCmd"));
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false);
	sleep 3000
}


log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/>
	</con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite><con:testSuite name="[FB_40] Offline Authorization" id="8a08c4be-d0a0-4f25-9b69-43bda861caab">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OFA001 [POS] Offline RetailCustomer Authorization" searchProperties="true" id="2aa6a54b-20c9-4156-8825-070c935268c9"><con:settings/><con:testStep type="groovy" name="Supply Configuration Information" id="be67c591-4dfa-4035-a569-02476f83624c"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

def ui = com.eviware.soapui.support.UISupport;
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert_target.conf").toURL())


testRunner.testCase.testSuite.setPropertyValue("authorizationId",config.optionalOfflineAuthorizationID);
testRunner.testCase.testSuite.setPropertyValue("access_token",config.optionalOfflineAccess_token);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Authorization by Id" id="487686ad-07bf-4bc9-a958-e7c692f96842"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authorizationId" value="groovy.util.ConfigObject@60b14fb1" xmlns="http://eviware.com/soapui/config"/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8d0ab582-9c86-4a9d-a3cf-11c2e15d6f7c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="12dbfe5b-65f9-4792-a976-b9c62c9db635"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="52eb3806-9361-47aa-ab68-fa2f6923356d"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';

/ns3:entry/ns3:content/espi:Authorization/espi:authorizedPeriod and 
/ns3:entry/ns3:content/espi:Authorization/espi:publishedPeriod and
/ns3:entry/ns3:content/espi:Authorization/espi:expires_at and 
/ns3:entry/ns3:content/espi:Authorization/espi:scope and
/ns3:entry/ns3:content/espi:Authorization/espi:token_type and 
/ns3:entry/ns3:content/espi:Authorization/espi:resourceURI and
/ns3:entry/ns3:content/espi:Authorization/espi:authorizationURI and
( not(/ns3:entry/ns3:content/espi:Authorization/espi:status) or (ns3:entry/ns3:content/espi:Authorization/espi:status='0') or (ns3:entry/ns3:content/espi:Authorization/espi:status='1') or (ns3:entry/ns3:content/espi:Authorization/espi:status='2'))</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#client_access_token}"/>
  <con:entry key="authorizationId" value="${#TestSuite#authorizationId}"/>
</con:parameters>
		<con:parameterOrder>
			<con:entry>authorizationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer - resourceURI/endpoint" id="7effaebd-34cc-40fc-939a-ef831ff548da"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Copy resourceURI</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:sourcePath>declare namespace ns3='http://www.w3.org/2005/Atom';
declare namespace espi='http://naesb.org/espi';
//espi:resourceURI</con:sourcePath><con:targetType>Endpoint</con:targetType><con:targetStep>GET Resource URI</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Setup headers" id="c927449f-0646-4f66-9ab2-ce8c3b710ac6"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap;

//def propCreateAuthResults  = testRunner.testCase.testSuite.project.testSuites['Library'].testCases['Create Authorization and extract all information'];

propTestStep = context.testCase.getTestStepByName("GET Resource URI");
def headers = new StringToStringMap();

//propTestStep.setPropertyValue("Endpoint",propCreateAuthResults.getPropertyValue("resourceURI"));
headers.put("Authorization","Bearer " + testRunner.testCase.testSuite.getPropertyValue("access_token"));
headers.put("Content-Type","Application/atom+xml");
propTestStep.testRequest.setRequestHeaders(headers);</script></con:config></con:testStep><con:testStep type="httprequest" name="GET Resource URI" id="b2aada59-5b0b-482e-ac9f-d714b0cd7861"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Resource URI" id="1278aeeb-0f2e-4e21-9c54-fe6712107a30" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer eyJyZWZyZXNoX2lkIjogIm1hbnVhbF9zaWduIiwgInJvb3QiOiAiaHR0cHM6Ly9zYW5kYm94LnV0aWxpdHlhcGkuY29tIiwgImV4cGlyZXMiOiAzMTUzNjAwMCwgImF1dGhfaWRzIjogWzEwNTgzNl0sICJzY29wZSI6ICJGQj00XzE2XzM5XzQ2IiwgInR5cGUiOiAiZ2JjX2F1dGgiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ0lmdGE6WHlGanpFa2RncGlZaWZ0SnNKTHNhM1FCMzY4"/>
  &lt;con:entry key="Content-Type" value="Application/atom+xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://sandbox.utilityapi.com:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_105836</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b256a395-88aa-408d-98ca-3d65f215e4d4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Schema Validation" id="333889e9-0ff6-4375-9c86-3b59f9230f09"><con:configuration><scriptText>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

String strSchemaFile1 = groovyUtils.projectPath + "/etc/atom.xsd";
String strSchemaFile2 = groovyUtils.projectPath + "/etc/espiDerived.xsd";

String response = messageExchange.response.contentAsString;
log.info("validating: " + response);

StreamSource[] schemaDocuments = new StreamSource[2];
schemaDocuments[0] = new StreamSource(strSchemaFile1);
schemaDocuments[1] = new StreamSource(strSchemaFile2);
Source instanceDocument = new StreamSource(new StringReader(response));

SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema s = sf.newSchema(schemaDocuments);
Validator v = s.newValidator();
v.validate(instanceDocument);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:properties><con:property><con:name>authorizationId</con:name><con:value>1dfa07c5740a_105836</con:value></con:property><con:property><con:name>access_token</con:name><con:value>eyJyZWZyZXNoX2lkIjogIm1hbnVhbF9zaWduIiwgInJvb3QiOiAiaHR0cHM6Ly9zYW5kYm94LnV0aWxpdHlhcGkuY29tIiwgImV4cGlyZXMiOiAzMTUzNjAwMCwgImF1dGhfaWRzIjogWzEwNTgzNl0sICJzY29wZSI6ICJGQj00XzE2XzM5XzQ2IiwgInR5cGUiOiAiZ2JjX2F1dGgiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ0lmdGE6WHlGanpFa2RncGlZaWZ0SnNKTHNhM1FCMzY4</con:value></con:property></con:properties>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite><con:testSuite name="[FB_41] Manage  Authorization Resource" id="d7480fe5-0302-4e65-8a08-d2d7547859e2">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MGA001 [POS][C] Authorized PUT access to Authorization entry" searchProperties="true" id="b6ad0acd-1bc9-478d-8d2e-8ba8f6e55fe6"><con:settings/><con:testStep type="restrequest" name="GET Authorization by Id" id="2fb62194-252f-49d2-89fb-36ae379c992f"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="dc474264-ba86-4604-ac66-c169f8cc7426"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="f97c22d1-1fe1-4651-9fcc-33d7fbcc9b2f"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
						declare namespace espi='http://naesb.org/espi';

						count(/ns3:entry/ns3:content/espi:Authorization/espi:authorizedPeriod)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>authorizationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="0058ce37-c239-459d-8ece-54b98c84bc32"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Copy GET response body to PUT request body</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT - Authorization entry</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT - Authorization entry" id="e901ff7d-aac2-4776-8bab-dbdccaf7b642"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - Authorization entry" mediaType="application/json" postQueryString="false" id="b4a978a4-934b-4545-b73a-ff2fbb6e8b61"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:0bc23b7b-eaf2-47d9-933d-9bf18853f0a2</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000390" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:status>1</espi:status>
         <espi:expires_at>86399999</espi:expires_at>
         <espi:scope>FB=36_40</espi:scope>
         <espi:token_type>Bearer</espi:token_type>
         <espi:resourceURI>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:resourceURI>
         <espi:authorizationURI>https://api.londonhydro.com/espi/1_1/resource//Authorization/1000000390</espi:authorizationURI>
      </espi:Authorization>
   </content>
   <published>2016-08-11T20:25:18Z</published>
   <updated>2016-08-11T20:25:18Z</updated>
</entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b0adbe6b-03d7-40ab-b782-cee7ae002d34"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MGA002 [POS][C] Authorized DELETE access to Authorization entry" searchProperties="true" id="ff15fe7e-30a0-458a-b636-9f0aa9d878d9"><con:settings/><con:testStep type="restrequest" name="GET Authorization by Id" id="0f491062-88a3-47b1-a5d4-e502f45a0ebc"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="305c9616-1aea-4d6a-96d8-1111015f6afe"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="ffb7a4ac-ae94-490f-b1cb-ac0507427d54"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
					declare namespace espi='http://naesb.org/espi';

					count(/ns3:entry/ns3:content/espi:Authorization/espi:authorizedPeriod)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>authorizationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="d268bf27-6ca3-4da4-9411-6b2b050bc9ed"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Copy GET response body to PUT request body</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT - Authorization entry</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DELETE" id="70c84181-20d8-4f71-b0a5-c7e2c2360c99"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE" mediaType="application/json" id="91a52e47-6bd1-4f6d-86f6-444e1583b6ce">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b0aa6f64-05e0-4c26-8c09-cf57ed93d0c8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>authorizationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT - Authorization entry" id="f0dcc9a6-9401-46de-9991-796962c582e4"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - Authorization entry" mediaType="application/json" postQueryString="false" id="5d223aed-506b-4dd3-963c-8f9220d39e35"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:0bc23b7b-eaf2-47d9-933d-9bf18853f0a2</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000390" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:status>1</espi:status>
         <espi:expires_at>86399999</espi:expires_at>
         <espi:scope>FB=36_40</espi:scope>
         <espi:token_type>Bearer</espi:token_type>
         <espi:resourceURI>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:resourceURI>
         <espi:authorizationURI>https://api.londonhydro.com/espi/1_1/resource//Authorization/1000000390</espi:authorizationURI>
      </espi:Authorization>
   </content>
   <published>2016-08-11T20:25:18Z</published>
   <updated>2016-08-11T20:25:18Z</updated>
</entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="dad87f11-6f7a-4288-b9b6-8543c3d65188"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MGA003 [NEG][R,A,none] Forbidden  PUT, DELETE access to Authorization entry" searchProperties="true" id="ccd9f8ea-70dd-429d-bbdf-0f08c69665e7"><con:settings/><con:testStep type="restrequest" name="GET Authorization by Id" id="95945fd4-83c2-447c-ac6c-1771c3c695f8"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2d6b2f52-0603-4b0b-afcb-c50e81efd203"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="cb4cb4af-85c4-414c-b4d4-15f14632f844"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
					declare namespace espi='http://naesb.org/espi';

					count(/ns3:entry/ns3:content/espi:Authorization/espi:authorizedPeriod)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>authorizationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="2fcbb385-db96-40db-b055-a96fcda3f2b6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Copy GET response body to PUT request body</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>positive PUT - Authorization entry to restore original value</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Copy GET response to PUT R token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT - Authorization entry using R token</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Copy GET response to PUT A token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT - Authorization entry using A token</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>Copy GET response to PUT empty token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET Authorization by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT - Authorization entry using empty token</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DELETE using R token" id="e04468d5-5284-4442-8337-adc0845bad16"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE using R token" mediaType="application/json" id="91a52e47-6bd1-4f6d-86f6-444e1583b6ce">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1dd9f235-d58f-483c-861a-0d50da4f064b"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>authorizationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE using A token" id="6c25b1b6-faf3-4b33-b9ad-56b8b549b983"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE using A token" mediaType="application/json" id="91a52e47-6bd1-4f6d-86f6-444e1583b6ce">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f036c3a2-9f8e-4d07-87eb-f0b89d6fc2db"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>authorizationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE using empty token" id="641328dd-d71d-48a6-b44d-ab50a71ab683"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE using empty token" mediaType="application/json" id="91a52e47-6bd1-4f6d-86f6-444e1583b6ce">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="65d41ee2-6a34-466e-94a9-cda8890377b3"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>authorizationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT - Authorization entry using R token" id="79b989be-d734-492b-89f5-6753741d3aed"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - Authorization entry using R token" mediaType="application/json" postQueryString="false" id="70cd5348-f87a-46af-a33b-8251ac347ff5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:0bc23b7b-eaf2-47d9-933d-9bf18853f0a2</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000390" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:status>1</espi:status>
         <espi:expires_at>86399999</espi:expires_at>
         <espi:scope>FB=36_40</espi:scope>
         <espi:token_type>Bearer</espi:token_type>
         <espi:resourceURI>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:resourceURI>
         <espi:authorizationURI>https://api.londonhydro.com/espi/1_1/resource//Authorization/1000000390</espi:authorizationURI>
      </espi:Authorization>
   </content>
   <published>2016-08-11T20:25:18Z</published>
   <updated>2016-08-11T20:25:18Z</updated>
</entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="defa3633-a6b0-4c60-a68e-6ba24f52270f"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT - Authorization entry using A token" id="6d4e2271-dc09-4c82-9715-10d803a92061"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - Authorization entry using A token" mediaType="application/json" postQueryString="false" id="1406e418-bcdf-4df3-8d5d-d9affecc5c43"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:0bc23b7b-eaf2-47d9-933d-9bf18853f0a2</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000390" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:status>1</espi:status>
         <espi:expires_at>86399999</espi:expires_at>
         <espi:scope>FB=36_40</espi:scope>
         <espi:token_type>Bearer</espi:token_type>
         <espi:resourceURI>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:resourceURI>
         <espi:authorizationURI>https://api.londonhydro.com/espi/1_1/resource//Authorization/1000000390</espi:authorizationURI>
      </espi:Authorization>
   </content>
   <published>2016-08-11T20:25:18Z</published>
   <updated>2016-08-11T20:25:18Z</updated>
</entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a6947569-31a6-4549-81ff-ed7a1b7cf2a5"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT - Authorization entry using empty token" id="91a09144-b970-4dd8-831f-43d8231b0c9f"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - Authorization entry using empty token" mediaType="application/json" postQueryString="false" id="2cf2e613-3267-45b2-aee3-a2bf0c836636"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:0bc23b7b-eaf2-47d9-933d-9bf18853f0a2</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000390" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:status>1</espi:status>
         <espi:expires_at>86399999</espi:expires_at>
         <espi:scope>FB=36_40</espi:scope>
         <espi:token_type>Bearer</espi:token_type>
         <espi:resourceURI>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:resourceURI>
         <espi:authorizationURI>https://api.londonhydro.com/espi/1_1/resource//Authorization/1000000390</espi:authorizationURI>
      </espi:Authorization>
   </content>
   <published>2016-08-11T20:25:18Z</published>
   <updated>2016-08-11T20:25:18Z</updated>
</entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="729b5227-8efe-4d69-aec2-2ad93958ecf5"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="positive PUT - Authorization entry to restore original value" id="555774c7-6109-4edc-8929-8411935b446e"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="positive PUT - Authorization entry to restore original value" mediaType="application/json" postQueryString="false" id="b9311af4-2a2a-4556-8ee1-5c5a8ffda33a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:0bc23b7b-eaf2-47d9-933d-9bf18853f0a2</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/Authorization/1000000390" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <content>
      <espi:Authorization>
         <espi:authorizedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:authorizedPeriod>
         <espi:publishedPeriod>
            <espi:duration>0</espi:duration>
            <espi:start>0</espi:start>
         </espi:publishedPeriod>
         <espi:status>1</espi:status>
         <espi:expires_at>86399999</espi:expires_at>
         <espi:scope>FB=36_40</espi:scope>
         <espi:token_type>Bearer</espi:token_type>
         <espi:resourceURI>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:resourceURI>
         <espi:authorizationURI>https://api.londonhydro.com/espi/1_1/resource//Authorization/1000000390</espi:authorizationURI>
      </espi:Authorization>
   </content>
   <published>2016-08-11T20:25:18Z</published>
   <updated>2016-08-11T20:25:18Z</updated>
</entry>]]></con:request><con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c0325112-0ca3-4640-9ada-7616037fdb21"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite><con:testSuite name="[FB_44] Manage ApplicationInformation Resource" id="23bba42f-e280-4812-966c-13f28353efee">
	<con:settings/>
	<con:runType>SEQUENTIAL</con:runType>
	<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MGT001[POS][R] Authorized PUT access to ApplicationInformation entry" searchProperties="true" id="fe8f8abd-621b-47d7-a09a-07d30075dbb0"><con:settings/><con:testStep type="restrequest" name="GET ApplicationInformation by Id" id="9dbf62e8-c24e-460a-9c1e-4922c0a3f64e"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3eeb279a-7bc8-4f68-9838-c18ffff3ef4a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="26f010ca-da2e-44cb-a33d-aeea7c25eb22"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
					declare namespace espi='http://naesb.org/espi';
					count(/ns3:entry/ns3:content/espi:ApplicationInformation)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters/>
		<con:parameterOrder>
			<con:entry>applicationInformationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="4b0fa1a3-c58c-44b9-b943-03e127738e9a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>copy body of GET to PUT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT ApplicationInformation by Id</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT ApplicationInformation by Id" id="21c61bd0-b57e-435b-9452-ae1bb97d575a"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT ApplicationInformation by Id" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<entry xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom">
   <id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</id>
   <link href="https://localhost:8443/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
   <link href="https://localhost:8443/DataCustodian/espi/1_1/resource/ApplicationInformation/4" rel="self"/>
   <title>GreenButtonData.org  ThirdParty Application</title>
   <content>
      <espi:ApplicationInformation>
         <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
         <espi:dataCustodianApplicationStatus>1</espi:dataCustodianApplicationStatus>
         <espi:thirdPartyApplicationDescription>EnergyOS OpenESPI Example Third Party</espi:thirdPartyApplicationDescription>
         <espi:thirdPartyApplicationStatus>1</espi:thirdPartyApplicationStatus>
         <espi:thirdPartyApplicationType>1</espi:thirdPartyApplicationType>
         <espi:thirdPartyApplicationUse>1</espi:thirdPartyApplicationUse>
         <espi:authorizationServerUri>https://localhost:8443/DataCustodian/</espi:authorizationServerUri>
         <espi:thirdPartyNotifyUri>https://localhost:8444/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
         <espi:authorizationServerAuthorizationEndpoint>https://localhost:8443/DataCustodian/oauth/authorize</espi:authorizationServerAuthorizationEndpoint>
         <espi:authorizationServerRegistrationEndpoint>https://localhost:8443/DataCustodian/espi/1_1/register</espi:authorizationServerRegistrationEndpoint>
         <espi:authorizationServerTokenEndpoint>https://localhost:8443/DataCustodian/oauth/token</espi:authorizationServerTokenEndpoint>
         <espi:dataCustodianBulkRequestURI>https://localhost:8443/DataCustodian/espi/1_1/resource/Batch/Bulk</espi:dataCustodianBulkRequestURI>
         <espi:dataCustodianResourceEndpoint>https://localhost:8443/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
         <espi:thirdPartyScopeSelectionScreenURI>https://localhost:8444/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
         <espi:thirdPartyUserPortalScreenURI>https://localhost:8444/ThirdParty</espi:thirdPartyUserPortalScreenURI>
         <espi:client_secret>secret</espi:client_secret>
         <espi:logo_uri>https://localhost:8444/ThirdParty/resources/ico/favicon.png</espi:logo_uri>
         <espi:client_name>Green Button Third Party</espi:client_name>
         <espi:client_uri>https://localhost:8444/ThirdParty</espi:client_uri>
         <espi:redirect_uri>https://localhost:8444/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
         <espi:client_id>surface_tp</espi:client_id>
         <espi:software_id>EnergyOS OpenESPI Example Third Party</espi:software_id>
         <espi:software_version>1.2</espi:software_version>
         <espi:client_id_issued_at>1403190000</espi:client_id_issued_at>
         <espi:client_secret_expires_at>0</espi:client_secret_expires_at>
         <espi:contacts>john.teeter@energyos.org,martin.burns@nist.gov,donald.coffin@reminetworks.com</espi:contacts>
         <espi:token_endpoint_auth_method>client_secret_basic</espi:token_endpoint_auth_method>
         <espi:scope>FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=1_3_4_5_13_14_15_39;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=1_3_4_5_6_7_8_9_10_11_29_12_13_14_15_16_17_18_19_27_28_32_33_34_35_37_38_39_40_41_44;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:grant_types>refresh_token</espi:grant_types>
         <espi:grant_types>authorization_code</espi:grant_types>
         <espi:grant_types>client_credentials</espi:grant_types>
         <espi:response_types>token</espi:response_types>
         <espi:registration_client_uri>https://localhost:8443/DataCustodian/espi/1_1/resource/ApplicationInformation/4</espi:registration_client_uri>
         <espi:registration_access_token>d89bb056-0f02-4d47-9fd2-ec6a19ba8d0c</espi:registration_access_token>
         <espi:dataCustodianScopeSelectionScreenURI>https://localhost:8443/DataCustodian/RetailCustomer/ScopeSelectionList?ThirdPartyID=surface_tp</espi:dataCustodianScopeSelectionScreenURI>
      </espi:ApplicationInformation>
   </content>
   <published>2014-01-02T10:00:00Z</published>
   <updated>2014-01-02T10:00:00Z</updated>
</entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e43c7612-6760-4c71-b7cc-bb914d076efa"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MGT002[POS][R] Authorized DELETE access to ApplicationInformation entry" searchProperties="true" id="f5cee5fb-118e-4dcc-a3cc-bbff7f2d5748"><con:settings/><con:testStep type="restrequest" name="GET ApplicationInformation by Id" id="b9fec435-2bac-41b2-9beb-c263cdc5c246"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
			</con:settings>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:request/>
			<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
			<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="79d141e1-3b62-4ebf-963e-ed46832be8cd"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="def44a1f-2e75-411c-af8c-e9246af947ab"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
						declare namespace espi='http://naesb.org/espi';
						count(/ns3:entry/ns3:content/espi:ApplicationInformation)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
				<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
				<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
				<con:authType>Global HTTP Settings</con:authType>
			</con:credentials>
			<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
			<con:jmsPropertyConfig/>
			<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
			<con:parameterOrder>
				<con:entry>applicationInformationId</con:entry>
				<con:entry>Authorization</con:entry>
				<con:entry>Content-Type</con:entry>
			</con:parameterOrder>
		</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="de0dde0b-c864-4d71-8b3a-e109d8dc51c2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>copy body of GET to PUT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT ApplicationInformation by Id</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DELETE ApplicationInformation by Id" id="f569e0b0-a54d-433b-85e8-7a32dbfc1549"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE ApplicationInformation by Id" mediaType="application/json" id="9ef70ba4-9a57-4ff5-a02e-b693213d9dc0">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="544caaaa-6877-4afa-a9b5-529ac16384e8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#client_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT ApplicationInformation by Id" id="9df96ab1-56a9-4a4d-b45d-88b13bd5e517"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT ApplicationInformation by Id" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:a5dee759-9acc-498d-9b6a-b5097c920008</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <title/>
   <content>
      <espi:ApplicationInformation>
         <espi:dataCustodianId>LondonHydro</espi:dataCustodianId>
         <espi:dataCustodianApplicationStatus>1</espi:dataCustodianApplicationStatus>
         <espi:thirdPartyApplicationDescription>CMD Certification</espi:thirdPartyApplicationDescription>
         <espi:thirdPartyApplicationStatus>3</espi:thirdPartyApplicationStatus>
         <espi:thirdPartyApplicationType>3</espi:thirdPartyApplicationType>
         <espi:thirdPartyApplicationUse>1</espi:thirdPartyApplicationUse>
         <espi:thirdPartyPhone>5196615800</espi:thirdPartyPhone>
         <espi:authorizationServerUri>https://greenbutton.londonhydro.com</espi:authorizationServerUri>
         <espi:thirdPartyNotifyUri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
         <espi:authorizationServerAuthorizationEndpoint>https://greenbutton.londonhydro.com/oauth/authorize</espi:authorizationServerAuthorizationEndpoint>
         <espi:authorizationServerTokenEndpoint>https://greenbutton.londonhydro.com/oauth/token</espi:authorizationServerTokenEndpoint>
         <espi:dataCustodianBulkRequestURI>https://api.londonhydro.com/espi/1_1/resource/Bulk/8</espi:dataCustodianBulkRequestURI>
         <espi:dataCustodianResourceEndpoint>https://api.londonhydro.com/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
         <espi:thirdPartyScopeSelectionScreenURI>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
         <espi:thirdPartyUserPortalScreenURI>https://cmdcertdev.greenbuttonalliance.org</espi:thirdPartyUserPortalScreenURI>
         <espi:client_secret>Gigt2CaoDyrpVx7</espi:client_secret>
         <espi:logo_uri>http://www.greenbuttonalliance.org/assets/site/gba-logo.png</espi:logo_uri>
         <espi:client_name>Test Client</espi:client_name>
         <espi:client_uri>https://cmdcertdev.greenbuttonalliance.org</espi:client_uri>
         <espi:redirect_uri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
         <espi:client_id>third_party</espi:client_id>
         <espi:tos_uri>https://www.londonhydro.com</espi:tos_uri>
         <espi:policy_uri>https://www.londonhydro.com</espi:policy_uri>
         <espi:software_id>v0001</espi:software_id>
         <espi:software_version>1.0</espi:software_version>
         <espi:client_id_issued_at>1470948388</espi:client_id_issued_at>
         <espi:client_secret_expires_at>2147483647</espi:client_secret_expires_at>
         <espi:contacts>5196615800</espi:contacts>
         <espi:token_endpoint_auth_method>client_secret_basic</espi:token_endpoint_auth_method>
         <espi:scope>FB=10;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</espi:scope>
         <espi:scope>FB=11;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:grant_types>authorization_code</espi:grant_types>
         <espi:grant_types>refresh_token</espi:grant_types>
         <espi:response_types>code</espi:response_types>
         <espi:registration_client_uri>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:registration_client_uri>
         <espi:registration_access_token>682f6064-a28b-42b8-b693-5bdbe8f06bce</espi:registration_access_token>
         <espi:dataCustodianScopeSelectionScreenURI>https://greenbutton.londonhydro.com/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</espi:dataCustodianScopeSelectionScreenURI>
      </espi:ApplicationInformation>
   </content>
   <published>2015-06-02T21:45:10Z</published>
   <updated>2015-06-02T21:45:10Z</updated>
</entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="87bbba34-0c1c-4eba-b8b3-3b6595fa2a57"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MGT003 [NEG][C,A,NONE] Forbidden PUT, DELETE access to ApplicationInformation entry" searchProperties="true" id="9f227f0e-0901-4fc9-a310-a6b58be2daea"><con:settings/><con:testStep type="restrequest" name="GET ApplicationInformation by Id" id="930d1b3b-d61a-49ae-bc4a-672c75ce49e9"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
		<con:request/>
		<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
		<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2e7a8f63-d873-4264-8d90-50196bc65ac1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match" id="88f8e511-65f0-4950-ac28-8e60ccdedc61"><con:configuration><path>declare namespace ns3='http://www.w3.org/2005/Atom';
					declare namespace espi='http://naesb.org/espi';
					count(/ns3:entry/ns3:content/espi:ApplicationInformation)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
			<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
			<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
			<con:authType>Global HTTP Settings</con:authType>
		</con:credentials>
		<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
		<con:parameterOrder>
			<con:entry>applicationInformationId</con:entry>
			<con:entry>Authorization</con:entry>
			<con:entry>Content-Type</con:entry>
		</con:parameterOrder>
	</con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="a594bda8-ca28-4436-89eb-4a1ed5e4ba35"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>copy body of GET to PUT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT ApplicationInformation by Id</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Copy body of GET to PUT by C</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT ApplicationInformation by Id using registration_access_token</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>copy body of GET to PUT by A</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT ApplicationInformation by Id using access_token</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false"><con:name>Copy GET response body to PUT with no access token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GET ApplicationInformation by Id</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>PUT ApplicationInformation by Id with no access token</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT ApplicationInformation by Id using registration_access_token" id="b1bea813-7c89-4195-9687-bb6cbcc29a07"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT ApplicationInformation by Id using registration_access_token" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:a5dee759-9acc-498d-9b6a-b5097c920008</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <title/>
   <content>
      <espi:ApplicationInformation>
         <espi:dataCustodianId>LondonHydro</espi:dataCustodianId>
         <espi:dataCustodianApplicationStatus>1</espi:dataCustodianApplicationStatus>
         <espi:thirdPartyApplicationDescription>CMD Certification</espi:thirdPartyApplicationDescription>
         <espi:thirdPartyApplicationStatus>3</espi:thirdPartyApplicationStatus>
         <espi:thirdPartyApplicationType>3</espi:thirdPartyApplicationType>
         <espi:thirdPartyApplicationUse>1</espi:thirdPartyApplicationUse>
         <espi:thirdPartyPhone>5196615800</espi:thirdPartyPhone>
         <espi:authorizationServerUri>https://greenbutton.londonhydro.com</espi:authorizationServerUri>
         <espi:thirdPartyNotifyUri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
         <espi:authorizationServerAuthorizationEndpoint>https://greenbutton.londonhydro.com/oauth/authorize</espi:authorizationServerAuthorizationEndpoint>
         <espi:authorizationServerTokenEndpoint>https://greenbutton.londonhydro.com/oauth/token</espi:authorizationServerTokenEndpoint>
         <espi:dataCustodianBulkRequestURI>https://api.londonhydro.com/espi/1_1/resource/Bulk/8</espi:dataCustodianBulkRequestURI>
         <espi:dataCustodianResourceEndpoint>https://api.londonhydro.com/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
         <espi:thirdPartyScopeSelectionScreenURI>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
         <espi:thirdPartyUserPortalScreenURI>https://cmdcertdev.greenbuttonalliance.org</espi:thirdPartyUserPortalScreenURI>
         <espi:client_secret>Gigt2CaoDyrpVx7</espi:client_secret>
         <espi:logo_uri>http://www.greenbuttonalliance.org/assets/site/gba-logo.png</espi:logo_uri>
         <espi:client_name>Test Client</espi:client_name>
         <espi:client_uri>https://cmdcertdev.greenbuttonalliance.org</espi:client_uri>
         <espi:redirect_uri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
         <espi:client_id>third_party</espi:client_id>
         <espi:tos_uri>https://www.londonhydro.com</espi:tos_uri>
         <espi:policy_uri>https://www.londonhydro.com</espi:policy_uri>
         <espi:software_id>v0001</espi:software_id>
         <espi:software_version>1.0</espi:software_version>
         <espi:client_id_issued_at>1470948388</espi:client_id_issued_at>
         <espi:client_secret_expires_at>2147483647</espi:client_secret_expires_at>
         <espi:contacts>5196615800</espi:contacts>
         <espi:token_endpoint_auth_method>client_secret_basic</espi:token_endpoint_auth_method>
         <espi:scope>FB=10;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</espi:scope>
         <espi:scope>FB=11;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:grant_types>authorization_code</espi:grant_types>
         <espi:grant_types>refresh_token</espi:grant_types>
         <espi:response_types>code</espi:response_types>
         <espi:registration_client_uri>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:registration_client_uri>
         <espi:registration_access_token>682f6064-a28b-42b8-b693-5bdbe8f06bce</espi:registration_access_token>
         <espi:dataCustodianScopeSelectionScreenURI>https://greenbutton.londonhydro.com/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</espi:dataCustodianScopeSelectionScreenURI>
      </espi:ApplicationInformation>
   </content>
   <published>2015-06-02T21:45:10Z</published>
   <updated>2015-06-02T21:45:10Z</updated>
</entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4c803565-2e15-4c10-a1d0-7c2886403dfa"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT ApplicationInformation by Id using access_token" id="4c40ae0b-c3b2-4774-8324-e92eec4ae14d"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT ApplicationInformation by Id using access_token" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:a5dee759-9acc-498d-9b6a-b5097c920008</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <title/>
   <content>
      <espi:ApplicationInformation>
         <espi:dataCustodianId>LondonHydro</espi:dataCustodianId>
         <espi:dataCustodianApplicationStatus>1</espi:dataCustodianApplicationStatus>
         <espi:thirdPartyApplicationDescription>CMD Certification</espi:thirdPartyApplicationDescription>
         <espi:thirdPartyApplicationStatus>3</espi:thirdPartyApplicationStatus>
         <espi:thirdPartyApplicationType>3</espi:thirdPartyApplicationType>
         <espi:thirdPartyApplicationUse>1</espi:thirdPartyApplicationUse>
         <espi:thirdPartyPhone>5196615800</espi:thirdPartyPhone>
         <espi:authorizationServerUri>https://greenbutton.londonhydro.com</espi:authorizationServerUri>
         <espi:thirdPartyNotifyUri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
         <espi:authorizationServerAuthorizationEndpoint>https://greenbutton.londonhydro.com/oauth/authorize</espi:authorizationServerAuthorizationEndpoint>
         <espi:authorizationServerTokenEndpoint>https://greenbutton.londonhydro.com/oauth/token</espi:authorizationServerTokenEndpoint>
         <espi:dataCustodianBulkRequestURI>https://api.londonhydro.com/espi/1_1/resource/Bulk/8</espi:dataCustodianBulkRequestURI>
         <espi:dataCustodianResourceEndpoint>https://api.londonhydro.com/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
         <espi:thirdPartyScopeSelectionScreenURI>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
         <espi:thirdPartyUserPortalScreenURI>https://cmdcertdev.greenbuttonalliance.org</espi:thirdPartyUserPortalScreenURI>
         <espi:client_secret>Gigt2CaoDyrpVx7</espi:client_secret>
         <espi:logo_uri>http://www.greenbuttonalliance.org/assets/site/gba-logo.png</espi:logo_uri>
         <espi:client_name>Test Client</espi:client_name>
         <espi:client_uri>https://cmdcertdev.greenbuttonalliance.org</espi:client_uri>
         <espi:redirect_uri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
         <espi:client_id>third_party</espi:client_id>
         <espi:tos_uri>https://www.londonhydro.com</espi:tos_uri>
         <espi:policy_uri>https://www.londonhydro.com</espi:policy_uri>
         <espi:software_id>v0001</espi:software_id>
         <espi:software_version>1.0</espi:software_version>
         <espi:client_id_issued_at>1470948388</espi:client_id_issued_at>
         <espi:client_secret_expires_at>2147483647</espi:client_secret_expires_at>
         <espi:contacts>5196615800</espi:contacts>
         <espi:token_endpoint_auth_method>client_secret_basic</espi:token_endpoint_auth_method>
         <espi:scope>FB=10;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</espi:scope>
         <espi:scope>FB=11;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:grant_types>authorization_code</espi:grant_types>
         <espi:grant_types>refresh_token</espi:grant_types>
         <espi:response_types>code</espi:response_types>
         <espi:registration_client_uri>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:registration_client_uri>
         <espi:registration_access_token>682f6064-a28b-42b8-b693-5bdbe8f06bce</espi:registration_access_token>
         <espi:dataCustodianScopeSelectionScreenURI>https://greenbutton.londonhydro.com/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</espi:dataCustodianScopeSelectionScreenURI>
      </espi:ApplicationInformation>
   </content>
   <published>2015-06-02T21:45:10Z</published>
   <updated>2015-06-02T21:45:10Z</updated>
</entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1f384a4c-f50d-47de-8a94-bddb7bd2d9b0"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT ApplicationInformation by Id with no access token" id="001f42cd-f05e-4de0-a873-a5ab15e64018"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT ApplicationInformation by Id with no access token" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:a5dee759-9acc-498d-9b6a-b5097c920008</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <title/>
   <content>
      <espi:ApplicationInformation>
         <espi:dataCustodianId>LondonHydro</espi:dataCustodianId>
         <espi:dataCustodianApplicationStatus>1</espi:dataCustodianApplicationStatus>
         <espi:thirdPartyApplicationDescription>CMD Certification</espi:thirdPartyApplicationDescription>
         <espi:thirdPartyApplicationStatus>3</espi:thirdPartyApplicationStatus>
         <espi:thirdPartyApplicationType>3</espi:thirdPartyApplicationType>
         <espi:thirdPartyApplicationUse>1</espi:thirdPartyApplicationUse>
         <espi:thirdPartyPhone>5196615800</espi:thirdPartyPhone>
         <espi:authorizationServerUri>https://greenbutton.londonhydro.com</espi:authorizationServerUri>
         <espi:thirdPartyNotifyUri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
         <espi:authorizationServerAuthorizationEndpoint>https://greenbutton.londonhydro.com/oauth/authorize</espi:authorizationServerAuthorizationEndpoint>
         <espi:authorizationServerTokenEndpoint>https://greenbutton.londonhydro.com/oauth/token</espi:authorizationServerTokenEndpoint>
         <espi:dataCustodianBulkRequestURI>https://api.londonhydro.com/espi/1_1/resource/Bulk/8</espi:dataCustodianBulkRequestURI>
         <espi:dataCustodianResourceEndpoint>https://api.londonhydro.com/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
         <espi:thirdPartyScopeSelectionScreenURI>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
         <espi:thirdPartyUserPortalScreenURI>https://cmdcertdev.greenbuttonalliance.org</espi:thirdPartyUserPortalScreenURI>
         <espi:client_secret>Gigt2CaoDyrpVx7</espi:client_secret>
         <espi:logo_uri>http://www.greenbuttonalliance.org/assets/site/gba-logo.png</espi:logo_uri>
         <espi:client_name>Test Client</espi:client_name>
         <espi:client_uri>https://cmdcertdev.greenbuttonalliance.org</espi:client_uri>
         <espi:redirect_uri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
         <espi:client_id>third_party</espi:client_id>
         <espi:tos_uri>https://www.londonhydro.com</espi:tos_uri>
         <espi:policy_uri>https://www.londonhydro.com</espi:policy_uri>
         <espi:software_id>v0001</espi:software_id>
         <espi:software_version>1.0</espi:software_version>
         <espi:client_id_issued_at>1470948388</espi:client_id_issued_at>
         <espi:client_secret_expires_at>2147483647</espi:client_secret_expires_at>
         <espi:contacts>5196615800</espi:contacts>
         <espi:token_endpoint_auth_method>client_secret_basic</espi:token_endpoint_auth_method>
         <espi:scope>FB=10;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</espi:scope>
         <espi:scope>FB=11;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:grant_types>authorization_code</espi:grant_types>
         <espi:grant_types>refresh_token</espi:grant_types>
         <espi:response_types>code</espi:response_types>
         <espi:registration_client_uri>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:registration_client_uri>
         <espi:registration_access_token>682f6064-a28b-42b8-b693-5bdbe8f06bce</espi:registration_access_token>
         <espi:dataCustodianScopeSelectionScreenURI>https://greenbutton.londonhydro.com/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</espi:dataCustodianScopeSelectionScreenURI>
      </espi:ApplicationInformation>
   </content>
   <published>2015-06-02T21:45:10Z</published>
   <updated>2015-06-02T21:45:10Z</updated>
</entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="133bc909-3be6-45ac-bfc6-aa26329f338b"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE ApplicationInformation by Id using client_access_token" id="c6b666aa-2fe8-46d7-9bda-e02f3971c924"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE ApplicationInformation by Id using client_access_token" mediaType="application/json" id="9ef70ba4-9a57-4ff5-a02e-b693213d9dc0">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="40ba5aa3-26b4-4877-aecc-692597411054"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE ApplicationInformation by Id using access_token" id="def42568-3c85-4449-80cc-1cc06a7478ba"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE ApplicationInformation by Id using access_token" mediaType="application/json" id="9ef70ba4-9a57-4ff5-a02e-b693213d9dc0">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="452302b7-774b-4e44-a8c3-8a8181c26568"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="Bearer ${#Project#access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE ApplicationInformation by Id using empty access token" id="9f5366ec-f4a1-4eb2-bb72-13259c1879d8"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE ApplicationInformation by Id using empty access token" mediaType="application/json" id="9ef70ba4-9a57-4ff5-a02e-b693213d9dc0">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request/>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f9dcfaac-ed81-49e2-bfcc-46492afe71eb"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT ApplicationInformation by Id" id="b3d51daa-6c0e-405c-8375-26b0e6ada5e0"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="Put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT ApplicationInformation by Id" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
	</con:settings>
	<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
	<con:request><![CDATA[<entry xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns:espi="http://naesb.org/espi" xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:a5dee759-9acc-498d-9b6a-b5097c920008</id>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation" rel="up"/>
   <link href="https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8" rel="self"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/d29d4b30-1a63-532e-a6a3-d6314572eab9" rel="related"/>
   <link href="https://cert.greenbuttonalliance.org/certificate/ba8fc0c8-9e5c-5ddb-bf44-86c50bbf768b" rel="related"/>
   <title/>
   <content>
      <espi:ApplicationInformation>
         <espi:dataCustodianId>LondonHydro</espi:dataCustodianId>
         <espi:dataCustodianApplicationStatus>1</espi:dataCustodianApplicationStatus>
         <espi:thirdPartyApplicationDescription>CMD Certification</espi:thirdPartyApplicationDescription>
         <espi:thirdPartyApplicationStatus>3</espi:thirdPartyApplicationStatus>
         <espi:thirdPartyApplicationType>3</espi:thirdPartyApplicationType>
         <espi:thirdPartyApplicationUse>1</espi:thirdPartyApplicationUse>
         <espi:thirdPartyPhone>5196615800</espi:thirdPartyPhone>
         <espi:authorizationServerUri>https://greenbutton.londonhydro.com</espi:authorizationServerUri>
         <espi:thirdPartyNotifyUri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
         <espi:authorizationServerAuthorizationEndpoint>https://greenbutton.londonhydro.com/oauth/authorize</espi:authorizationServerAuthorizationEndpoint>
         <espi:authorizationServerTokenEndpoint>https://greenbutton.londonhydro.com/oauth/token</espi:authorizationServerTokenEndpoint>
         <espi:dataCustodianBulkRequestURI>https://api.londonhydro.com/espi/1_1/resource/Bulk/8</espi:dataCustodianBulkRequestURI>
         <espi:dataCustodianResourceEndpoint>https://api.londonhydro.com/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
         <espi:thirdPartyScopeSelectionScreenURI>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
         <espi:thirdPartyUserPortalScreenURI>https://cmdcertdev.greenbuttonalliance.org</espi:thirdPartyUserPortalScreenURI>
         <espi:client_secret>Gigt2CaoDyrpVx7</espi:client_secret>
         <espi:logo_uri>http://www.greenbuttonalliance.org/assets/site/gba-logo.png</espi:logo_uri>
         <espi:client_name>Test Client</espi:client_name>
         <espi:client_uri>https://cmdcertdev.greenbuttonalliance.org</espi:client_uri>
         <espi:redirect_uri>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
         <espi:client_id>third_party</espi:client_id>
         <espi:tos_uri>https://www.londonhydro.com</espi:tos_uri>
         <espi:policy_uri>https://www.londonhydro.com</espi:policy_uri>
         <espi:software_id>v0001</espi:software_id>
         <espi:software_version>1.0</espi:software_version>
         <espi:client_id_issued_at>1470948388</espi:client_id_issued_at>
         <espi:client_secret_expires_at>2147483647</espi:client_secret_expires_at>
         <espi:contacts>5196615800</espi:contacts>
         <espi:token_endpoint_auth_method>client_secret_basic</espi:token_endpoint_auth_method>
         <espi:scope>FB=10;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:scope>FB=4_5;IntervalDuration=3600;BlockDuration=daily;HistoryLength=13</espi:scope>
         <espi:scope>FB=11;IntervalDuration=2592000;BlockDuration=monthly;HistoryLength=13</espi:scope>
         <espi:grant_types>authorization_code</espi:grant_types>
         <espi:grant_types>refresh_token</espi:grant_types>
         <espi:response_types>code</espi:response_types>
         <espi:registration_client_uri>https://api.londonhydro.com/espi/1_1/resource/ApplicationInformation/8</espi:registration_client_uri>
         <espi:registration_access_token>682f6064-a28b-42b8-b693-5bdbe8f06bce</espi:registration_access_token>
         <espi:dataCustodianScopeSelectionScreenURI>https://greenbutton.londonhydro.com/RetailCustomer/ScopeSelectionList?ThirdPartyID=third_party</espi:dataCustodianScopeSelectionScreenURI>
      </espi:ApplicationInformation>
   </content>
   <published>2015-06-02T21:45:10Z</published>
   <updated>2015-06-02T21:45:10Z</updated>
</entry>]]></con:request>
	<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f6336ce8-3d8f-4e52-bdd9-006f31d3bfaf"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
		<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
	</con:credentials>
	<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
	<con:jmsPropertyConfig/>
	<con:parameters/>
	<con:parameterOrder>
		<con:entry>applicationInformationId</con:entry>
		<con:entry>Authorization</con:entry>
		<con:entry>Content-Type</con:entry>
	</con:parameterOrder>
</con:restRequest></con:config></con:testStep><con:setupScript>log.info "===== Start TestCase  =====> " + context.testCase.getLabel()</con:setupScript><con:tearDownScript>log.info "===== "+ testRunner.status.toString() +" TestCase  =====> "  +  context.testCase.getLabel();</con:tearDownScript><con:properties/></con:testCase><con:properties/>
<con:setupScript>log.info "===== Start TestSuite =====> " + testSuite.name</con:setupScript><con:tearDownScript>def results = true;

log.info "===== SUMMARY   TestSuite =====> " + testSuite.name
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
//   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      results = false;
//      for ( testStepResult in testCaseResult.getResults() )
//      {
//         testStepResult.messages.each() { msg -> log.info msg }
//      }
   }
}
if(results == true) {
	log.info "===== FINISHED End   TestSuite =====> " + testSuite.name
}
else {
	log.info "===== FAILED End   TestSuite =====> " + testSuite.name
}
</con:tearDownScript></con:testSuite><con:testSuite id="777829b5-238f-498b-8fca-fc91f28b2179" name="[FUTURE]*[FB_46] Core RetailCustomer"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite id="e6e692e4-a3af-493f-879e-e29d98472396" name="[FUTURE]*[FB_47] REST for RetailCustomer Bulk"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite id="134c0d4e-41b7-43ef-99a7-82910fc15181" name="[FUTURE]*[FB_48] SFTP for RetailCustomer Bulk"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite id="5f220152-b482-4fe6-a93c-c86983aa59ab" name="[FUTURE]*[FB_49] RetailCustomer Management REST"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite id="a4cad8a6-a545-43a7-813d-41f895c2ba75" name="[FUTURE]*[FB_50] RetailCustomer Resource Level REST"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:restMockService port="8081" path="/" host="openespivm" name="ThirdParty Notification Mock Service" docroot="" id="44aa183e-c020-4e6b-8402-539544493841"><con:settings/><con:startScript>context.mockService.setPropertyValue("rxNotificationBody","");</con:startScript><con:properties><con:property><con:name>rxNotificationBody</con:name><con:value>&lt;?xml version="1.0" encoding="UTF-8"?>&lt;BatchList xmlns="http://naesb.org/espi" xmlns:espi="http://naesb.org/espi">    &lt;resources>https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource/Bulk/S_119506&lt;/resources>&lt;/BatchList></con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>proxyOutPort1</con:name><con:value>8080</con:value></con:property></con:properties><con:onRequestScript/><con:restMockAction name="/ThirdParty/espi/1_1/Notification" method="POST" resourcePath="/ThirdParty/espi/1_1/Notification" id="6b6053c9-2c1a-4384-9b10-782eb51bbd4c"><con:settings/><con:defaultResponse>ThirdParty Notification Mock Service/ThirdParty/espi/1_1/Notification POST Response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>if(requestContext.mockService.getPropertyValue("rxNotificationBody")!= "") {
	log.info("ThirdParty Notification Mock Service (/ThirdParty/espi/1_1/Notification) Discarding additional notifications");
	return;	
}

String strBody = "";
requestContext.mockService.setPropertyValue("rxNotificationBody",strBody);

if(mockRequest.httpRequest.method != "POST") {
	log.info("ThirdParty Notification Mock Service (/ThirdParty/espi/1_1/Notification) Message other than POST received. Discarding");
	return;
}


try {
	str = mockRequest.getRequestContent();
	log.info("ThirdParty Notification Mock Service (/ThirdParty/espi/1_1/Notification) GetRequestContent: " + str);

	str.eachLine {line->
		log.info "ThirdParty Notification Mock Service (/ThirdParty/espi/1_1/Notification)  Line: " + line;
		strBody = strBody + line;
	}

//	while ((line = mockRequest.getRequest().getReader().readLine()) != null){
//		strBody = strBody + line;
//	}

	log.info("ThirdParty Notification Mock Service (/ThirdParty/espi/1_1/Notification)  RX Notification POST Body:" + strBody);
       
  } catch (Exception e) {
	log.error("ThirdParty Notification Mock Service (/ThirdParty/espi/1_1/Notification)  Exception: " + e)
}

requestContext.mockService.setPropertyValue("rxNotificationBody",strBody);



</con:dispatchPath><con:response name="ThirdParty Notification Mock Service/ThirdParty/espi/1_1/Notification POST Response" httpResponseStatus="200" id="31e9433f-70db-4381-8f38-75ff01ad0a7e"><con:settings/><con:script/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/" method="GET" resourcePath="/" id="5a6ddb17-a1a1-4854-9b9f-6266343a355f"><con:settings/><con:defaultResponse>Diagnostic Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Diagnostic Response" id="3b084363-4364-455a-8e61-ca73b0464d5d" httpResponseStatus="200"><con:settings/><con:script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport;
import org.apache.commons.httpclient.Header;

def String strRequestMethod;
def String strRequestPath;
def String strContent;

log.info("ThirdParty Notification Mock Service (GET /Diagnostic Response)");

// Obtain HttpRequest Method
strRequestMethod = mockRequest.method;
log.info("ThirdParty Notification Mock Service (GET /Diagnostic Response) Request Method: " + strRequestMethod);

// Obtain HttpRequest Path
strRequestPath = mockRequest.getPath();
log.info("ThirdParty Notification Mock Service (GET /Diagnostic Response) Request Path: " + strRequestPath);

// Obtain HttpRequest Content
strContent = mockRequest.requestContent;
log.info("ThirdParty Notification Mock Service (GET /Diagnostic Response) Request Content: " + strContent);

</con:script><con:responseContent/></con:response></con:restMockAction></con:restMockService>
<con:restMockService port="8081" path="/" host="openespivm" name="ThirdParty Authorization Mock Service" docroot="" id="3a34ffc3-4858-4237-a55a-0cc1f8544c4a"><con:settings/><con:properties><con:property><con:name>tokenResponse</con:name><con:value>{    "access_token": "eyJyZWZyZXNoX2lkIjogIkRFTU9fUFY1ZDY2U24xcHRBMThUNlI1UUtiU3VFSmN0IiwgImF1dGhfaWRzIjogWzExOTUwNl0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTkc3OjRTNmxpSUVDWkJ5dUwzcDRHNUkxTzRrQ09rOA",     "authorizationURI": "https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource/Authorization/1dfa07c5740a_119506",     "expires_in": 3600,     "refresh_token": "DEMO_PV5d66Sn1ptA18T6R5QKbSuEJctPSK8WuXwUX8HgcvYCjG4g11Aj6sj5pJpVNAfv1WbDhES5ftECpf9KybVkwPkVrTamRJfWvEAf84WSXR9b1SzEB1uppN6w27wtAYrj",     "resourceURI": "https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource/Batch/Subscription/1dfa07c5740a_119506",     "scope": "FB=1_3_4_13_14",     "token_type": "Bearer"}</con:value></con:property><con:property><con:name>SelectedScope</con:name><con:value>scope=FB%3D1_3_4_13_14</con:value></con:property><con:property><con:name>DataCustodianAuthorizeQry</con:name><con:value>scope=FB%3D1_3_4_13_14</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/token</con:value></con:property><con:property><con:name>browserSession</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GotFirstRedirect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExtractedSessionID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GotScopeSelPOST</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>error</con:name><con:value/></con:property><con:property><con:name>client_id</con:name><con:value>DEMO_gbatestsuite_id_admin</con:value></con:property><con:property><con:name>client_secret</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">gbasecret123</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/scope_selection</con:value></con:property><con:property><con:name>state</con:name><con:value>ee148ec2-9892-466e-a013-4dedf1eb3018</con:value></con:property><con:property><con:name>proxyOutPort1</con:name><con:value>8080</con:value></con:property><con:property><con:name>SeleniumWebDriver</con:name><con:value>org.greenbutton.cmd.utils.DriverHelper@7583beb</con:value></con:property></con:properties><con:onRequestScript/><con:afterRequestScript/><con:restMockAction name="/ThirdParty/RetailCustomer/ScopeSelection" method="GET" resourcePath="/ThirdParty/RetailCustomer/ScopeSelection" id="a19f663e-daf5-4eab-bc7c-0fb638c2496d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def projectPath = groovyUtils.projectPath
//def mockService = mockRequest.getContext().getMockService();

//def driver = mockService.getPropertyValue("SeleniumWebDriver")
//def driver = context['driver'];
//WebDriver webdriver = driver._driver;

//log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) ********** DEBUG ********** mockService: " + mockService.toString());
//log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) ********** DEBUG ********** SeleniumWebDriver: " + driver.toString());
// Test for access to mockService Properties
//log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) SeleniumWebDriver: " + context.expand('${#MockService#SeleniumWebDriver}'));

log.info("Hello World");

return "Scope Selection GET Response"</con:dispatchPath><con:response name="Scope Selection GET Response" httpResponseStatus="200" mediaType="text/html" id="0cc4faef-5812-4914-9bea-637ccc66bf8e"><con:settings/><con:script>//import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.firefox.FirefoxDriver;

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def projectPath = groovyUtils.projectPath
//def mockService = mockRequest.getContext().getMockService();

//def driver = mockService.getPropertyValue("SeleniumWebDriver")
//def driver = context['driver'];
//WebDriver webdriver = driver._driver;

//log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) ********** DEBUG ********** mockService: " + mockService.toString());
//log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) ********** DEBUG ********** SeleniumWebDriver: " + driver.toString());
// Test for access to mockService Properties
//log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) SeleniumWebDriver: " + context.expand('${#MockService#SeleniumWebDriver}'));

//log.info("Hello World");

// Obtain HttpRequest query element
//log.info("TEST");
//log.info("TEST");

String strQry = mockRequest.getHttpRequest().getQueryString();
//
log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) TP GET ScopeSelection: " + strQry);

requestContext.mockService.setPropertyValue("DataCustodianAuthorizeQry",strQry);

List listScopes = strQry.tokenize("&amp;");

String strFormSelections = "";
int idx = 0;
for(Object object : listScopes) {
	String strScope = (String) object;
	if(strScope.contains("scope=")){
		strFormSelections += '&lt;input type="radio" name="scope" value="' + idx + '">' + strScope + '&lt;br>';
		log.info("ThirdParty Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET REsponse) scope: " + strScope);
	}
	idx++;
}

requestContext.list = strFormSelections;</con:script><con:responseContent><![CDATA[<!DOCTYPE html>
<html>
<body>
Please select a scope for testing and submit.
<br><br>
<form action="/ThirdParty/RetailCustomer/ScopeSelection" method="POST">
${list}
<br><br>
<input type="submit" value="Submit">
</form>
</body>
</html>
]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/espi/1_1/OAuthCallBack" method="GET" resourcePath="/ThirdParty/espi/1_1/OAuthCallBack" id="20118636-cb24-49f1-b577-35cf8d4ae5b6"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="OAuthCallBack GET 302 Response" httpResponseStatus="302" mediaType="text/xml" id="71d6e2e7-1902-41cb-9b50-fce8089d3cc2"><con:settings/><con:script>import groovyx.net.http.HTTPBuilder;
import static groovyx.net.http.Method.POST;
import static groovyx.net.http.ContentType.TEXT;
import java.net.*;
import java.io.*;

public boolean RunCommand(String cmd)
{
	String path = "/etc/stunnel";
	String timeoutCmd = "timeout";
	
	def doCmd;
	def myTimeoutValue= 1000;

	if(myTimeoutValue > 0)
	{
		cmd = timeoutCmd + " " + myTimeoutValue + " " + cmd;
	}

	
	try {
		doCmd = ["bash", "-c",cmd].execute(null, new File(path));
	
		doCmd.waitFor()
	
		} catch (Exception e) {
			log.error("command timeout");
			return false;
	}

	if(doCmd.exitValue()!=0)
	{	
		log.error "return code: " +  doCmd.exitValue().toString();
		log.error "stderr: " + doCmd.err.text;
		log.error "stdout: " + doCmd.in.text;
		
		return false;
	}

	log.info  "stdout: " + 	doCmd.in.text;

	sleep 1000;
	return true;
}

String parseEndpointFromURI(String strURI) throws Exception {

    URL aURL = new URL(strURI);

    // return with proxy port

    log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' parseEndpointFromURI routine");
    log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' returned Endpoint: http://" + aURL.getHost() + ":" + requestContext.mockService.getPropertyValue("proxyOutPort"));
    return "http://" +  aURL.getHost() + ":" + requestContext.mockService.getPropertyValue("proxyOutPort");
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);
    return aURL.getPath();
}

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doPOST(String strBaseEndpoint,String href, String token,Map&lt;String, Serializable> params) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' doPOST");
		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Request URL: " + strBaseEndpoint + "/" + href + "?" + params);

try{
		http.request( strBaseEndpoint, POST, TEXT ) { req ->
			uri.path = href
			uri.query = params
		     headers.Authorization = 'Basic ' + token
			headers.Accept = 'application/json, application/*+json'
			
			response.failure = { resp ->
				log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: " + resp.statusLine);
				return null;
			}  

			response.success = { resp, reader ->
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeeded: " + resp.statusLine);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeeded len: " + resp.headers['Content-Length']?.value);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Succeeded type: " + resp.headers['Content-Type']?.value);
				
				String jsonResponse = (reader.readLines().join() as String);
				log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Response Body: " + jsonResponse);
				_strResponseBody = jsonResponse;
				//_strResponseBody = reader.getText();
			}
		}
}
catch(Exception e)
{
 log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: Exception Occurred:" + e.getMessage());

}
		return _strResponseBody;
	}	
}

requestContext.mockService.setPropertyValue("error","");
String strQry = mockRequest.getHttpRequest().getQueryString(); 
log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Received OAuthCallback:" + strQry);

if(strQry.contains("error=")){
	log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Received OAuthCallback with error:" + strQry);
	requestContext.mockService.setPropertyValue("error",strQry);
 	return;
} else {
	requestContext.mockService.setPropertyValue("error","");
}

log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strQry: " + strQry);

String strCode = "";
String strRecvState = "";

/***********************************************************************************************************
 *                                                                                                         *
 * 	Verify oauth/authorize request response contains a state= parameter and that it matches the           *
 * 	state= parameter contained in the request                                                             *
 *                                                                                                         *
 ***********************************************************************************************************/

int iStatePos = strQry.indexOf("state=");
log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' iStatePos: " + iStatePos);

if (iStatePos > 0) {
	strRecvState = strQry.substring(strQry.indexOf("state=") + "state=".length());
	log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strRecvState: " + strRecvState);
	
	if (strRecvState != requestContext.mockService.getPropertyValue("state")) {
		log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response state= value " + strRecvState + " does not match request state= value " + requestContext.mockService.getPropertyValue("state"));
		log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response state= value " + strRecvState + " does not match request state= value " + requestContext.mockService.getPropertyValue("state"));
		return;		
	}
} else {
	log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response does not contain a state= value");
	log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response does not contain a state= value");
	return;
}

/***********************************************************************************************************
 *                                                                                                         *
 * 	Save the authorization code from the /oauth/authorize request response for use with the               *
 * 	/oauth/token endpoint request                                                                         *
 *                                                                                                         *
 ***********************************************************************************************************/

int iPos = strQry.indexOf("&amp;");

if(iPos>0){
	
	strCode = strQry.substring(strQry.indexOf("code=")+"code=".length(),iPos);
	log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' iPos: " + iPos);
	log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strCode: " + strCode);
}
else 
{
	strCode = strQry.substring(strQry.indexOf("code=")+"code=".length());
	log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strCode: " + strCode);
}

log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Received OAuthCallback with code:" + strCode);

ResourceTester resourceTester = new ResourceTester(log);

Map params = [redirect_uri: requestContext.mockService.getPropertyValue("redirect_uri"), code: strCode,grant_type:'authorization_code'];
String strAuthorizationServerTokenEndpoint = requestContext.mockService.getPropertyValue("authorizationServerTokenEndpoint");
String strHost = parseEndpointFromURI(strAuthorizationServerTokenEndpoint);
String strResource = parseResource(strAuthorizationServerTokenEndpoint);

log.info "ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strAuthorizationServerTokenEndpoint: " + strAuthorizationServerTokenEndpoint;
log.info "ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strHost: " + strHost;
log.info "ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response strResource: " + strResource;

String strAuthentication = requestContext.mockService.project.getPropertyValue("client_id") + ":" + requestContext.mockService.project.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Original Authentication: " + strAuthentication);
log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Base 64 Encoded Authentication: " + token);

//String strGetResponseBody = resourceTester.doPOST(strHost,strResource,"dGhpcmRfcGFydHk6c2VjcmV0",params);

RunCommand("sudo rm /etc/hosts");
RunCommand("sudo ln -s /etc/hosts.forstunnel /etc/hosts");

log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- Issue POST");
String strGetResponseBody = resourceTester.doPOST(strHost,strResource,token,params);
log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- Issued POST");

RunCommand("sudo rm /etc/hosts");
RunCommand("sudo ln -s /etc/hosts.original /etc/hosts");

if(strGetResponseBody==null) {
	log.error("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST request failed.");
	return;	
}

log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuth token response:" + strGetResponseBody);
requestContext.mockService.setPropertyValue("tokenResponse",strGetResponseBody);

</con:script><con:responseContent/><con:header><con:name>Location</con:name><con:value>${#Project#NotificationEndpoint}/RetailCustomer/1/AuthorizationList</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/RetailCustomer/1/AuthorizationList" method="GET" resourcePath="/ThirdParty/RetailCustomer/1/AuthorizationList" id="607a9769-f06b-47e1-8466-e6fe048b926c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="AuthorizationList GET Response" httpResponseStatus="200" mediaType="text/xml" id="1335bf88-2994-493d-a6b5-c2d852f1f588"><con:settings/><con:script/><con:responseContent><![CDATA[<html>
<body>
<p>Test complete. <strong>Do not close this browser window</strong>strong>.</p>
<p>Click "OK" in the SoapUI dialog box.</p>
</body>
</html>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/RetailCustomer/ScopeSelection" method="POST" resourcePath="/ThirdParty/RetailCustomer/ScopeSelection" id="6b40be58-fe2a-4781-9c10-38e09a74bbba"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Scope Selection POST Response" httpResponseStatus="302" id="033a6e3e-81cb-40ae-8181-87a144904f4a"><con:settings/><con:script>
log.info("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' TP POST Scope Selection");

String strBody = mockRequest.requestContent;

if(strBody == "" ){

	log.info("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a Response");
	log.error("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection --  Scope Selection POST Response' Scope Selection Request did not receive a Response");
	//testRunner.fail("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a Response");
	requestContext.mockService.setPropertyValue("error","Scope Selection POST Response' Scope Selection Request did not receive a body");


	def httpResponse = mockRequest.httpResponse
	httpResponse.addHeader("Location",requestContext.mockService.project.getPropertyValue("NotificationEndpoint")+"/RetailCustomer/1/AuthorizationList");
	
	return;
} else {
	log.info("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection POST Response: " + strBody);
}

if(!strBody.contains("scope=")){
	log.info("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a scope");
	log.error("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection --  Scope Selection POST Response' Scope Selection Request did not receive a scope");
	
	requestContext.mockService.setPropertyValue("error","Scope Selection POST Response' Scope Selection Request did not receive a scope");
	
	def httpResponse = mockRequest.httpResponse
	httpResponse.addHeader("Location",requestContext.mockService.project.getPropertyValue("NotificationEndpoint")+"/RetailCustomer/1/AuthorizationList");
	
	return;
}

int iSelScopeIdx = strBody.replace("scope=","").toInteger();

String strQry = requestContext.mockService.getPropertyValue("DataCustodianAuthorizeQry");

List listScopes = strQry.tokenize("&amp;");

String strSelectedScope = listScopes[iSelScopeIdx];
requestContext.mockService.setPropertyValue("SelectedScope",strSelectedScope);

String strState = "ee148ec2-9892-466e-a013-4dedf1eb3018";
requestContext.mockService.setPropertyValue("state",strState);

String strRespLoc = "";

strRespLoc += requestContext.mockService.getPropertyValue("authorizationServerAuthorizationEndpoint");
strRespLoc += "?client_id=" + requestContext.mockService.getPropertyValue("client_id");
strRespLoc += "&amp;redirect_uri=" + requestContext.mockService.getPropertyValue("redirect_uri");
strRespLoc += "&amp;response_type=code";
strRespLoc += "&amp;" + strSelectedScope;
strRespLoc += "&amp;state=" + strState;

log.info("ThirdParty Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' POST TP Scope selection returning 302 redirect to: " + strRespLoc);

def httpResponse = mockRequest.httpResponse
httpResponse.addHeader("Location",strRespLoc);



</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/" method="GET" resourcePath="/" id="ee91990b-5164-4d32-8790-920061b4a375"><con:settings/><con:defaultResponse>Diagnostic Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Diagnostic Response" id="7525a88a-473f-48ad-9d1c-034796ae1fb9" httpResponseStatus="200"><con:settings/><con:script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport;
import org.apache.commons.httpclient.Header;

//	Create addressability to global variables
def project = testRunner.testCase.testSuite.project;

def String strRequestMethod;
def String strRequestPath;
def String strContent;

log.info("ThirdParty Authorization Mock Service (GET /Diagnostic Response)");

// Obtain HttpRequest Method
strRequestMethod = mockRequest.method;
log.info("ThirdParty Authorization Mock Service (GET /Diagnostic Response) Request Method: " + strRequestMethod);

// Obtain HttpRequest Path
strRequestPath = mockRequest.getPath();
log.info("ThirdParty Authorization Mock Service (GET /Diagnostic Response) Request Path: " + strRequestPath);

// Obtain HttpRequest Content
strContent = mockRequest.requestContent;

log.info("ThirdParty Authorization Mock Service (GET /Diagnostic Response) Request Content: " + strContent);</con:script><con:responseContent/></con:response></con:restMockAction></con:restMockService>
<con:restMockService port="8081" path="/" host="openespivm" name="ThirdParty NEG A tests Authorization Mock Service" docroot="" id="cdc5ffa6-a930-460a-b724-42e8e7d73f4f"><con:settings/><con:properties><con:property><con:name>tokenResponse</con:name><con:value/></con:property><con:property><con:name>SelectedScope</con:name><con:value>scope=FB=1_3_4_5_13_14_39;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>DataCustodianAuthorizeQry</con:name><con:value>scope=FB=1_3_8_13_14_18_19_31_32_35_37_38_39_40_4_5_10_15_16_46_47;IntervalDuration=900_3600;BlockDuration=Daily;HistoryLength=63072000;SubscriptionFrequency=Daily;AccountCollection=2;BR=50036&amp;dataCustodianId=PGE;</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/token</con:value></con:property><con:property><con:name>GotFirstRedirect</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>GotScopeSelPOST</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>client_id</con:name><con:value>DEMO_gbatestsuite_id_admin</con:value></con:property><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/scope_selection</con:value></con:property><con:property><con:name>client_secret</con:name><con:value>gbasecret123</con:value></con:property><con:property><con:name>state</con:name><con:value>ee148ec2-9892-466e-a013-4dedf1eb3018</con:value></con:property><con:property><con:name>proxyOutPort1</con:name><con:value>8080</con:value></con:property></con:properties><con:onRequestScript/><con:restMockAction name="/ThirdParty/RetailCustomer/ScopeSelection" method="GET" resourcePath="/ThirdParty/RetailCustomer/ScopeSelection" id="fbe0856f-dd44-4b04-8b84-d08a490ece57"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Scope Selection GET Response" httpResponseStatus="200" mediaType="text/html" id="1bbaff48-d407-4c97-9d7a-f4bc1aaba5d4"><con:settings/><con:script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport;
import org.apache.commons.httpclient.Header;

def String strQry;

def String[] strHelperCookies;
def String[] strRequestCookies;
def String   strRequestMethod;
def String   strRequestPath;
def String   strRequestQueryString;
def String   strRequestSession;
def String   strRequestSessionID = null;

// Obtain HttpRequest Session
strRequestSession = mockRequest.getHttpRequest().getSession(false);
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) Request Session: " + strRequestSession);

// Obtain HttpRequest Cookies
if (mockRequest.getRequestHeaders().get("Set-Cookie") != null) {
	log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) contains a 'Set-Cookie' Header");
}
strRequestCookies = mockRequest.getHttpRequest().getCookies();
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) Request Cookies: " + strRequestCookies);

// Obtain HttpRequest Content
strRequestContent = mockRequest.getRequestContent();
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) Request Content: " + strRequestContent);

// Obtain HttpRequest Method
strRequestMethod = mockRequest.method;
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) Request Method: " + strRequestMethod);

// Obtain HttpRequest Path
strRequestPath = mockRequest.getPath();
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) Request Path: " + strRequestPath);

// Obtain HttpRequest Query String
strRequestQueryString = mockRequest.getHttpRequest().getQueryString();
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) Request Query String: " + strRequestQueryString);

// Obtain HttpRequest Query Parameters
strQry = mockRequest.getHttpRequest().getQueryString(); 
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) ThirdParty GET ScopeSelection: " + strQry);

requestContext.mockService.setPropertyValue("DataCustodianAuthorizeQry",strQry);
requestContext.mockService.setPropertyValue("GotFirstRedirect","TRUE");

List listScopes = strQry.tokenize("&amp;");

String strFormSelections = "";
int idx = 0;
for(Object object : listScopes) {
	String strScope = (String) object;
	if(strScope.contains("scope=")){
		strFormSelections += '&lt;input type="radio" name="scope" value="' + idx + '">' + strScope + '&lt;br>';
		log.info("ThirdParty NEG A tests Authorization Mock Service (GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response) scope: " + strScope);
	}
	idx++;
}

requestContext.list = strFormSelections;</con:script><con:responseContent><![CDATA[<!DOCTYPE html>
<html>
<body>
<p>Please select a scope for testing and submit.</p>
<br><br>
<form action="/ThirdParty/RetailCustomer/ScopeSelection" method="POST">
${list}
<br><br>
<input type="submit" value="Submit">
</form>
</body>
</html>
]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/espi/1_1/OAuthCallBack" method="GET" resourcePath="/ThirdParty/espi/1_1/OAuthCallBack" id="8688d190-f291-47e3-8392-1dc7873c8963"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="OAuthCallBack GET 302 Response" httpResponseStatus="302" mediaType="text/xml" id="f9acf164-391e-402d-b747-f9d0771b83b1"><con:settings/><con:script>import groovyx.net.http.HTTPBuilder;
import static groovyx.net.http.Method.POST;
import static groovyx.net.http.ContentType.TEXT;
import java.net.*;
import java.io.*;

public boolean RunCommand(String cmd)
{
	String path = "/etc/stunnel";
	String timeoutCmd = "timeout";
	
	def doCmd;
	def myTimeoutValue= 1000;

	if(myTimeoutValue > 0)
	{
		cmd = timeoutCmd + " " + myTimeoutValue + " " + cmd;
	}

	
	try {
		doCmd = ["bash", "-c",cmd].execute(null, new File(path));
	
		doCmd.waitFor()
	
		} catch (Exception e) {
			log.error("command timeout");
			return false;
	}

	if(doCmd.exitValue()!=0)
	{	
		log.error "return code: " +  doCmd.exitValue().toString();
		log.error "stderr: " + doCmd.err.text;
		log.error "stdout: " + doCmd.in.text;
		
		return false;
	}

	log.info  "stdout: " + 	doCmd.in.text;

	sleep 1000;
	return true;
}

String parseEndpointFromURI(String strURI) throws Exception {

    URL aURL = new URL(strURI);

    // return with proxy port

    log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' parseEndpointFromURI routine");
    log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' returned Endpoint: http://" + aURL.getHost() + ":" + requestContext.mockService.getPropertyValue("proxyOutPort"));
    return "http://" +  aURL.getHost() + ":" + requestContext.mockService.getPropertyValue("proxyOutPort");   
}

String parseResource(String strURI) throws Exception {
    URL aURL = new URL(strURI);
    return aURL.getPath();
}

public class ResourceTester {
	Object log;
	String _strResponseBody = null;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public String doPOST(String strBaseEndpoint,String href, String token,Map&lt;String, Serializable> params) {
		_strResponseBody = null;
		
	  	def http = new HTTPBuilder();

		log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' doPOST");
		log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Request URL: " + strBaseEndpoint);

		http.request( strBaseEndpoint, POST, TEXT ) { req ->
			uri.path = href
			uri.query = params
		     headers.Authorization = 'Basic ' + token
			headers.Accept = 'application/json, application/*+json'
			
			response.success = { resp, reader ->
				_strResponseBody = reader.text;				
			}		
										
			response.failure = { resp ->
				log.error("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' POST Failed: " + resp.statusLine);
				return null;
			}  
		}
		return _strResponseBody;
	}	
}

requestContext.mockService.setPropertyValue("error","");
String strQry = mockRequest.getHttpRequest().getQueryString(); 

if(strQry.contains("error=")){
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- Received OAuthCallback with error:" + strQry);
	requestContext.mockService.setPropertyValue("error",strQry);
 	return;
} else
{
	requestContext.mockService.setPropertyValue("error","");
}

log.info("ThirdParty Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strQry: " + strQry);

String strCode = "";
String strRecvState = "";

/***********************************************************************************************************
 *                                                                                                         *
 * 	Verify oauth/authorize request response contains a state= parameter and that it matches the           *
 * 	state= parameter contained in the request                                                             *
 *                                                                                                         *
 ***********************************************************************************************************/

int iStatePos = strQry.indexOf("state=");
log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' iStatePos: " + iStatePos);

if (iStatePos > 0) {
	strRecvState = strQry.substring(strQry.indexOf("state=") + "state=".length());
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strRecvState: " + strRecvState);
	
	if (strRecvState != requestContext.mockService.getPropertyValue("state")) {
		log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response state= value " + strRecvState + " does not match request state= value " + requestContext.mockService.getPropertyValue("state"));
		log.error("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response state= value " + strRecvState + " does not match request state= value " + requestContext.mockService.getPropertyValue("state"));
		return;		
	}
}
else
{
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response does not contain a state= value");
	log.error("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response does not contain a state= value");
	return;
}

/***********************************************************************************************************
 *                                                                                                         *
 * 	Save the authorization code from the /oauth/authorize request response for use with the               *
 * 	/oauth/token endpoint request                                                                         *
 *                                                                                                         *
 ***********************************************************************************************************/

int iPos = strQry.indexOf("&amp;");

if(iPos>0){
	
	strCode = strQry.substring(strQry.indexOf("code=")+"code=".length(),iPos);
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' iPos: " + iPos);
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strCode: " + strCode);
}
else 
{
	strCode = strQry.substring(strQry.indexOf("code=")+"code=".length());
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strCode: " + strCode);
}

log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- Received OAuthCallback with code:" + strCode);

ResourceTester resourceTester = new ResourceTester(log);

Map params = [redirect_uri: requestContext.mockService.getPropertyValue("redirect_uri"), code: strCode,grant_type:'authorization_code'];
String strAuthorizationServerTokenEndpoint = requestContext.mockService.getPropertyValue("authorizationServerTokenEndpoint");
String strHost = parseEndpointFromURI(strAuthorizationServerTokenEndpoint);
String strResource = parseResource(strAuthorizationServerTokenEndpoint);

String strAuthentication = requestContext.mockService.project.getPropertyValue("client_id") + ":" + requestContext.mockService.project.getPropertyValue("client_secret");

// Encode byte array into Base 64
String token = strAuthentication.bytes.encodeBase64().toString();

RunCommand("sudo rm /etc/hosts");
RunCommand("sudo ln -s /etc/hosts.forstunnel /etc/hosts");

log.info("Issue POST");
//String strGetResponseBody = resourceTester.doGET(strHost,strResource,"dGhpcmRfcGFydHk6c2VjcmV0",params);
String strGetResponseBody = resourceTester.doPOST(strHost,strResource,token,params);
log.info("Issued POST");

RunCommand("sudo rm /etc/hosts");
RunCommand("sudo ln -s /etc/hosts.original /etc/hosts");


if(strGetResponseBody==null) {
	log.error("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- POST request failed.");
	return;	
}

log.info("ThirdParty NEG A tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuth token response:" + strGetResponseBody);
requestContext.mockService.setPropertyValue("tokenResponse",strGetResponseBody);

</con:script><con:responseContent/><con:header><con:name>Location</con:name><con:value>${#Project#NotificationEndpoint}/RetailCustomer/1/AuthorizationList</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/RetailCustomer/1/AuthorizationList" method="GET" resourcePath="/ThirdParty/RetailCustomer/1/AuthorizationList" id="bbac227b-493c-45e3-a1b5-93519813a4ae"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="AuthorizationList GET Response" httpResponseStatus="200" mediaType="text/xml" id="83d6eb23-d59c-4184-b87e-35eb644f7675"><con:settings/><con:script/><con:responseContent><![CDATA[<html>
<body>
<p>Test complete. Please do not close this browser window.</p>
<p>Please select "OK" on SoapUI dialog box.</p>
</body>
</html>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/RetailCustomer/ScopeSelection" method="POST" resourcePath="/ThirdParty/RetailCustomer/ScopeSelection" id="ee746322-bfd5-4ebd-abb1-190383b40cfc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Scope Selection POST Response" httpResponseStatus="200" mediaType="text/html" id="01b8024b-577d-448c-abb7-08b0575762f1"><con:settings/><con:script>
log.info("ThirdParty NEG A tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' TP POST Scope Selection");

String strBody = mockRequest.requestContent;

if(strBody == "" ){

	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a Response");
	log.error("ThirdParty NEG A tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection --  Scope Selection POST Response' Scope Selection Request did not receive a Response");
	testRunner.fail("ThirdParty NEG A tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a Response");
	return;
} else {
	log.info("ThirdParty NEG A tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection POST Response: " + strBody);
}

int iSelScopeIdx = strBody.replace("scope=","").toInteger();

String strQry = requestContext.mockService.getPropertyValue("DataCustodianAuthorizeQry");

List listScopes = strQry.tokenize("&amp;");

String strSelectedScope = listScopes[iSelScopeIdx];
requestContext.mockService.setPropertyValue("SelectedScope",strSelectedScope);

String strState = "ee148ec2-9892-466e-a013-4dedf1eb3018";
requestContext.mockService.setPropertyValue("state",strState);

String strRespLoc = "";

strRespLoc += requestContext.mockService.getPropertyValue("authorizationServerAuthorizationEndpoint");
strRespLoc += "?client_id=" + requestContext.mockService.getPropertyValue("client_id");
strRespLoc += "&amp;redirect_uri=" + requestContext.mockService.getPropertyValue("redirect_uri");
strRespLoc += "&amp;response_type=code";
strRespLoc += "&amp;" + strSelectedScope;
strRespLoc += "&amp;state=" + strState;

log.info("ThirdParty NEG A tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' POST TP Scope selection returning 302 redirect to: " + strRespLoc);

String strSessionID = requestContext.mockService.getPropertyValue("browserSession");

requestContext.mockService.setPropertyValue("GotScopeSelPOST","TRUE");

</con:script><con:responseContent><![CDATA[<!DOCTYPE html>
<html>
<body>
Please select <strong>"<i>OK</>"</strong> on SoapUI dialog box.
<br><br>
</body>
</html>
]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/" method="GET" resourcePath="/" id="ccb4267e-4aa4-4e34-a765-84d6fbe324ce"><con:settings/><con:defaultResponse>Diagnostic Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Diagnostic Response" id="cb684cee-034d-471c-a299-56bb290c0d93" httpResponseStatus="200"><con:settings/><con:script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport;
import org.apache.commons.httpclient.Header;

def String strRequestMethod;
def String strRequestPath;
def String strContent;

log.info("ThirdParty NEG A tests Authorization Mock Service (GET / (Diagnostic Response)");

// Obtain HttpRequest Method
strRequestMethod = mockRequest.method;
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /Diagnostic Response) Request Method: " + strRequestMethod);

// Obtain HttpRequest Path
strRequestPath = mockRequest.getPath();
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /Diagnostic Response) Request Path: " + strRequestPath);

// Obtain HttpRequest Content
strContent = mockRequest.requestContent;
log.info("ThirdParty NEG A tests Authorization Mock Service (GET /Diagnostic Response) Request Content: " + strContent);

</con:script><con:responseContent/></con:response></con:restMockAction></con:restMockService>
<con:restMockService port="8081" path="/" host="openespivm" name="ThirdParty NEG B tests Authorization Mock Service" docroot="" id="f53ba382-c35f-4ef1-901a-f07c7855c1b3"><con:settings/><con:properties><con:property><con:name>tokenResponse</con:name><con:value/></con:property><con:property><con:name>SelectedScope</con:name><con:value>scope=FB%3D1_3_4_13_14</con:value></con:property><con:property><con:name>DataCustodianAuthorizeQry</con:name><con:value>scope=FB%3D1_3_4_13_14</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/authorize</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/token</con:value></con:property><con:property><con:name>browserSession</con:name><con:value>9C0B4BBAD2FBDAF475058F4996FE725B</con:value></con:property><con:property><con:name>GotFirstRedirect</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>ExtractedSessionID</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>GotScopeSelPOST</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>OAuthCodeReceivedValue</con:name><con:value>DEMO_4YVsmXpScDXcA2gYSKrCRP7Jz65D3eShaaJUNWZQ3FUdewRxxRMCwdr6qngEy8ZA</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>client_id</con:name><con:value>DEMO_gbatestsuite_id_admin</con:value></con:property><con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/scope_selection</con:value></con:property><con:property><con:name>client_secret</con:name><con:value>gbasecret123</con:value></con:property><con:property><con:name>state</con:name><con:value>ee148ec2-9892-466e-a013-4dedf1eb3018</con:value></con:property><con:property><con:name>proxyOutPort1</con:name><con:value>8080</con:value></con:property></con:properties><con:restMockAction name="/ThirdParty/RetailCustomer/ScopeSelection" method="GET" resourcePath="/ThirdParty/RetailCustomer/ScopeSelection" id="80ce918e-62e8-4eb0-881e-fe7226c68892"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Scope Selection GET Response" httpResponseStatus="200" mediaType="text/html" id="24302bdb-1ba4-40b2-9240-ae08c5c7d9d9"><con:settings/><con:script>
String strQry = mockRequest.getHttpRequest().getQueryString(); 

log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response' TP GET ScopeSelection: " + strQry);

requestContext.mockService.setPropertyValue("DataCustodianAuthorizeQry",strQry);


List listScopes = strQry.tokenize("&amp;");

String strFormSelections = "";
int idx = 0;
for(Object object : listScopes) {
	String strScope = (String) object;
	if(strScope.contains("scope=")){
		strFormSelections += '&lt;input type="radio" name="scope" value="' + idx + '">' + strScope + '&lt;br>';
		log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection GET Response' scope: " + strScope);
	}
	idx++;
}

requestContext.list = strFormSelections;</con:script><con:responseContent><![CDATA[<!DOCTYPE html>
<html>
<body>
Please select a scope for testing and submit.
<br><br>
<form action="/ThirdParty/RetailCustomer/ScopeSelection" method="POST">
${list}
<br><br>
<input type="submit" value="Submit">
</form>
</body>
</html>
]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/espi/1_1/OAuthCallBack" method="GET" resourcePath="/ThirdParty/espi/1_1/OAuthCallBack" id="4604cf2d-f365-475b-b9d5-39f84eff5b91"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="OAuthCallBack GET 302 Response" httpResponseStatus="302" mediaType="text/xml" id="92745898-0af2-4c21-9aa8-53e4bb5d7d21"><con:settings/><con:script>
String strQry = mockRequest.getHttpRequest().getQueryString(); 

log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strQry: " + strQry);

String strCode = "";
String strRecvState = "";

/***********************************************************************************************************
 *                                                                                                         *
 * 	Verify oauth/authorize request response contains a state= parameter and that it matches the           *
 * 	state= parameter contained in the request                                                             *
 *                                                                                                         *
 ***********************************************************************************************************/

int iStatePos = strQry.indexOf("state=");
log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' iStatePos: " + iStatePos);

if (iStatePos > 0) {
	strRecvState = strQry.substring(strQry.indexOf("state=") + "state=".length());
	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strRecvState: " + strRecvState);
	
	if (strRecvState != requestContext.mockService.getPropertyValue("state")) {
		log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response state= value " + strRecvState + " does not match request state= value " + requestContext.mockService.getPropertyValue("state"));
		log.error("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response state= value " + strRecvState + " does not match request state= value " + requestContext.mockService.getPropertyValue("state"));
		return;		
	}
}
else
{
	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response does not contain a state= value");
	log.error("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' OAuthCallBack response does not contain a state= value");
	return;
}

/***********************************************************************************************************
 *                                                                                                         *
 * 	Save the authorization code from the /oauth/authorize request response for use with the               *
 * 	/oauth/token endpoint request                                                                         *
 *                                                                                                         *
 ***********************************************************************************************************/

int iPos = strQry.indexOf("&amp;");

if(iPos>0){
	
	strCode = strQry.substring(strQry.indexOf("code=")+"code=".length(),iPos);
	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' iPos: " + iPos);
	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strCode: " + strCode);
}
else 
{
	strCode = strQry.substring(strQry.indexOf("code=")+"code=".length());
	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' strCode: " + strCode);
}

log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' Received OAuthCallback with code: " + strCode);
requestContext.mockService.setPropertyValue("OAuthCodeReceivedValue",strCode);
//project.setPropertyValue("OAuthCodeReceivedValue",strCode);

log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' requestContext.mockService.setPropertyValue('OAuthCodeReceivedValue'): " + requestContext.mockService.getPropertyValue("OAuthCodeReceivedValue"));
//log.info("ThirdParty NEG B tests Authorization Mock Service -- 'GET /ThirdParty/espi/1_1/OAuthCallBack -- OAuthCallBack GET 302 Response' project.setPropertyValue('OAuthCodeReceivedValue'): " + project.getPropertyValue("OAuthCodeReceivedValue"));

</con:script><con:responseContent/><con:header><con:name>Location</con:name><con:value>${#Project#NotificationEndpoint}/RetailCustomer/1/AuthorizationList</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/RetailCustomer/1/AuthorizationList" method="GET" resourcePath="/ThirdParty/RetailCustomer/1/AuthorizationList" id="7f7cece6-5ca0-4c88-92fd-88635f7496da"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="AuthorizationList GET Response" httpResponseStatus="200" mediaType="text/xml" id="f14e6c12-9cad-4f29-818d-2c3a7fd83047"><con:settings/><con:script/><con:responseContent><![CDATA[<html>
<body>
<p>Test complete. Please do not close this browser window.</p>
<p>Please select "OK" on SoapUI dialog box.</p>
</body>
</html>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="/ThirdParty/RetailCustomer/ScopeSelection" method="POST" resourcePath="/ThirdParty/RetailCustomer/ScopeSelection" id="4ba4c7ce-a621-4ed1-bf05-bd71d7fe9c6f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Scope Selection POST Response" httpResponseStatus="302" id="a27eb21d-5cef-4b5a-afb0-c6758e0e8065"><con:settings/><con:script>
log.info("ThirdParty NEG B tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' TP POST Scope Selection");

String strBody = mockRequest.requestContent;

if(strBody == "" ){

	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a Response");
	log.error("ThirdParty NEG B tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection --  Scope Selection POST Response' Scope Selection Request did not receive a Response");
	testRunner.fail("ThirdParty NEG B tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection Request did not receive a Response");
	return;
} else {
	log.info("ThirdParty NEG B tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' Scope Selection POST Response: " + strBody);
}

int iSelScopeIdx = strBody.replace("scope=","").toInteger();

String strQry = requestContext.mockService.getPropertyValue("DataCustodianAuthorizeQry");

List listScopes = strQry.tokenize("&amp;");

String strSelectedScope = listScopes[iSelScopeIdx];
requestContext.mockService.setPropertyValue("SelectedScope",strSelectedScope);

String strState = "ee148ec2-9892-466e-a013-4dedf1eb3018";
requestContext.mockService.setPropertyValue("state",strState);

String strRespLoc = "";

strRespLoc += requestContext.mockService.getPropertyValue("authorizationServerAuthorizationEndpoint");
strRespLoc += "?client_id=" + requestContext.mockService.getPropertyValue("client_id");
strRespLoc += "&amp;redirect_uri=" + requestContext.mockService.getPropertyValue("redirect_uri");
strRespLoc += "&amp;response_type=code";
strRespLoc += "&amp;" + strSelectedScope;
strRespLoc += "&amp;state=" + strState;

log.info("ThirdParty NEG B tests Authorization Mock Service -- 'POST /ThirdParty/RetailCustomer/ScopeSelection -- Scope Selection POST Response' POST TP Scope selection returning 302 redirect to: " + strRespLoc);

def httpResponse = mockRequest.httpResponse
httpResponse.addHeader("Location",strRespLoc);



</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/" method="GET" resourcePath="/" id="ab36bd07-fd25-45e1-b6be-e61b2a9c87ec"><con:settings/><con:defaultResponse>Diagnostic Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Diagnostic Response" id="86a9f664-88ec-4da6-84ea-a7e0a9781d40" httpResponseStatus="200"><con:settings/><con:script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport;
import org.apache.commons.httpclient.Header;

def String strRequestMethod;
def String strRequestPath;
def String strContent;

log.info("ThirdParty NEG B tests Authorization Mock Service (GET /Diagnostic Response)");

// Obtain HttpRequest Method
strRequestMethod = mockRequest.method;
log.info("ThirdParty NEG B tests Authorization Mock Service (GET /Diagnostic Response) Request Method: " + strRequestMethod);

// Obtain HttpRequest Path
strRequestPath = mockRequest.getPath();
log.info("ThirdParty NEG B tests Authorization Mock Service (GET /Diagnostic Response) Request Path: " + strRequestPath);

// Obtain HttpRequest Content
strContent = mockRequest.requestContent;
log.info("ThirdParty NEG B tests Authorization Mock Service (GET /Diagnostic Response) Request Content: " + strContent);

</con:script><con:responseContent/></con:response></con:restMockAction></con:restMockService>
<con:restMockService id="d3128334-cd5f-4524-9c93-39bbc43838cf" port="8081" path="/" host="openespivm" name="BatchListNotification" docroot=""><con:settings/><con:startScript/><con:properties><con:property><con:name>BatchList</con:name><con:value/></con:property></con:properties><con:restMockAction name="/ThirdParty/espi/1_1/Notification" method="POST" resourcePath="/ThirdParty/espi/1_1/Notification" id="c8109651-384d-4374-8e42-2054b7258aab"><con:settings/><con:defaultResponse>/ThirdParty/espi/1_1/Notification POST Response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>// Store batch list in project for use by foreground script
def project = requestContext.mockService.mockRunner.getMockService().getProject()

def requestBody = mockRequest.getRequestContent()
log.info "BatchListNotification (/ThirdParty/espi/1_1/Notification) RX: POST Request body: " + requestBody
//log.info "BatchListNotification (/ThirdParty/espi/1_1/Notification) RX: POST Request body: ..."
requestContext.mockService.setPropertyValue("BatchList",requestBody);
</con:dispatchPath><con:response name="/ThirdParty/espi/1_1/Notification POST Response" id="80857bf2-7556-45dc-8c55-7bdcead30356" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/" method="GET" resourcePath="/" id="7cfbf564-c29d-4b99-806a-5de209432b5c"><con:settings/><con:defaultResponse>Diagnostic Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Diagnostic Response" id="5b04675e-7056-4001-8884-1a0162930b43" httpResponseStatus="200"><con:settings/><con:script>import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport;
import org.apache.commons.httpclient.Header;

def String strRequestMethod;
def String strRequestPath;
def String strContent;

log.info("BatchListNotification Mock Service (GET /Diagnostic Response)");

// Obtain HttpRequest Method
strRequestMethod = mockRequest.method;
log.info("BatchListNotification Mock Service (GET /Diagnostic Response) Request Method: " + strRequestMethod);

// Obtain HttpRequest Path
strRequestPath = mockRequest.getPath();
log.info("BatchListNotification Mock Service (GET /Diagnostic Response) Request Path: " + strRequestPath);

// Obtain HttpRequest Content
strContent = mockRequest.requestContent;
log.info("BatchListNotification Mock Service (GET /Diagnostic Response) Request Content: " + strContent);

</con:script><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:restMockService id="d62e7b55-3326-4548-8946-7bb2de29e18b" port="8081" path="/" host="openespivm" name="REST MockService for STunnel" docroot=""><con:settings/><con:properties/><con:restMockAction name="/" method="GET" resourcePath="/" id="fc1cb170-728b-46d7-8b01-0dd2f47aaf2c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="REST Mock Service for STunnel GET Response" id="18cf4855-6e08-4d92-bb98-63fd380bf203" httpResponseStatus="200"><con:settings/><con:responseContent>hello</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="b81a8110-eb04-4156-80aa-668f474abd72" port="8085" path="/" host="openespivm" name="DC Simulator for Unit Testing - Delayed Response/HTTP" docroot=""><con:settings/><con:startScript>context.toggleResponse = true;</con:startScript><con:properties/><con:afterRequestScript>
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import groovyx.net.http.Method;

void issueNotification(String strBaseEndpoint,String href,String strContent)
{
	try {

		def http = new HTTPBuilder(strBaseEndpoint);
	
		def res = http.request(Method.POST) { req ->
		    uri.path = href
		    //headers.Authorization = 'Bearer ' + token
		    send("application/atom+xml", strContent)
		 
		    response.success = { resp, object ->
		    		strResult = "POST succeeded: " + resp.status;	   
		    }
		 
		    response.failure = { resp ->
			    strResult = "POST Failed: " + resp.statusLine;
		    }			 
		}
      		
	} catch (HttpResponseException ex) {
    
    // default failure handler throws an exception:
    log.info "DC Simulator -- POST httpResponseException response: ${ex.statusCode}";			    
	    strResult = "POST Unexpected response error: ${ex.statusCode}";
	}
}

String strSimulatorPort = mockRunner.mockContext.mockService.getPort();
String strBaseEndpoint = 'http://localhost:8081';
String strContent = '&lt;BatchList>&lt;resources>http://localhost:' + strSimulatorPort + '/DataCustodian/espi/1_1/resource/ReadServiceStatus&lt;/resources>&lt;/BatchList>';
String href = '/ThirdParty/espi/1_1/Notification';

if(context.toggleResponse)
{
	context.toggleResponse = !(context.toggleResponse);
	
	def thread = Thread.start {
		log.info "DC Simulator simulator: kick off thread... wait 4 seconds to send notification";
	 	sleep(4000)
	  	issueNotification(strBaseEndpoint,href,strContent);
	}
}
else
{
	context.toggleResponse = !(context.toggleResponse);
}



</con:afterRequestScript><con:restMockAction name="/" method="GET" resourcePath="/" id="e10700d1-5be1-4099-9dc3-61321381298c"><con:settings/><con:defaultResponse>Response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath/><con:response name="Response" id="f2397100-f745-4974-9446-6e9bc18dfb66" httpResponseStatus="200" mediaType="application/atom+xml"><con:settings/><con:script><![CDATA[

//String strBatchResponse = '<BatchList><resources>http://localhost:8080/DataCustodian/espi/1_1/resource/ReadServiceStatus</resources></BatchList>';
if(!context.toggleResponse)
{
	log.info("DC Simulator responding with 200/content");
	String strImmediateResponse = '<ServiceStatus xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns="http://naesb.org/espi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><currentStatus>1</currentStatus></ServiceStatus>';
	requestContext.proxiedResponse = strImmediateResponse;
	mockResponse.setResponseHttpStatus(200);
} else {
	log.info("DC Simulator responding with 202");
	requestContext.proxiedResponse = "";
	mockResponse.setResponseHttpStatus(202);
}
]]></con:script><con:responseContent>${proxiedResponse}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="0c0fb58e-0abc-41e7-8840-6cae5b9e2f8c" port="8086" path="/" host="openespivm" name="GenericGetService" docroot=""><con:settings/><con:properties><con:property><con:name>notificationRxTimeoutSecs</con:name><con:value>100</con:value></con:property><con:property><con:name>stunnelProxyPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8086</con:value></con:property></con:properties><con:restMockAction name="/" method="GET" resourcePath="/" id="070d92b9-4da0-41cd-9722-5ad774588790"><con:settings/><con:defaultResponse>GenericGetService Response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT
import static groovyx.net.http.ContentType.XML
import groovyx.net.http.*;
import groovyx.net.http.Method;
import org.xml.sax.InputSource;
import groovy.io.FileType;
import com.eviware.soapui.support.XmlHolder;
import java.util.zip.GZIPInputStream;
import java.io.ByteArrayInputStream;

public boolean RunCommand(String cmd)
{
	def doCmd;

	log.info("GenericGetService Mock Server -- (GET /) exec: " + cmd);
	log.info("GenericGetService Mock Server -- (GET /) os  : " + System.properties['os.name']);
	
	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute();
	} else {
		doCmd = ["bash", "-c",cmd].execute();
	}
	
	doCmd.waitFor();
	
	if(doCmd.exitValue()!=0) {
		
		log.error "GenericGetService Mock Server -- (GET /) return code: ${ doCmd.exitValue()}"
		log.error "GenericGetService Mock Server -- (GET /) stderr: ${doCmd.err.text}"
		log.error "GenericGetService Mock Server -- (GET /) stdout: ${doCmd.in.text}"
	
		return false;
	}
	return true;
}

public Integer doSFTPGET(String url,def groovyUtils) {
	
	def transferDir = groovyUtils.projectPath + "/../transferred";
	def list = []
	def dir = new File(transferDir);

	URI aURI = new URI(url);

	def username = aURI?.getUserInfo()?.split(":")?.getAt(0);
	def host = aURI?.getHost();
	def path = aURI?.getPath();
	
	log.info "GenericGetService Mock Server -- (GET /) SFTP: uname:" + username + " host:" + host + " path:" + path;
	
	dir.eachFileRecurse (FileType.FILES) { file ->
		list << file
	}
	
	if(list.size()>0){

		cmdRm = 'rm ' + transferDir +  '/*';
		
		if(RunCommand(cmdRm) != true) {
			log.error("GenericGetService Mock Server -- (GET /) Could not clear transfer directory" + transferDir);
			testRunner.fail("GenericGetService Mock Server -- (GET /) Could not clear transfer directory" + transferDir);
			return 0;
		} 
	}

	cmdGet = "sftp " + username + "@" + host + ":" + path + " " + transferDir + "/test.xml"
	
	if(RunCommand(cmdGet) != true) {
		log.error("GenericGetService Mock Server -- (GET /) Could not issue SFTP GET");
		testRunner.fail("GenericGetService Mock Server -- (GET /) Could not issue SFTP GET");
		return 0;
	}	

	String strResp = new File(groovyUtils.projectPath + "/../transferred/test.xml").getText();

	//log.info "GenericGetService Mock Server -- (GET /) received SFTP file:" +  strResp;
	log.info "GenericGetService Mock Server -- (GET /) received SFTP file:...";

	context.strResponseBody = strResp;
	
	return 1;
}

public Integer doHTTPGET(String url, String token,Object context) {

	def http = new HTTPBuilder();
	def result = 500;

	http.setContentEncoding("");

	try {
	
		http.request( url, GET, TEXT ) { req ->
		     headers.Authorization = token
//			headers.Accept = 'application/atom+xml,gzip'
			headers.Accept = 'application/atom+xml'
			headers.'Accept-Encoding' = "gzip,deflate"

			req.getParams().setParameter("http.connection.timeout",new Integer(360000));
			req.getParams().setParameter("http.socket.timeout",new Integer(3600000));
			
			response.success = { resp, reader ->
				log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET -- Response Status: ${resp.status} / ${resp.statusLine} Content-Type: ${resp.headers.'Content-Type'} Content-Encoding: ${resp.headers.'Content-Encoding'}"
				//log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET -- Response Status: ${resp.statusLine}"
				log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET -- Content-Type: ${resp.headers.'Content-Type'}"
				log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET -- Content-Encoding: ${resp.headers.'Content-Encoding'}"

				if((resp.headers.'Content-Encoding' == 'gzip') || (resp.headers.'Content-Encoding' == 'GZIP')){
					def byteStream = new ByteArrayInputStream( resp.entity.content.getBytes());
					def deflated = new GZIPInputStream(byteStream)						
					context.strResponseBody = deflated.text
				} else {
					context.strResponseBody =  reader.getText();
				}
			
				//log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET -- Response Body: " + context.strResponseBody;
				//log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET -- Response Body: ...";
				
				result = resp.status;
				
			}
			response.'401' = { resp ->
	        		//println 'access denied'
	        		log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: access denied"
				result = resp.status;
	    		}						
			response.'403' = { resp ->
	        		//println 'access not authorized'
	        		log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: access not authorized"
	        		//context.strResponseBody =  reader.getText();
				result = resp.status;
	    		}						
			response.'406' = { resp ->
	        		//println 'requested format Not Acceptable'
	        		log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: requested format Not Acceptable"
	        		//context.strResponseBody =  reader.getText();
				result = resp.status;
	    		}						
			response.'202' = { resp ->
	        		//println 'accepted but will provide notification when done'
	        		log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: accepted but will provide notification when done"
				result = resp.status;
	    		}
			response.failure = { resp ->
				log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: GET Failed with Status: ${resp.statusLine}";
				//log.info "doHTTPGET (GET) -- bShouldPass: " + bShouldPass;
				strResult = "GenericGetService Mock Server -- (GET /) - doHTTPGET: GET Failed: " + resp.statusLine;
				bFailure = true;
				result = resp.status;
			}  
		}
	} catch ( HttpResponseException ex ) {
	    // default failure handler throws an exception:
	    log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: GET HttpResponseException Error: ${ex.statusCode}"
	    strResult ="GenericGetService Mock Server -- (GET /) - doHTTPGET: GET Unexpected response error: ${ex.statusCode}"
	    _strError = strResult;
	    bFailure = true;
	    return 500;
	
	} catch (IOException io) {
	        log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: GET IOException Error: " + io;
	        strResult = "GenericGetService Mock Server -- (GET /) - doHTTPGET: GET IOException error: " + io;
	        _strError = strResult;
	        bFailure = true;
	        return 500;
	        
	} catch (Exception e) {
	    log.info "GenericGetService Mock Server -- (GET /) - doHTTPGET: GET Exception Error: " + e;
	    strResult ="GenericGetService Mock Server -- (GET /) - doHTTPGET: GET Unexpected error"
	    _strError = strResult;
	    bFailure = true;
	    return 500;			
	}
	return result;
}

/////////////////////////////////////////////////////////
// Main Script
/////////////////////////////////////////////////////////

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def project = mockRequest.getContext().getMockService().getProject();
def authCase = project.testSuites['Library'].testCases['Create Authorization and extract all information'];
def mockPort = authCase.getPropertyValue("mockPort");
def responseToGet;
def responses = [];
def requestPath = mockRequest.getPath();
def queryString = "";

try {
queryString = mockRequest.getHttpRequest().getQueryString();
}
catch(Exception e) {
	log.info ("exception: " + e.getMessage());
}

context.strResponseBody = null;

log.info "GenericGetService Mock Server -- (GET /) - Main Script -- RX Path: "+ requestPath;
log.info "GenericGetService Mock Server -- (GET /) - Main Script -- RX Query params: "+ queryString;
log.info "GenericGetService Mock Server -- (GET /) - Main Script -- RX Accept-Encoding: " + mockRequest.getRequestHeaders().get("Accept-Encoding");

String token = "";

if (mockRequest.getRequestHeaders().get("Authorization") != null) {
	token = mockRequest.getRequestHeaders().get("Authorization");
	log.info "GenericGetService Mock Server -- (GET /) - Main Script -- token: " + token;

	// Remove brackets "[" "]" surrounding returned token
	token = token.replace("[","");
	token = token.replace("]","");

	log.info "GenericGetService Mock Server -- (GET /) - Main Script -- Use Authorization:'" + token + "'";
	
} else {

	log.info "GenericGetService Mock Server -- (GET /) - Main Script -- No Authorization Header";
}

log.info "GenericGetService Mock Server -- (GET /) - Main Script -- token: " + token;

// TODO - where to specify actual DC address??

//String url = "http://localhost:" + context.mockService.getPropertyValue("stunnelProxyPort") + requestPath;
//String url = "http://api.londonhydro.com:" + context.mockService.getPropertyValue("stunnelProxyPort") + requestPath;
def serviceEndpointURL = new URL(project.getPropertyValue("ServiceEndpoint"));

String url = "";

if(queryString!=null && queryString!="") {
	url = "http://" + serviceEndpointURL.host + ":" + context.mockService.getPropertyValue("stunnelProxyPort") + requestPath + "?" + queryString;
} else {
	url = "http://" + serviceEndpointURL.host + ":" + context.mockService.getPropertyValue("stunnelProxyPort") + requestPath;
}

def aURL = new URL(url);

/////////////////////////////////////////////////////////
// start notification mock service to listen for results
/////////////////////////////////////////////////////////

def notificationService = project.getRestMockServiceByName("BatchListNotification");
//context.mockService.setPort(authCase.getPropertyValue("mockPort").toInteger());
def notificationRunner = notificationService.start(); 
// clear notification of BatchList result
notificationService.setPropertyValue("BatchList","");

log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- Protocol: " + aURL.getProtocol()

if( (aURL.getProtocol()=="http") || (aURL.getProtocol()=="https")){
// based on result of initial GET, handle response

	log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- URL: " + url
	log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- token: " + token
//	log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- context: " + context
	
	responseToGet = doHTTPGET(url,token,context);

	log.info "GenericGetService Mock Server -- (GET /) - response code: " + responseToGet;

	switch (responseToGet)
	{
		case 200:
			log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- immediate response";
			responses << context.strResponseBody;	
			break;
		case 202:
			def delayWait = context.mockService.getPropertyValue("notificationRxTimeoutSecs").toInteger();
			//def delayWait = 60;
			
			log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- Response is delayed... wait + " + delayWait + "(secs) for notification";
			// we must wait for notification of BatchList with URLs to retrieve
			
			while (delayWait > 0)
			{
				delayWait --;
				sleep (1000);
				
  				if (notificationService.getPropertyValue("BatchList").length() > 0)
				{
					log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- Notification Received: " + responseToGet ;
					break;
				}
			}
	
			// Check if we have further processing
			if (notificationService.getPropertyValue("BatchList").length() == 0)
			{
				log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- did not receive notification");
				
				requestContext.proxiedResponse = "Reqeust timeout";	
				context.responseCode = 408;

				// Terminate BatchListNotification Mock Service
				log.info("GenericGetService (GET /) -- doHTTPGet default: Stopping BatchListNotification Mock Service");
				notificationRunner.stop();
				notificationRunner = null;				
				
				//testRunner.fail("GenericGetService No Notification Received");

				return;
			}
			else
			{
				// log.info "Notification received:" + notificationService.getPropertyValue("BatchList");
				// process batch list
				def rootNode = new XmlSlurper().parseText(notificationService.getPropertyValue("BatchList"));
				
				// iterate through resources
				rootNode.children().each {
					
					log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- GET resource:" + it.text();

					URI aURI = new URI(it.text());

					if( (aURI.getScheme()=="http") || (aURI.getScheme()=="https")){
						String strOrigURI = it.text();
						String strURI = "http://" + aURI.getHost()+ ":" + project.getPropertyValue("proxyOutPort") + "/" + aURI.getPath();

						if(strOrigURI.contains("?")){
							int iPos = strOrigURI.indexOf("?");
							String strQry = strOrigURI.substring(iPos);							
							strURI = strURI + strQry;
						}

						log.info "GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- Issue GET to:" + strURI;
						
						def responseToBatchGet = doHTTPGET(strURI,token,context);
						
						switch (responseToBatchGet)
						{
							case 200:
								//log.info("got response: " + context.strResponseBody);
								responses << context.strResponseBody;	
								break;
							default:
								log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- did not receive 200 response");
								break;
						}
					} else if(aURI.getScheme()=="sftp") {
						if(doSFTPGET(it.text(),groovyUtils)==1) {
							responses << context.strResponseBody;		
						} else { 
							log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service -- did not receive SFTP response");				
						}
					} else
					{
						log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: unknown protocol specified in batch notification.");	
					}
				}
			}
			break;
		default:
			log.info("GenericGetService (GET /) -- doHTTPGet default: Starting");
			//responseToGet
			requestContext.proxiedResponse = context.strResponseBody;	
			context.responseCode = responseToGet;

			//log.info("GenericGetService (GET /) -- doHTTPGet default: ResponseBody: " + requestContext.proxiedResponse);
			log.info("GenericGetService (GET /) -- doHTTPGet default: ResponseBody: ...");
			log.info("GenericGetService (GET /) -- doHTTPGet default: responseCode: " + context.responseCode);
			
			// Terminate BatchListNotification Mock Service
			log.info("GenericGetService (GET /) -- doHTTPGet default: Stopping BatchListNotification Mock Service");
			notificationRunner.stop();
			notificationRunner = null;
			return;
			break;
	}
}
else if (aURL.getProtocol()=="sftp"){
	//doSFTPGET(url,token);
	//responses << testRunner.testCase.getPropertyValue("response");	
	log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: SFTP not allowed in request URL");	
}
else {
	//testRunner.fail("GenericGetService Unknown protocol in URL");
	log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: Unknown protocol in URL");	
}

	

/////////////////////////////////////////////////////////
// stop notification mock service to listen for results
/////////////////////////////////////////////////////////
notificationRunner.stop();
notificationRunner = null;

requestContext.proxiedResponse = "";

//if(responses.size()<2){
	responses.each { it->
		//log.info "GenericGetService Mock Server -- (GET /) - Stop Notification Mock Service -- response: " + it;
		log.info "GenericGetService Mock Server -- (GET /) - Stop Notification Mock Service -- response: ...";
		requestContext.proxiedResponse = requestContext.proxiedResponse + it;
	}
	context.responseCode = 200;
/*} 
else
{
	def feedNodeSourceA;
	def docSourceA;
	
	int iIdx = 0;
	responses.each { it->
		log.info "GenericGetService Mock Server -- (GET /) - Stop Notification Mock Service -- response: " + it;
		//log.info "GenericGetService Mock Server -- (GET /) - Stop Notification Mock Service -- response: ...";
		//requestContext.proxiedResponse = requestContext.proxiedResponse + it;
		if(iIdx==0){
			// SOURCE A
			try{
				holderSourceA = groovyUtils.getXmlHolder(it);
				
			} catch(org.apache.xmlbeans.XmlException e) {
				log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: error parsing XML response.");	
				context.responseCode = 500;
				return ;
			}
			
			holderSourceA.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');
			
			try{
				feedNodeSourceA = holderSourceA.getDomNode("//atom:feed");
			} catch(org.apache.xmlbeans.XmlException e) {
				log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: error parsing XML response.");	
				context.responseCode = 500;
				return ;
			}

			// TEMP PGE Work-around
			for (item in feedNodeSourceA.getChildNodes()) {
				if(item.getNodeName()=="ProgramIdMappings") {
					item.parentNode.removeChild(item);
					break;
				}
			}
			
			docSourceA = feedNodeSourceA.getOwnerDocument();	
					
		} else {
			// SOURCE N
			try{
				holderSourceB = groovyUtils.getXmlHolder(it);
				
			} catch(org.apache.xmlbeans.XmlException e) {
				log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: error parsing XML response.");	
				context.responseCode = 500;
				return ;
			}
			
			holderSourceB.declareNamespace( 'atom', 'http://www.w3.org/2005/Atom');
			
			def feedNodeSourceB;
			
			try{
				feedNodeSourceB = holderSourceB.getDomNode("//atom:feed");
			} catch(org.apache.xmlbeans.XmlException e) {
				log.error("GenericGetService Mock Server -- (GET /) - Start Notification Mock Service: error parsing XML response.");	
				context.responseCode = 500;
				return ;
			}
			
			// copy childern from from src B to scr A
			for (item in feedNodeSourceB.getChildNodes()) {
				//log.info("adding child from src B:" + item.getNodeName());
				// TEMP PGE Work-around
				if(item.getNodeName()!="ProgramIdMappings") {
					def importNode = docSourceA.importNode(item,true);
					feedNodeSourceA.appendChild(importNode);
				}
			}			
		}

		
		iIdx++;
	}	

	requestContext.proxiedResponse = holderSourceA.getXml();
	context.responseCode = 200;
}
*/


return 
]]></con:dispatchPath><con:response name="GenericGetService Response" id="79bee9b3-4989-409b-8389-1bb5f4cf90d3" httpResponseStatus="403"><con:settings/><con:script>mockResponse.setResponseHttpStatus(context.responseCode);</con:script><con:responseContent>${proxiedResponse}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="be1ca609-7ac8-4800-9d34-770c90a6e5a7" port="8085" path="/" host="openespivm" name="DC Simulator for Unit Testing - Immediate Response" docroot=""><con:settings/><con:properties/><con:restMockAction name="/" method="GET" resourcePath="/" id="095ce477-10b3-46d3-b050-13b86093009b"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="1bdd0fc3-6335-43e9-bb60-518fd4ac808a" httpResponseStatus="200"><con:settings/><con:responseContent>&lt;ServiceStatus xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns="http://naesb.org/espi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   &lt;currentStatus>1&lt;/currentStatus>
&lt;/ServiceStatus></con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="2b08df77-2234-4477-a9c3-4efe56717010" port="8085" path="/" host="openespivm" name="DC Simulator for Unit Testing - Delayed Response/sftp" docroot=""><con:settings/><con:properties/><con:afterRequestScript><![CDATA[
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import groovyx.net.http.Method;
import groovy.io.FileType;

public boolean RunCommand(String cmd)
{
	def doCmd;

	log.info("exec: " + cmd);
	log.info("os  : " + System.properties['os.name']);
	
	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute();
	} else {
		doCmd = ["bash", "-c",cmd].execute();
	}
	
	doCmd.waitFor();
	
	if(doCmd.exitValue()!=0) {
		
		log.error "return code: ${ doCmd.exitValue()}"
		log.error "stderr: ${doCmd.err.text}"
		log.error "stdout: ${doCmd.in.text}"
	
		return false;
	}
	return true;
}

void issueNotification(String strBaseEndpoint,String href,String strContent)
{
	try {

		def http = new HTTPBuilder(strBaseEndpoint);
	
		def res = http.request(Method.POST) { req ->
		    uri.path = href
		    //headers.Authorization = 'Bearer ' + token
		    send("application/atom+xml", strContent)
		 
		    response.success = { resp, object ->
		    		strResult = "POST succeeded: " + resp.status;	   
		    }
		 
		    response.failure = { resp ->
			    strResult = "POST Failed: " + resp.statusLine;
		    }			 
		}
      		
	} catch (HttpResponseException ex) {
    
    // default failure handler throws an exception:
    log.info "DC Simulator -- POST httpResponseException response: ${ex.statusCode}";			    
	    strResult = "POST Unexpected response error: ${ex.statusCode}";
	}
}

	String strSimulatorPort = mockRunner.mockContext.mockService.getPort();
	String strBaseEndpoint = 'http://localhost:8081';
	String strContent = '<BatchList><resources>sftp://openespivmssh@openespivm/DataCustodian/espi/1_1/resource/Batch/Bulk/SampleData.xml</resources></BatchList>';
	String href = '/ThirdParty/espi/1_1/Notification';


	log.info "DC Simulator simulating Batch Notification/SFTP: creating sample data file";

	def list = [];
	String strFTPSrcFolder = "/DataCustodian/espi/1_1/resource/Batch/Bulk";
	def dir = new File(strFTPSrcFolder);

	dir.eachFileRecurse (FileType.FILES) { file ->
		list << file
	}
	
	if(list.size()>0){

		cmdRm = 'rm ' + strFTPSrcFolder +  '/*';
		
		if(RunCommand(cmdRm) != true) {
			log.error("could not clear sftp directory");
			return 0;
		} 
	}

	def file1 = new File(strFTPSrcFolder + '/SampleData.xml');
	
	file1.write '<ServiceStatus xsi:schemaLocation="http://naesb.org/espi espiDerived.xsd" xmlns="http://naesb.org/espi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><currentStatus>1</currentStatus></ServiceStatus>';
	
	def thread = Thread.start {
		log.info "DC Simulator simulator: kick off thread... wait 4 seconds to send notification";
	 	sleep(4000)
	  	issueNotification(strBaseEndpoint,href,strContent);
	}









]]></con:afterRequestScript><con:restMockAction name="/" method="GET" resourcePath="/" id="298916f8-d6de-4f81-bc37-26cfc7412966"><con:settings/><con:defaultResponse>Response 1 - 202</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1 - 202" id="552f9a94-4650-43b2-b2a0-f0aa02f07719" httpResponseStatus="202"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties>

	<con:property><con:name>access_token</con:name><con:value>eyJyZWZyZXNoX2lkIjogIkRFTU9fUFY1ZDY2U24xcHRBMThUNlI1UUtiU3VFSmN0IiwgImF1dGhfaWRzIjogWzExOTUwNl0sICJzY29wZSI6ICJGQj0xXzNfNF8xM18xNCIsICJ0eXBlIjogImdiY19hdXRoIiwgImlkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInVzZXIiOiA0NTY0NH06MWdVTkc3OjRTNmxpSUVDWkJ5dUwzcDRHNUkxTzRrQ09rOA</con:value></con:property><con:property><con:name>applicationInformationId</con:name><con:value>7c8a3cac7855_DEMO_gbatestsuite_id_admin</con:value></con:property><con:property><con:name>authorizationId</con:name><con:value>1dfa07c5740a_119506</con:value></con:property><con:property><con:name>authorizationServer</con:name><con:value>sandbox.utilityapi.com:443</con:value></con:property><con:property><con:name>authorizationServerAuthorizationEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/authorize</con:value></con:property><con:property><con:name>authorizationServerTokenEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/token</con:value></con:property><con:property><con:name>authorizationURI</con:name><con:value/></con:property><con:property>

		<con:name>BaseURL</con:name>
		<con:value/>
	</con:property>
	
	
	
	
	
	
	
	
	
	
	<con:property><con:name>bulkId</con:name><con:value>1</con:value></con:property><con:property><con:name>certScopes</con:name><con:value>FB=1_3_4_5_6_7_8_9_13_14_15_16_17_27_28_35_37_39_40</con:value></con:property><con:property><con:name>client_access_token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJ0eXBlIjogImdiY19jbGllbnQiLCAiaWQiOiAiREVNT19nYmF0ZXN0c3VpdGVfaWRfYWRtaW4iLCAidXNlciI6IDQ1NjQ0fToxZ1VORmg6MTlUdjdUNy1kc1NmYXBaN09CZUFTOGRra3Zr</con:value></con:property>
	
	
	
	
	<con:property><con:name>DataCustodianContext</con:name><con:value/></con:property><con:property><con:name>dataCustodianId</con:name><con:value>DEMO</con:value></con:property>
	
	<con:property><con:name>dataCustodianResourceEndpoint</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource</con:value></con:property><con:property><con:name>dataCustodianResourceUri</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource</con:value></con:property>
	
	
	
	<con:property><con:name>dataCustodianScopeSelectionScreenURI</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/scope_selection</con:value></con:property>
	
	<con:property><con:name>data_custodian_access_token</con:name><con:value>2a85f4bd-30db-4b7d-8f41-b046b0566cb3</con:value></con:property><con:property><con:name>DBprepopulateScriptName</con:name><con:value>prepopulatesql_dc.sql</con:value></con:property><con:property><con:name>electricPowerQualitySummaryId</con:name><con:value>1</con:value></con:property><con:property><con:name>electricPowerUsageSummaryId</con:name><con:value>1</con:value></con:property>
	
	
	
	<con:property><con:name>intervalBlockId</con:name><con:value>1</con:value></con:property><con:property><con:name>linkPrefixForReplace</con:name><con:value>https://localhost:8443/DataCustodian/</con:value></con:property><con:property><con:name>localTimeParametersId</con:name><con:value>1</con:value></con:property><con:property><con:name>meterReadingId</con:name><con:value>1</con:value></con:property>
	
	<con:property><con:name>mysqlCmdDC</con:name><con:value>mysql --user=root --password=password</con:value></con:property>
	<con:property><con:name>mysqlCmdTP</con:name><con:value>mysql --user=root --password=password</con:value></con:property><con:property><con:name>myTimeoutCmd</con:name><con:value>timeout</con:value></con:property><con:property><con:name>NotificationEndpoint</con:name><con:value>https://cmdcertdev.greenbuttonalliance.org/ThirdParty</con:value></con:property><con:property><con:name>notificationUri</con:name><con:value>espi/1_1/Notification</con:value></con:property><con:property><con:name>opensslCmd</con:name><con:value>openssl</con:value></con:property>
	
	
	
	
	
	
	
	<con:property><con:name>readingTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>registration_access_token</con:name><con:value>eyJyZWxhdGVkX2lkIjogIkRFTU9fZ2JhdGVzdHN1aXRlX2lkX2FkbWluIiwgInR5cGUiOiAiZ2JjX3JlZyIsICJpZCI6ICJyZWdpc3RyYXRpb25fREVNT19nYmF0ZXN0c3VpdGVfaWQiLCAidXNlciI6IDQ1NjQ0fToxZ1VORmc6d0o0d1d4MmVHS21Zbk5VOTdFeDBTTmFVSnFz</con:value></con:property><con:property><con:name>registration_third_party_access_token</con:name><con:value>c66b0854-ea1f-4e24-afb7-afab9e0f6c5e</con:value></con:property><con:property><con:name>resourceId</con:name><con:value>01</con:value></con:property><con:property><con:name>resourceServer</con:name><con:value>sandbox.utilityapi.com:443</con:value></con:property><con:property><con:name>resourceServerUri</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/espi/1_1/resource</con:value></con:property><con:property><con:name>resourceUri</con:name><con:value>DataCustodian/espi/1_1/resource</con:value></con:property>
	
	
	
	
	
	
	
	
	
	
	
<con:property><con:name>retailCustomerId</con:name><con:value>1</con:value></con:property><con:property><con:name>AuthorizationEndpoint</con:name><con:value>http://sandbox.utilityapi.com:8080/DataCustodian/oauth/token</con:value></con:property><con:property><con:name>ServiceEndpoint</con:name><con:value>http://sandbox.utilityapi.com:8086</con:value></con:property><con:property><con:name>subscriptionId</con:name><con:value>5</con:value></con:property><con:property><con:name>TestFile</con:name><con:value>test_usage_data.xml</con:value></con:property><con:property><con:name>TestFile2</con:name><con:value>Gas.xml</con:value></con:property><con:property><con:name>TestManager</con:name><con:value>grace</con:value></con:property><con:property><con:name>TestManagerPW</con:name><con:value>koala</con:value></con:property><con:property><con:name>TestRetailCustomer</con:name><con:value>alan</con:value></con:property><con:property><con:name>TestRetailCustomerPW</con:name><con:value>koala</con:value></con:property><con:property><con:name>ThirdPartyContext</con:name><con:value/></con:property><con:property><con:name>thirdPartyNotificationEndpoint</con:name><con:value>https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/Notification</con:value></con:property><con:property><con:name>third_party_access_token</con:name><con:value>53520584-d640-4812-a721-8a1afa459ff7</con:value></con:property><con:property><con:name>timeoutCmd</con:name><con:value>timeout</con:value></con:property><con:property><con:name>upload_access_token</con:name><con:value>03909715-b0ca-4797-9a9a-601fff1d2848</con:value></con:property><con:property><con:name>usagePointDescription1</con:name><con:value>Front Electric Meter</con:value></con:property><con:property><con:name>usagePointDescription2</con:name><con:value>Gas</con:value></con:property><con:property><con:name>usagePointId</con:name><con:value>1</con:value></con:property><con:property><con:name>usagePointUUID1</con:name><con:value>48C2A019-5598-4E16-B0F9-49E4FF27F5FB</con:value></con:property><con:property><con:name>usagePointUUID2</con:name><con:value>642EABA-8E42-4D1A-A375-AF54993C007B</con:value></con:property><con:property><con:name>userAccessToken1</con:name><con:value>cc56d10c-f04f-41db-bc0b-6a5e19140459</con:value></con:property><con:property><con:name>userAccessToken2</con:name><con:value>4be1fd21-795e-4350-9092-67e1090921c5</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=1_3_4_13_14</con:value></con:property><con:property><con:name>client_id</con:name><con:value>DEMO_gbatestsuite_id_admin</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://cmdcertdev.greenbuttonalliance.org/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>state</con:name><con:value/></con:property><con:property><con:name>client_secret</con:name><con:value>gbasecret123</con:value></con:property><con:property><con:name>mockPort</con:name><con:value>8081</con:value></con:property><con:property><con:name>proxyOutPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>authorizationServerUri</con:name><con:value>https://sandbox.utilityapi.com/DataCustodian/demo/oauth/authorize</con:value></con:property><con:property><con:name>registration_access_token_client_id</con:name><con:value>registration_DEMO_gbatestsuite_id</con:value></con:property><con:property><con:name>client_access_token_client_id</con:name><con:value>DEMO_gbatestsuite_id</con:value></con:property><con:property><con:name>client_access_token_secret</con:name><con:value>gbasecret123</con:value></con:property><con:property><con:name>registration_access_token_secret</con:name><con:value>gbasecret123</con:value></con:property><con:property><con:name>stunnelConfigDirectory</con:name><con:value>/etc/stunnel</con:value></con:property><con:property><con:name>stunnelStartCmd</con:name><con:value>sudo /etc/init.d/stunnel4 start</con:value></con:property><con:property><con:name>stunnelStopCmd</con:name><con:value>sudo /etc/init.d/stunnel4 stop</con:value></con:property><con:property><con:name>stunnelReceiveAddress</con:name><con:value>172.31.37.22:443</con:value></con:property><con:property><con:name>proxyOutPort1</con:name><con:value>8080</con:value></con:property><con:property><con:name>BatchList</con:name><con:value/></con:property><con:property><con:name>responseArray</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CApathDirectory</con:name><con:value>/etc/ssl/certs</con:value></con:property><con:property><con:name>GBACertId</con:name><con:value>52df5b79-f375-54b4-9eca-3ab0fa6fd45b</con:value></con:property><con:property><con:name>productionAuthorizationServerDomain</con:name><con:value>https://sandbox.utilityapi.com</con:value></con:property><con:property><con:name>productionResourceServerDomain</con:name><con:value/></con:property><con:property><con:name>NAESBPurchasedStandardsURI</con:name><con:value>https://www.naesb.org//pdf2/copyright.pdf</con:value></con:property><con:property><con:name>productionSFTPServerDomain</con:name><con:value/></con:property><con:property><con:name>stunnelStatusCmd</con:name><con:value>sudo netstat -lpn | grep :80*</con:value></con:property><con:property><con:name>authorizationServerIP</con:name><con:value>52.88.232.238</con:value></con:property><con:property><con:name>resourceServerIP</con:name><con:value>52.88.232.238</con:value></con:property><con:property><con:name>resourceServerPort</con:name><con:value>443</con:value></con:property><con:property><con:name>authorizationServerPort</con:name><con:value>443</con:value></con:property><con:property><con:name>soapUIPlatformSSLCertificate</con:name><con:value>/etc/stunnel/greenbuttonalliance_ssl_certificate_2017_02_14.pem</con:value></con:property><con:property><con:name>soapUIPlatformSSLPrivateKey</con:name><con:value>/etc/stunnel/greenbuttonalliance_original_private_key.pem</con:value></con:property><con:property><con:name>CMDTestStep</con:name><con:value>[FB_35] REST for Bulk -- RBK002 [NEG]</con:value></con:property><con:property><con:name>applicationInformationAuthorizationId</con:name><con:value>Authorization</con:value></con:property><con:property><con:name>authorizationRequired</con:name><con:value>false</con:value></con:property><con:property><con:name>applicantName</con:name><con:value>UtilityAPI</con:value></con:property><con:property><con:name>MozillaRootCCADBURI</con:name><con:value>https://ccadb-public.secure.force.com/mozilla/IncludedCACertificateReportCSVFormat</con:value></con:property><con:property><con:name>SSLInterfaceType</con:name><con:value>IP</con:value></con:property><con:property><con:name>SeleniumWebDriver</con:name><con:value>org.greenbutton.cmd.utils.DriverHelper@57af7945</con:value></con:property><con:property><con:name>ActiveMockService</con:name><con:value>com.eviware.soapui.impl.wsdl.mock.WsdlMockRunner@13222116</con:value></con:property><con:property><con:name>expires_in</con:name><con:value>3600</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>DEMO_PV5d66Sn1ptA18T6R5QKbSuEJctPSK8WuXwUX8HgcvYCjG4g11Aj6sj5pJpVNAfv1WbDhES5ftECpf9KybVkwPkVrTamRJfWvEAf84WSXR9b1SzEB1uppN6w27wtAYrj</con:value></con:property><con:property><con:name>expires_atMillis</con:name><con:value>1543982288914</con:value></con:property><con:property><con:name>token_type</con:name><con:value>Bearer</con:value></con:property></con:properties>

<con:wssContainer/>
<con:oAuth2ProfileContainer/>
<con:oAuth1ProfileContainer/><con:sensitiveInformation/>
</con:soapui-project>